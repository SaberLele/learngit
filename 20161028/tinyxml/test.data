<doc>from : RssFile/phonekr.xml
<docid>8</docid>
<title>锋客网</title>
<link>http://www.phonekr.com</link>
<description>techXtreme 科技锋芒</description>
<item>
<title>[Material Playground] Flamingo</title>
<link>http://www.phonekr.com/material-playground-flamingo/</link>
<description>不知道你是否还记得第一届 Material Design Awards 的各位获奖者们? 这些应用在今天看来依然是非常优秀的应用, 如果还没用过的话请尽量试用一番. 今天要介绍的这款应用, 就是来自于第一届 Material Design Award 得主, Weather Timeline 的开发者 Sam Ruston 的一款新应用 —— Flamingo.</description>
<content>不知道你是否还记得第一届 Material Design Awards 的各位获奖者们? 这些应用在今天看来依然是非常优秀的应用, 如果还没用过的话请尽量试用一番. 今天要介绍的这款应用, 就是来自于第一届 Material Design Award 得主, Weather Timeline 的开发者 Sam Ruston 的一款新应用 —— Flamingo.
Material Playground
Flamingo 是一款第三方 Twitter 客户端. 市面上已经有一些不错的 Twitter 客户端了, 比如 Twidere, Falcon Pro, Carbon 等等, 而在这里特别推荐 Flamingo 的理由是什么呢?

Flamingo 的一大特色就是提供了多而不杂, 基于 Material Design 的主题定制功能. 这个主题定制可不是那种换个颜色意思意思的主题定制, 而是如上图一般, 可以改变整个应用的导航布局的主题定制. 用户可以自行选择顶级导航的数量, 位置, 是否固定, 图标 / 文字的呈现与否, 等等. 当然, 颜色的定制也是无比详尽, 让人不由得想起了另一款 Twitter 客户端 Tweedle.

作为一款 Twitter 客户端, Flamingo 提供了基本所有的基础功能, 还做了一些好玩的附加功能, 比如说在发推的时候可以直接从 Giphy 搜索 GIF 图片. 另外, Flamingo 还提供了长按预览图片和用户的操作. 实际使用时非常便利.

很多人都非常喜欢 Twitter 客户端在点下桃心时的动画, Sam 把这个动画也搬上了 Flamingo. 不仅桃心有动画, 转推时也有相同的动画, 让使用时的愉悦感再次增加不少.

查看用户个人资料时的详情页, 会根据用户的头像颜色改变主色调, 算是 palette library 比较常见的运用了. 设置里的选项在丰富的同时不杂乱, 大部分都可以让人一眼就明白是干什么用的. 比较可惜的是用户不能在更改配色 / 样式时实时预览, 这对于那些对部件名称不甚熟悉的用户而言并不友好. 不过考虑到会用到高级的定制功能的用户想必都不是对这些名词一无所知的人, 而真对此一无所知的用户也可以愉快地在默认主题里找到自己心仪的一款, 这个瑕疵就显得不是那么严重了.

Flamingo 提供了十二款不同的默认配色, 可以满足绝大多数用户的需求. 而如果你在 Flamingo 登录了多个 Twitter 账户, 你还可以选择为他们单独设置不同的主题.
Flamingo 当然也提供了更详尽的更改配色功能, 不过 Sam 在这方面做了一个明智的选择: 他将可供选择的颜色限定在了比较小的范围内, 而不是像很多其他提供主题定制的应用一样, 干脆丢一个 RGB/HSV 选择器给用户. 这么一来, 用户既不会在面对大量颜色选择时不知所措, 也免去了对由于用户审美不过关造成的可怕结果带来的担忧. 不过话虽如此, 用户还是可以在如此限定的选择范围内制造出一些瞎眼的组合. 不过至于这个话题, 那就不是本篇文章该讨论的范围了.

虽然如果你在平板上访问 Play Store 里 Flamingo 的介绍页, 会看到上面写着 Designed for Phones, 但是 —— 嘿, 这可是一款出自 Sam Ruston 之手的应用! 从 Hue 开始, 他就一直很注重平板适配, 所以你看, Flamingo 有着出色的平板适配.
Beta 版
Flamingo 尚在 Beta 开发中, 但是 Sam 并没有采用 Google Play 的 Beta 发布, 而是直接将其公开. 他承诺了会及时更新, 而且在 Twitter 上也非常积极地听取着大家的反馈. 但是由于这款应用尚在开发中, 所以运行起来并不是那么稳定. 大多数用户都或多或少地遇到了一些崩溃. 所以在 Sam 决定摘下 Flamingo 的 beta 帽子前, 并不建议将其作为唯一的 Twitter 客户端使用. 不过, 如果你是一个对设计精良的应用感兴趣的用户, 或是想要学习优秀 Material Design 设计的设计师, 那么这 $0.99 绝对会让你觉得物有所值.
Play Store 连接: Flamingo for Twitter ($0.99)

</content>
</item>
<item>
<title>Material Design 更新: 动效, 增长与用户教育</title>
<link>http://www.phonekr.com/motion-growth-communications/</link>
<description>今天, Material Design 迎来了毫无预兆的一个大更新, 突然地完善了 (本应在两年前就有的) 动效设计讲解与加入了面向中小团队与个人开发者的初体验设计指导.</description>
<content>今天, Material Design 迎来了毫无预兆的一个大更新, 突然地完善了 (本应在两年前就有的) 动效设计讲解与加入了面向中小团队与个人开发者的初体验设计指导.
Motion
Material Motion &#8211; Google Design

&nbsp;
动效设计这个部分经过了一番彻底的改头换面, 增加了不少详细的说明 (看到上面这张图相信不少已经试过制作 Material Design 风格动效的设计师们应该会露出会心的苦笑吧, 现在终于可以不用自己去费精力摸索其中的规律了), 包括动效持续的长度, 加速度的使用, material 的移动, 创建与消除, 等等, 几乎涵盖了 Material Design 动效的全部细节, 还指出了一些常见的错误 (这点非常重要, 有很多设计师 / 开发者凭着来源不明的经验模仿 Material Design 动效, 做出来的东西千奇百怪, 令人不悦, 完全丧失了 Material Design 动效的初衷), 值得对动效感兴趣的开发者和设计师仔细阅读.

&nbsp;
更新里还包含了对于图标动效和载入动画的一些有趣的建议, 千万不要错过.
Growth &amp; communications
Introduction &#8211; Growth &amp; Communication &#8211; Google Design

用户教育的部分, 一直以来都为 Android Design/Material Design 所忽视 (虽然 ADiA 有一期专门的节目介绍), 但这次是 Google 第一次为用户教育模块写下详细的介绍. 对于中小团队和个人开发者而言, 初体验设计对于应用的生死存亡而言至关重要, 这次 Google 终于给出了一份指导文档, 还是很有意义的.


初体验设计的模块中, 包括了非常常用而至关重要的空界面设计, 内容定制模块, 功能介绍等等, 都附有详细的设计图.
 

当然, 你也可以按照自己的思考来进行定制, 不过至少 Google 终于给出了一个参考标准.
另外, 这个模块强烈建议配合 Google Primer 服用, 效果倍增.
初体验设计的模块中, 包括了非常常用而至关重要的空界面设计, 内容定制模块, 功能介绍等等, 都附有详细的设计图.
</content>
</item>
<item>
<title>Bottom Navigation —— 如果要用, 请认真用</title>
<link>http://www.phonekr.com/material-bottom-navigation/</link>
<description>在 π 日, Google 对 Material Design 进行了大家期盼已久的更新, 加入了对 bottom navigation 的明确规范.</description>
<content>在 π 日, Google 对 Material Design 进行了大家期盼已久 (说句实话, 这里的 ｢期盼已久｣ 换作 ｢又惧又期待｣ 会比较合适吧) 的更新, 加入了对 bottom navigation 的明确规范.


Navigation Patterns
Component &#8211; Bottom Navigation


&nbsp;
如果你的应用：

有 3-5 个顶级导航；
需要频繁在顶级导航项之间切换；
希望顶级导航项能够吸引用户的注意力；
只针对手机；

那么， 便可以考虑使用 bottom navigation.
Material Design 的 bottom navigation 与 iOS HIG 规范的 tab bar 理所当然地有共同之处:

就算进入子级界面, bottom navigation 依然显现;
在顶级界面中, 点击 bottom navigation 当前激活的项目会回到当前列表的顶端.

但是在使用时, 不要直接照搬 iOS tab bar, 毕竟两者还有很多区别:

往上卷动时隐藏, 往下卷动时显现;
当前激活的项目文字会变大 (未激活 12sp, 激活 14sp);
触摸会产生 ripple 反馈;
Bottom navigation 可以有不同的颜色;
可以选用只有激活项带有文字标签, 未激活项仅显示图标的样式;
避免在平板以及大屏设备上使用, 建议转换为 drawer;
切换不同顶级导航项时, 内容区采用淡入淡出的动画;
切换顶级导航项的时候, 重置当前导航项的状态 (不保留状态 / 历史);
避免与顶部 tabs (对应 iOS 上的 segmented control) 同时出现.

不管你是不是打算在应用里采用 bottom navigation, 都应该看一看这些规范. 同时, 强烈建议在考虑采用 bottom navigation 之前, 先想想你的应用到底适不适合 bottom navigation.
最后是个人感想: 虽然 Google 不断强调 Material Design 是 ｢一套活的规范, 不是板上钉钉｣, 但是就这样推翻坚持多年的传统多少令人无法接受 — 当然, 实际上令人无法接受的是 Google 先违反, 然后再修改规范的这种行为.
有句话我想大家都很熟悉: ｢存在即合理.｣ 这里姑且不讨论这句话的对错, 在 UI/UX 的讨论上, 某种范式的出现必然是为了解决某种具体的问题.
故, 放下心中的成见, 有的时候, 做有些事情, bottom navigation 是更为合适的解决方案. 当然, 如果它对你而言并不是更为合适的解决方案, 那就更无需为此操心了.
同样的， bottom navigation 也不是万灵药， 它有很多不擅长或者不如 tabs/drawer 的地方， 具体可以参看： 如何看待新版 Google Photos 的 bottom tab bar？ &#8211; NovaDNG 的回答.

</content>
</item>
<item>
<title>So… Happy Birthday, Material!</title>
<link>http://www.phonekr.com/so-happy-birthday-material/</link>
<description>一篇为庆祝 Material Design 发布一周年写作的小文章, 也算是为自己加油鼓劲. </description>
<content>(标题请配合 Matías Duarte 在 Material Now 演讲开头中的致辞服用)

(这篇文章, 其实很大程度上是写给我自己看的)
是的, 在去年的今天, Google I/O 2014 上, Matías Duarte 穿着他那一身标志性的花衬衫, 为大家开启了通往 Material 世界的大门.

&nbsp;
想起自己第一次看到 Material Design 的时候, 心里其实是充满了厌恶的. 没错, 那个让我对 Material Design 产生厌恶的应用就是 Google I/O 2014. 到现在为止, 我都还觉得那是我见过最糟糕的 ｢Material Design 应用｣ 之一 (同样糟糕的还有那时刚刚改版的 Hangouts 和 Google+).
同样让我觉得不能接受的还有, Google 从官方色版中, 完全抹去了我最喜爱的 Holo Blue (#33B5E5) 的痕迹.
但随着 Material Design 发布, 它也在快速的发展和完善. 等到 Material Design 正式出现在 Android 上 (Android 5.0 正式发布) 的时候, 已经过了将近半年. 那个时候的 Material Design 已然向大家展现出无限的可能性.
在 Material Design 宣布进入正式版不久之后, 我也开始履行诺言, 着手制作 Material Design Toolkit for Nexus 4. 可以说, 这段制作过程的开始是很不开心的. 可以说, 当时我非常想要 ｢毁约｣. 几乎是骂骂咧咧地, 我一边翻看规范, 一边在 Ps 里画图 — 那时的 Material Design 尚有很多不完善之处. 但是随着制作的进行, 当我为了制作 Toolkit 翻阅第十遍 (以上) Material Design, 逐渐完善我对它的理解的时候, 我渐渐发现, 自己变得不那么讨厌 Material Design 了.
是的, 随着规范自身的完善, 以及我对规范了解的深入, 我开始逐渐领略 Material Design 的美妙. 随之发生的变化就是, 我开始放下 Android Design 了. 又过了不久, 同四年前一样, 我开始宣传起了 Material Design. (同时, 我也渐渐开始改变起以往黑白灰的穿衣风格)
和我不同, 有无数设计师从最开始就对 Material Design 充满热忱. 在 Material Design 发布伊始, 他们就对其给予盛赞, 并且, 他们中的很多人, 都对推动 Material Design 发展做出了贡献. 同时, 也有无数开发者制作出了各种 Material Design 相关的库, 供更多开发者们方便的调用&#8230; 可以说, 一切都是那么的欣欣向荣.
然而 Material Design 依然很年轻. 一方面, Google 依然在致力完善它; 另一方面, 很多开发者, 设计师和用户对 Material Design 的理解仅仅停留在 ｢Drawer 导航 + FAB + 半透明通知栏｣ 上.
而在国内, Material Design 的发展更是堪称步履维艰. 原本我以为, 相比起 Android Design 直到生命末期才出现一份基本可看的中文译本, Material Design 在发布第二天便有了中文译本, 这是一个很好的开端; 没想到, 国内对 Material Design 的热情, 似乎也就只是一阵风一般. 之前如雨后春笋般发表的 Material Design 中文译本, 更新至今的恐怕一只手能数的过来.
我想, 或许, 我们如今所处的状况, 和四年前并没什么区别. 先前在 Android Design 时代积累下来的那一点儿成果, 某种意义上算是前功尽弃. 而在 Android Design 时代就冥顽不灵的那几个最大的阻碍, 如今, 依然, 是最大的阻碍. 他们自身已经是阻碍, 而他们的存在更是产生了恶劣的影响, 加剧了推广 Material Design 的困难.
而我, 当然不能因此退缩. 为 Material Design 庆祝生日, 某种程度上, 也是在庆祝自己的一段新旅程的开始, 为自己加油打气.

所以, 在今年的 I/O 大会上, 当 Matías Duarte 大声说出, ｢Happy birthday, material!｣ 的时候, 骄傲, 激动与心酸一同涌上心头, 让我几乎快要哭出声来.
希望, 在接下来的日子里, Google 能继续完善 Material Design — 不单是设计规范的方面, 同样还有 Android 开发的方面.
在这个重要的日子, 我要大张旗鼓地为 Material Design 庆祝生日. Happy birthday, material!
</content>
</item>
<item>
<title>Material Design in Action — 哔哩哔哩动画 Android 客户端</title>
<link>http://www.phonekr.com/bilibili-for-android-redesign/</link>
<description>( ゜- ゜)つロ 乾杯~</description>
<content>前言
哔哩哔哩动画是中国大陆的一家弹幕视频网站，在中国二次元用户中颇受欢迎。
哔哩哔哩动画之前推出过采用 Android Design 的 Android 客户端，虽然有使用了部分过时控件（例如 Scrollable Tabs）之类的问题，但整体素质依旧较高，受到 Android 用户的广泛好评。而在 6 月初的 3.9 及 4.0 更新后，哔哩哔哩抛弃了过去的 Android Design 转而使用了 iOS 风格的设计，如图所示：
左为 v3.3.0，右为v4.0.0
此次更新在用户中的争议颇大，部分用户反对此次改版，认为新版哔哩哔哩动画客户端失去了原有的 Android 风格，令人失望。
个人认为哔哩哔哩的情况比较特殊：原来进行过 Redesign 的应用有一开始就是 iOS 风格的，也有采用 Android Design 风格，但并不完美的。对哔哩哔哩这种原来是 Android Design 风格，但后期转换为 iOS 风格的 App 进行 Redesign 是一件很有挑战性的事情。于是在对新版进行了一段时间的体验之后，我开始利用新版的特性和部分交互逻辑对哔哩哔哩动画进行基于 Material Design 的 Redesign 尝试。
在微博上发布了几张预告效果图之后，我意外地收到了认证资料为“bilibili副总裁”的微博用户 @光头哥光头哥 的私信。因为在私信里这位微博用户对一些问题进行了询问，加上设计师在知乎上对于这次设计风格改变的解释，我认为哔哩哔哩本身是想采用 Material Design 的，然而对于 Material Design 本身并不是十分了解，因此才会采用 iOS 的设计风格。
我个人对哔哩哔哩的态度感到很欣慰，希望能在以后拿出更好的设计。
我也希望我的这篇文章能够起到一些帮助。
对底部 Tab Bar 说 No
在文章开始之前，我想先回答之前 @光头哥光头哥 在私信中提出的一个问题：为什么安卓用户对底部 toolsbar 这么介意？
首先要纠正一个用词错误：用于切换不同页面的 Bar 叫 Tab Bar，而不是 Tools Bar.这点在 Apple 官方的 iOS 7 UI Transition Guide 中也有提到。
Apple 官方对于 iOS Tab Bar 的解释
那么纠正完用词错误，接下来就要回答这个问题了：为何 Android 上最好不要出现底部 Tab Bar 呢？
首先，Android 提供了更多样的交互方式，例如 Drawer，Floating Action Button 等。活用这些交互方式可以灵活地将用户引导至其他视图上。
其次，即使要使用 Tab Bar ，Google 官方也已经提供了解决方案——各式各样的顶部 Tab Bars.而且，顶部 Tab Bar 均可以滑动切换，这样就无需担心单手操作性了。
Tabs!
另外对于虚拟键用户来说，使用底部 Tab Bar 也会带来“双底栏”的问题，影响美观性。
（并不是针对HTC）
所以，在 Android 上使用底部 Tab Bar 是一种毫无必要的行为，不仅不会对单手操作带来任何便利，反而会造成更多的麻烦。
Google 很早就谈到了这一点：Pure Android 页面中列出了很多“不该做”的事情，其中之一就是“不要使用底部 Tab Bars”。

之前 @光头哥光头哥 和我提到过，因为哔哩哔哩的内容架构极其丰富，于是想把内容的分类筛选在页眉留给用户。即使是这样，采用双 Tab Bars 也没有多大必要，可以参考第一点，使用其他方式实现原来底部 Tab Bar 的功能，我会在下面提到我是如何去实现这一点的。
1.首页
对首页的改进是整个 Redesign 中最重要的一环之一，毕竟这次设计争议最大的就是采用底部 Tab Bar 的设计。
我对首页的改进有：
去掉底部 Tab Bar，保留顶部 Tab Bar
加入标准 App Bar，颜色取自 v3.3.0 的 Action Bar
个人信息放入 Drawer
“关注”、“发现”和“游戏”整合入“发现” Floating Action Button
下载、消息（目前似乎客户端未加入消息系统）等按钮单独作为 Action 放置于 App Bar 上
首页项目和 Banner 采用 Cards 设计
如上文所述，我使用了将选项分散的思路，将原先底部 Tab Bar 的选项分散到其他模块。下文我会一一讲解。
当用户向上滚动首页列表的时候，App Bar 将会自动隐藏，只留下 Tab Bar 。一个小细节：我试着使用了类似 Google Play Store 的滚动 Cards 布局展示“番剧更新”项，在最右侧露出 Card 的一端来提醒用户这一排可以进行滚动。
同时我保留了 Tab Bar 的下拉菜单的设计，点击最右边的箭头就可以调出菜单，能直接点击进入 Tab 项，也能对 Tab 项进行重排。2.个人信息
之前的 v3.3.0 及更早的版本将个人信息放在最左边的 Tab ，而最新的 v4.0.0 将个人信息放在“我的” Tab。个人认为这个区域完全可以用 Drawer 替代。
这里的修改不多，主要是以下几点：
个人信息区域加入头图，硬币改为和网页版一致的“B”图标
去掉“离线任务选项”，相应的项目已移动至 App Bar
“设置”“帮助与反馈”放置在单独区域
之前的各个版本，各个平台的客户端均未加入头图项，所以我在做这个设计的时候也思考了一下要不要加入头图，后面对比了几个版本的解决方案，还是决定加入头图。
3.“发现” FAB
v4.0.0 加入了“关注”、“发现”和“游戏”三个 Tab 项目。按道理来说，一个放在 App Bar 上的搜索即可解决问题，但是考虑到“游戏”等项目的特殊属性需要足够的曝光度等，最终决定将这三项合并为一个 “发现” Floating Action Button.如图所示，“发现” FAB 处于屏幕右下方，若用户点击，FAB 中的其他项目会自动展开：
为了让“游戏”“排行”等项在日常使用时能拥有更高的曝光率，我将常用的“搜索”等项放入了此 FAB 。
4.播放页面
第一步

首先当然是采用了“正常”的 App Bar——原来播放界面的 App Bar 高度并不标准。其次在这个界面我使用了不同的配色方案——以标志性的粉色作为底色，字体和图标以白色呈现。同时将“点击播放”按钮去掉，变成点击封面图即可播放，封面图也进行了适当地放大。最后将原先在视频信息下的 Tab 转移到上面，所以一共做的改动有：
更换为正常高高度的 App Bar
将 Tab Bar 提上，与 App Bar 整合
使用与首页不同的配色方案
去掉“点击播放”按钮，和封面图整合
下载、收藏和分享等项集合至 App Bar
添加“评论” FAB
第二步
做完第一步之后我发现，似乎把那些选项都放在 App Bar 上并不是很好的选择。于是我试图对着 FAB 下手，做成了类似首页“发现”的扩展 FAB，如图所示：于是这一步的改进就是：
下载、收藏和分享等项集合至一个 FAB，点击展开
第三步
然而在思考了一会之后，又觉得放一个 FAB 在这似乎有些多余。在 v3.3.0 中，这些选项放置在 Split Action Bar 上，然而 Material Design 中已经去掉了 SAB 。
于是我试图使用 Quick Return 模式来放置这些选项，结果个人还是很满意的：

最后对原来居中的视频标题重新调节成偏上，最终成品如下：最后一步做的调整有：
改用 Quick Return 模式在底端放置选项
将视频标题由居中修改为偏上
5.引导页面
每个 App 在进行设计和交互大改的时候都应该对用户进行引导和提示。微信在 5.2 上启用 Android Design 时就吃了这个亏，直接升级的用户并不知道这个版本会对设计大改，结果改完就崩溃了——这个新界面到底该怎么用？？？
所以如果哔哩哔哩需要启用 Material Design 设计，一定要做一个引导流程让用户知悉新版的变化。
首先是首次启动的引导页，通过强调“新版”来提示用户。之后是一个提示界面，用圈点的形式提示用户原来的功能都去了哪里。同时对于 Drawer 给予适当提示，让用户知道调出 Drawer 除了点击汉堡包图标还能向右滑动调出。以上只是随便制作的，非常粗糙的引导页。相信哔哩哔哩的设计师们能想出更好的主意。
后记
制作这次的 Redesign 是一次充满挑战的历程，我希望这次的 Redesign 能给予各位一些启发。
哔哩哔哩官方已经放话了，正在研究 Material Design。那么就让我们期待一个更好的哔哩哔哩客户端吧~
( ゜- ゜)つロ 乾杯~
彩蛋：好想看Nova做的啊啊啊啊！
</content>
</item>
<item>
<title>你说你看到了沉浸模式，你可能只是见到鬼了</title>
<link>http://www.phonekr.com/you_didnt_see_immersive_mode/</link>
<description>我都不敢相信，现在 2015 年快过一半了，还有不少所谓 Android 爱好者分不清“沉浸模式”和“透明栏”之间的区别。那好，我们来好好捋一捋“沉浸模式”究竟是个什么玩意。</description>
<content>
我都不敢相信，现在 2015 年快过一半了，还有不少所谓 Android 爱好者分不清“沉浸模式”和“透明栏”之间的区别。
那好，我们来好好捋一捋“沉浸模式”究竟是个什么玩意。
什么是沉浸模式？
从 Android 4.4 开始，Android 为 &#8220;setSystemUiVisibility()&#8221; 提供了一个新的标记 &#8220;SYSTEM_UI_FLAG_IMMERSIVE&#8221;，就是我们所谈的 &#8220;Immersive Mode&#8221;，也就是沉浸模式，全称为 &#8220;Immersive Full-Screen Mode&#8221; 。

Google 提供这个新模式的初衷，是为了让应用能够实现真正完整的全屏模式体验。
之前 Android 靠两个标记实现全屏模式，一个是 &#8220;SYSTEM_UI_FLAG_FULLSCREEN&#8221;，另一个是 &#8220;SYSTEM_UI_FLAG_HIDE_NAVIGATION&#8221;（仅适用于使用导航栏的设备，即虚拟按键） 。
这两个标记都存在一些问题，例如使用第一个标记的时候，除非 App 提供暂时退出全屏模式的功能（例如部分电子书软件中点击一次屏幕中央位置），用户是一直都没法看见状态栏的。这样，如果用户想去看看通知中心有什么通知，那就必须点击一次屏幕，显示状态栏，然后才能调出通知中心。
而第二个标记的问题在于，Google 认为导航栏对于用户来说是十分重要的，所以只会短暂隐藏导航栏。一旦用户做其他操作，例如点击一次屏幕，导航栏就会马上被重新调出。这样的设定对于看图软件，视频软件等等没什么大问题，但是对于游戏之类用户需要经常点击屏幕的 App，那就几乎是悲剧了——这也是为什么你在 Android 4.4 之前找不到什么全屏模式会自动隐藏导航栏的应用。
那么 Google 面对这样的问题自然也不会坐视不管。还记得 iOS 是怎么处理用户在全屏应用下调出通知中心/控制中心操作的么？对，用户做一个向内滑动的手势，一个小箭头就会出现，在不影响当前应用全屏的情况下引导用户操作。

Google 借鉴了 iOS 的逻辑，4.4 之后加入的这个 Immersive Full-Screen Mode 允许用户在应用全屏的情况下，通过在原有的状态栏/导航栏区域内做向内滑动的手势来实现短暂调出状态栏和导航栏的操作，且不会影响应用的正常全屏，短暂调出的状态栏和导航栏会呈半透明状态，并且在一段时间内或者用户与应用内元素进行互动的情况下自动隐藏。

这个新加入的特性理所当然地受到了广泛好评：从此 Android 终于可以在全屏应用下不影响用户的正常操作了，难怪 Android Developers 页面中会这么描述 Immersive Full-Screen Mode：
&#8230;lets your app go truly &#8220;full screen.&#8221;
当然，讲了这么多有关“沉浸模式”的介绍，目的并不是要告诉你“沉浸模式”有多么多么好，而是为了告诉你，目前你们所说的“支持沉浸模式”“沉浸状态栏”等等，和真正的“沉浸模式”，即 Immersive Full-Screen Mode 是一点关系都没有的。
接下来我要告诉你们，你们口中的“沉浸”究竟是个什么东西。
“沉浸状态栏”究竟是什么？
Google 在 Android 4.4 的 API 描述页面里提到了“Translucent system UI styling”，即半透明化的系统UI风格。
这个“半透明化”包括了状态栏和通知栏，当开发者让应用支持这个新特性的时候，状态栏和导航栏可以单独/同时变为渐变的半透明样式。

说到这里大家应该都明白了——没错，这就是你们口中经常提到的“沉浸模式”“沉浸状态栏”。记住了，他们的学名是&#8221;Translucent Bars&#8221;，透明栏，包括了状态栏（Translucent status bar）和导航栏（Translucent navigation bar）。
在 Android 5.0 之后引入了 Material Design，状态栏和导航栏也玩出了更多花样。现在除了原有的“半透明”模式以外，还有“全透明”以及“变色”模式，一种会完全隐藏背景，另一种可以取色作为背景颜色。
不同的状态栏风格
不同的导航栏风格，可以注意到加入了全透明（Transparent）背景
有关更多 Material Design 中关于系统栏的描述可以参考这里
总结
如果你认真看到了这里，那么你应该明白了一个重要的事情：此“沉浸”非彼“沉浸”。
真正的沉浸模式，指的是一种全屏模式，而你一般在开发者/爱好者/用户那里听到的“沉浸模式”绝大部分情况下指的是“半透明栏”或者是 Android 5.0 之后加入的“全透明/变色栏”。至于所谓“沉浸式状态栏/导航栏”之类的描述，则完全是无稽之谈。
关于国人对于“半透明栏”和“沉浸模式”之间的误解是怎么产生的，我并不清楚，或许是当时某个科技网站的小编理解错误，翻译新闻时将两个东西扯在了一起；也或许是某个开发者在介绍透明栏时误以为“沉浸模式”是恰当的翻译，但总之，错并不是问题，知错不改才是问题。
如果你能理解这一点，请再也不要弄混这两个完全不一样的东西了。
</content>
</item>
<item>
<title>发几张 Chromebook Pixel LS 2015 的图片</title>
<link>http://www.phonekr.com/chromebook-pixel-ls-2015-gallery/</link>
<description>其实 Chromebook Pixel 第一代刚刚推出的时候我就已经非常想买了, 但那时毕竟还没有经济基础, 只能作罢. 如今第二代 Chromebook Pixel 推出, 我便迫不及待地下手了... </description>
<content>





 
 
截图:

  

(本文在 Chromebook 上撰写)

</content>
</item>
<item>
<title>揭开白色 Nexus 4 的面纱</title>
<link>http://www.phonekr.com/unveil-white-nexus-4/</link>
<description>NovaDNG 订到了一台白色 Nexus 4, 做个开箱以饕读者.</description>
<content>一直以来, 我心目中最美的 Nexus 手机一直是 Nexus 4. 直到今天, 我还在使用它作为设计稿预览机, 并为它制作 Photoshop UI Kit. 不幸 (或者说是有幸?) 的事情是我的第一台 Nexus 4 在陪伴我两年之后电池开始鼓包, 音量下也已经完全失灵. 现在二手 Nexus 4 的价格已经算是白菜价了, 我便毫不犹豫地订购了一台白色 Nexus 4.
接下来就是开箱了.

&nbsp;
Nexus 4 的外包装. 和 Nexus 7 的盒子风格一致, 一看就是姐弟 (你懂的).

左右两侧一样的 Nexus 4. 下面是 LG 的 Logo.

感觉和 Nexus 7 的盒子后面一模一样的宣传文字, 只是把 7 替换成 4 而已…

盒子底部贴着各种信息的条形码. 然后由于是 LG 代工所以 Made in Korea (咱 Nexus 7 就是霸气的 Made in Taiwan…)

分离内外盒. 内盒很低调, 在相同的位置有一个 Nexus 的 Logo.

中规中矩的摆放方式… (你还指望看到什么?!) 感觉好大, 比 Vision 大了两圈… 这就是 4.7″ 的威力么? O0O

整个盒子手感非常好, 不像之前 Windows 8 的盒子那样松松垮垮的.

盒子的内容物: 手机本体, 快速指南, 保修卡, 充电器, 数据线和 SIM 卡槽针. 什么, 你说没有耳机? 那当然啦, 这么便宜的价格你指望有耳机? 自己买去~

来一张 Bling Bling (虽然图中完全没有 Bling&#8230;) 的后盖.

对比下大小. 手边就这些设备. 从左至右… 不用我多说吧? ^v^

除去保护膜, 新手机看起来就是漂亮… 和另外一些采用了 OGS 技术的手机不一样, Nexus 4 在这样的角度下还是很容易就能看出屏幕和机身的边界的.

去掉保护膜之后的背面. 这个像素颗粒闪烁的效果很难用相机(或者说是我的相机太破了)表现出来.

可爱的 LED 指示灯. 继承自 Galaxy Nexus.


开机. 屏幕非常精细. 嘛, 别去点大图, 这个精细度我觉得已经很够了… 之前撕掉 Vision 的保护膜的时候也觉得 Vision 的屏幕很精细, 结果和 Nexus 4 一比还是弱了…
&nbsp;
稍微谈谈上手的感受吧. Nexus 4 的边缘很圆润, 虽然我喜欢直角, 但是圆润的边缘明显的好处就是握在手上的时候感觉非常好. 4.7″ 的屏幕对我这种从 3.7″ 一下飞跃上来的人来讲到底还是太大了, 手感不对(手感很”好”但是不”对”), 很容易按错小的按键. 好在 Android 4.2 的输入法对于输入的精确度并不是很高, 触宝也是. 想要单手持握且不改变握姿就触摸到屏幕左上角确实很有难度.
震动反馈感觉很好. 我以前一直觉得 HTC 那种非常刚劲的反馈是我最爱的(相反的是三星那软绵绵犹豫不决的反馈), Nexus 4 的震动反馈虽然没有那么刚劲但也算是毫不迟疑, 没有绵软的感觉, 可以说挺舒服的. 后背是玻璃所以不会像 Vision 那样大冷天的冻手&#8230;

最后再来 BlingBling 一回
唉? 你还想看更多的内容? 唉呀唉呀这只不过是篇赶时间写的开箱文, 不要想太多啦~ 其他的内容, 我会在晚些的正式评测里写的, 包你满意~
</content>
</item>
<item>
<title>Material Design in Action — 猿题库</title>
<link>http://www.phonekr.com/yuan-ti-ku-redesign/</link>
<description>Talk is cheap,show me the...</description>
<content>猿题库是一款免费的手机做题软件，在中学学生中拥有一定的人气。
猿题库很早之前就发布了 Android 版本的客户端，但猿题库的联合创始人，郭常圳先生，并不认同 Android Design （或者现在的 Material Design），而且认为应用程序的设计规范，应当由开发商来决定。
然而当我试用猿题库的时候发现，这个应用对其进行 Material Design 的适配，其实并不困难。因此就有了对其进行重新设计的念头。
由于郭先生对 Android / Material Design 以及对跨平台应用遵守规范的误解，我会在展示作品之前，先简单说一说我心目中的跨平台应用应该是如何设计的。
跨平台应用应该怎么做？
现今，绝大部分的移动互联网应用，都会选择开发双平台（iOS 和 Android）或多平台的跨平台客户端。
iOS 的情况比较简单，因为绝大多数公司都会遵循 iOS 的设计规范，很少出现把别的平台的设计风格“搬”到 iOS 上的情况。然而 Android 就要复杂得多了。
Android 在 4.0 之前是没有一个统一标准的规范的，默认控件也比较丑陋，于是开发商们就“怎么方便怎么来”，基本上都把 iOS 风格的控件和交互直接照搬到 Android 上。
情况在 4.0 之后有了改观，Google 为 Android 打造了更加美观的 Holo Theme ，并且提出了 Android Design 规范，从此 Android 应用的设计风格开始进入了新的时代。
然而现在的 Android 应用并没有呈现出“大一统”的状态，而是一个“分水岭”的状态。一边是大部分国外的公司和开发者的应用，经过几个 Android 版本的迭代之后，绝大部分已经遵循了 Android Design，同时有些应用已经开始遵循 Material Design 以期在最新的 Android 5.0 Lollipop 中拥有更好的表现；另一边是大部分国内公司和开发者的应用，纵使 Android Design 已经推出了多年，他们仍然视而不见，继续使用 iOS 的那一套设计风格。
这其中也有一些例外，微信在 5.2 版本中做了一个不太好的尝试，开始试图让微信遵循 Android Design 规范。但这次尝试十分短暂，在受到了用户的批评后，他们马上在 5.4 版本里换回了 iOS 风格。
因此，有人提出，用户不需要跨平台应用针对不同平台做不同的设计。这个观点是对的吗？个人认为，不对。
虽然使用 iOS 风格的设计在 Android 上“又不是不能用”，但如果你想为自己的应用从观感，使用体验等各个层次来一个全面的提升，还是应该试着去遵守平台的规范。
更不用说 Material Design 在 Android 5.0 上提供了非同寻常的使用体验，极具个性的动画效果，能为应用带来优秀的视觉享受。

微博官方客户端（iOS 风格）和 Blacklight 微博客户端（Material Design 风格）在 Android 5.0 上运行效果的对比
所以，用户需要，有必要，有权利在不同的平台上用上遵循规范设计，体验更好的应用。
我看跨平台应用——“求同 存异”
前面提到了，微信曾经在 5.2 版本里短暂地尝试了一下 Android Design ，结果在 5.4 中，又被用户“骂回去”了。
微信这么做对吗？当然不对。新事物总是需要学习的，微信应该做的是在下一个版本当中对 5.3 的风格继续改进，而不是当缩头乌龟。
微信 5.2 的设计为什么会被用户骂？很简单，UI 大改，用户自然需要学习，而之前的 iOS 版本设计风格的 UI 和新的 Android Design UI 之间，几乎毫无瓜葛，用户一时摸不着头脑，于是就开始骂娘了。
这是 Android Design 的错吗？当然不是！事实上，微信在 iOS 和 Android 上的设计，都只能算是非常一般而已。在 5.2 版本上的所谓 Android Design 风格还十分简陋，都有很大的提升空间。
最主要的是，微信在不同平台上的设计，割裂感太大了。

What the f&#8230;?
如上图所示，iOS 版本和 Android 版本（5.3）的微信，简直可以说是两个应用。如果用户从 iOS 版本切换到 Android 上，肯定会产生不适应感，而这是优秀的跨平台应用不应该做的。
在我看来，优秀的跨平台应用必然共有一个特征——求同存异。
以下是一些优秀的跨平台应用（图片来自 NovaDNG）：




&nbsp;
从上面的应用展示中，大家可以看出这些应用让用户能明确体验到应用在不同平台间的差别，又不至于产生不适应感，学习成本也较小。同时，在界面设计上都遵循了相应的平台规范。
这，就是“求同存异”的内涵。用户在使用这些应用的时候，没有那种硬生生的割裂感，只需要很短的时间就能适应在新平台上的操作。
所以，所谓“分裂”其实只是因为应用自己做得不够好，而不是平台规范的错。同样，如果应用做得足够好，用户也不需要太久时间就能适应新的平台设计。
Talk is cheap,show me the&#8230;
OK.
其实在我试用猿题库的时候就发现了一个事实——这款应用看上去一副 iOS 样，其实交互上已经很接近 Android Design 了，最典型的就是那个 Drawer 。
所以我觉得猿题库是款很可惜的 App ，明明只要付出一点点努力，就可以在 Android 平台上变得更好&#8230;
于是我自己动手制作了一套猿题库重新设计的效果图，仅供参考。这只是一种尝试，我相信，肯定还会有其他比我更好的实现方法，关键是肯不肯做。
1.登录画面

状态栏和导航栏都进行了 Translucent 化，为的是更有冲击力的第一观感（好像听上去和 Nova 差不多&#8230;）。稍微更改了一下 Logo 和按钮的布局，原来的按钮样式被换成了 Boarderless Button.
这里偷个懒，直接放上新用户的引导界面，省去登录界面了。
2.引导界面


&#8230;到了这里，大家应该明白我前面“可惜”的意味了吧？我只是做了很小的改动（换成标准的 App Bar 和控件，列表改成标准的两栏布局，去掉了那个箭头，仅此而已），整个界面就已经很 &#8220;Materialized&#8221; 了&#8230;所以我这里改动不多。接下来就是主界面了。
3.主界面

原版上方的概览画面面简直就是硬伤，排版在我看来非常混乱。所以在这次重设计中，我试着用卡片的方式承载这部分内容，同时把内容尽量规整地向中间靠拢。至于底部的 List ，我更新了样式，原来的&#8221;+&#8221;图标改成了现在的&#8221;Expand More&#8221;图标，写题的图标也做了小许改进。

Drawer 在原版就已经出现了，于是我只对 Drawer 样式做了修改，使其更贴近 Material Design 的 Drawer 样式。

原来右上方的“更多”按钮被我更换成了“More”，新页面展示也变成了 Drop Down Menu.
4.写题界面

这个界面可以说改动也很大。首先是 App Bar 上的 Actions 都去了他们该去的位置（计时器的字体也做了修改，并且加粗处理）。至于底部的 Drawer （暂时找不出更好的方式描述这个模块），我把原来的拖动区域整合到了 Drawer 里，以使整个界面看上去更加简洁。选题界面的标题，内容和按钮位置也进行了微调。

练习报告界面。还是之前在主界面那里的问题。排版混乱。于是我按照之前主界面的思路，重新排了版，将原来底部的按钮换成了 Flat buttons.
写在最后
相信大家都发现了，我重制的界面其实不多，一部分原因是我懒（，另一部分原因是，这个应用需要做的绝大部分都是控件的修改和细节上的优化，因此不需要大幅度地推翻重建，只需要完成一两个模块做为演示，我相信就能带来一定的启发。
除此之外，猿题库还有一些问题需要改进，例如去掉 Splash Screen 等等。但不可否认的是，这款应用对中学生来说，帮助是很大的。希望开发团队能够认真考虑一下，拿出一个更好的 Android 版本。
写在最后的最后
这是我第一次对 Android 应用做较为系统的界面重制，在这里要再再再再次感谢 NovaDNG ，没有他的影响，我现在也不会往 Designer 的方向发展。
祝大家在 2015 年一切顺利~
</content>
</item>
<item>
<title>被 ｢阉割｣ 的分享与应用间的墙</title>
<link>http://www.phonekr.com/android-share-in-mainland-china/</link>
<description>分享在某些国内 Android 应用上其实是一个很有意思的操作. </description>
<content>经常使用国内应用的读者应该不会对这个题目感到陌生 —— 很多国内大公司的应用都自己 ｢实现｣ 了一套 ｢独特｣ 的分享方式, 里面只有自己家的应用, 想分享给其他应用要么得费点儿心思找入口,  要么根本就不允许.
在我看来引起这种行为有四个原因: 流量内引构建闭环, 第三方玩家破坏规则, 国内用户习惯, 继承自 iOS 上的恶习.
首先是构建闭环. 这点很好理解, 假设我是腾讯新闻的 PM, 我当然希望用户在我的客户端看完新闻之后, 分享给朋友圈, 腾讯微博, QQ&#8230; 这样, 用户的分享行为就会带来其他腾讯应用的流量. 同理网易新闻等一些大厂旗下的应用也很容易朝着这条路走去, build walls not bridges. 题主例子中网易新闻客户端就把自家的易信放在了分享的最前面, 很明显是有引导流量的用意.
其次是第三方玩家破坏规则. 因为开放的分享接口, 所以你可以经常看到很多应用的分享按钮会带出长长的一串应用列表, 很多用户不一定会用到的应用也会出现, 这对用户会产生一定的心理压力. 更糟糕的是, 由于列表是默认按照拼音顺序排列的, 所以某些没节操没下限的国内应用在命名的时候玩往名字前面加空格或者奇怪的符号, 在后面加 &#8220;(推荐设为默认)&#8221; 这样的小手段来&#8221;引导&#8221;用户, 这不是什么好现象.
第三点和第二点比较难以分开, 国内的社交网络基本由几大巨头垄断, 而国内用户一般使用的社交网络也就被限制在比较大的那几个上, 像微博微信人人, 只要把这些覆盖到, 基本上就可以满足绝大多数用户的分享需求了, 同时也省得用户每次面对一大串应用名字不知所措, 何乐而不为?
最后是继承自 iOS 的恶习. 我们知道 iOS 一直没有一个完善的应用间通讯机制, 跨应用分享内容需要靠开发者自己搭建通道来实现 (说实话当我第一次看到 Reeder 的分享列表的时候还是震惊了), 所以 iOS 上往往只有几个分享选项. 而有些厂家则直接在 Android 上全盘照搬了这一点, 让 Android 应用也显示和 iOS 版本一样的分享选项, 理由五花八门, 常见的有&#8221;提供一致的跨平台体验&#8221;云云, 这里就不赘述了.
就我看来, 我最推荐的分享方式是像 Pocket 和 Timely 一样的:

希望国内这些公司还是早日抛弃成见, 不要再往 Android 里添加高墙了.
&nbsp;
</content>
</item>
<item>
<title>｢数据? 那是什么? 能吃么? 好吃么?｣</title>
<link>http://www.phonekr.com/do-not-get-tricked-by-data/</link>
<description>这话今天就撂这儿: 无论是 iOS 版还是 Android 版, 微信的 UI 与 UE 都是三流以下水准. </description>
<content>在近一年前, 腾讯终于扭扭捏捏地把微信改成了靠近 Android Design 的样子. 虽然外表有那么点儿 Android Design 的味道, 但设计却十分糟烂, 被无数用户吐槽. 结果到了八月, 微信又把 UI 改回了 iOS 风格.
我 100% 不认为腾讯因为 5.2 被用户唾骂而放弃 Android Design 是什么明智的决定, 与其因为碰了一次钉子就认为 &#8220;Android Design 不符合用户的使用习惯&#8221;, 不如好好研究 Android Design, 在遵循规范的前提下把微信做得更好.
很多人拿后台数据说话, 我就解释一下数据好了. 数据不是真理, 数据也可以被轻易的操作. 就拿这次微信来做例子:
对比对象一方是使用了很久 (从 Android 2.X 时代起微信就一直是 iOS 风格 UI), 成熟 (就算是在 iOS 上微信的 UI 也很难说是优秀, 所以这里用成熟) 且用户习惯 (如前述, 微信老用户都习惯了这套) 的 iOS-Like UI;
另一方是新推送的 (新年前才推送更新), 设计糟烂 (和 Android Design 貌合神离, 只是套了个皮, 完全没能体现对 Android Design 理解且存在大量违背 Android Design 设计之处) 且没有任何引导(一个全新设计拿到用户手中居然没有给任何的事先说明和引导教程) 的 Android Deisgn;
对比的结果可以说是显而易见的.
若 Android Design 一方同样是使用了很久, 设计经过深思熟虑且尽可能完全符合 Android Design (在这里姑且不谈超越) 且做出了合适的引导与教程, 你觉得数据会是什么样子的呢?
另外, 关于 &#8220;用户不知道也不会在意 Android Design&#8221; 这样的论点: 用户完全没必要知道什么规范, 用户当然也喜欢用脚投票, 而这并不妨碍开发方在这个规范的框架中做出优秀趁手的产品. 在微信这个事件上, &#8220;用户用脚投票选择 iOS UI&#8221; 这个现象只能说明 &#8220;微信的 Android Design 做得很烂&#8220;, 而不能说明 &#8220;Android Design 不适合微信&#8221;.
产品经理也当然没必要满嘴 Android Design 或者 Action Overflow, 但是如果他们不知道如何用好 Android Design 或者 Action Overflow, 就是他们的失职.
</content>
</item>
<item>
<title>Overview, Android 中新的 Recents 界面</title>
<link>http://www.phonekr.com/overview-is-the-new-recents/</link>
<description>在 Android 5.0 中, 原先的 ｢最近任务｣(Recents) 界面被 ｢概览｣(Overview) 界面替换了. 让我们来看看这个新的界面里都有哪些玄机. </description>
<content>在 Android 5.0 中, 原先的 ｢最近任务｣(Recents) 界面被 ｢概览｣(Overview) 界面替换了.

在实际上手 5.0 之前, 我也一度对这个界面的实际效果产生怀疑, 但是实际上手之后发现自己多虑了.
首先, 新的多任务界面在 Nexus 4 上可以最多显示清楚五个应用 (第五个应用的标题会被略遮住一些, 第六个往后会露出一条缝, 只能看出颜色), 在 4.X 上最多能显示四个. 另外, 卡片的 App Bar 可以跟随应用改变颜色 (比如 Gmail 卡就是红色的 Bar, Keep 就是黄色, Messenger 就是蓝色, 等等), 也增加了应用的识别度. 而 4.X Recents 界面里的缩略图识别度其实很低, 的大部分时候还是要靠图标和标题 —— 而实际上在 5.0 中, 标题和图标的大小并没有缩小.
而在 4.X 上, 还有一个很严重的问题就是多任务界面与其他屏幕的转换非常诡异. 如果你仔细观察过 Android 4.X 从某个应用进入 Recents 的动画, 你会发现这个动画是不能接应的 (在屏幕缩小的过程中, 内容会扭曲, 然后变成 Recents 里面的小块, 有兴趣的同学可以自己把动画持续时间调成 X10 看看). 而在 5.0 中, 进出 Overview 界面的动画非常平顺 (不会发生扭曲, 而是直接缩放 + 展开), 同时也符合系统自己的隐喻 (5.0 中, 打开应用的动画不再是放大, 而是一张卡片从屏幕底部飞入, 从主屏进入 Overview 界面也是一堆卡片从屏幕底部飞入), 也就是说, 在 4.X 里, Recents 是一个专门的层级, 位于桌面与应用之间, 而在 5.0 中, 桌面与 Overview 合为一体 (Google 甚至把 Google Search Box 也放进了 Overview 界面), 是系统层级方面的调整. 如果这时再配上 4.X 的 Recents, 就打乱了这层级关系.
而且, 如果你在 5.0 的 Overview 界面稍作停留, 每张卡片的右上角都会出现一个小 X, 这样便可以让那些 (到现在都) 还不知道划去卡片可以关闭应用的用户关闭应用. 这个操作其实和 Chrome 是保持一致的. 同时在 5.0 中, Document UI 允许一个应用同时显示多个界面在 Overview 中 (如 Chrome 的多个标签页), 在卡片下他们会靠得更近以区分于其他应用, 而如果是 4.X 的 Recents 的话则不能体现出这一点.
还有一个很有意思的地方就是, 如果在 4.X 上, 当有超过 3 个应用被打开时, 多任务界面中想点击最上面的那个应用几乎是不可能的, 而在 5.0 中, 卡片的存在使得整个多任务列表可以被拉到屏幕 2/3 高度, 最上面的一张卡片可以触及的范围甚至达到了屏幕的下半部分, 可以直接单手触到, 非常便利. 而楼上其他同学也提到了, 要滑动同样数量应用的距离, 5.0 上是比 4.X 上要短的.
而如果你仔细观察开头给出的图片, 你会发现一些细节. 首先, 新的 Chrome 和 Chrome Beta 都支持通过读取网页的某个 HTML 标签来改变 Overview 界面里 App Bar 的颜色. 这对于增加网页/Web App 的辨识度而言产生了极大的帮助.
其次, 如果你细心的话, 会注意到知乎 Alpha 和 Google Wallet 在 Overview 里显示的图标和他们的应用图标不一样. 这就是 Overview 的一个新特性, 我们可以自定义显示在 Overview 里的图标. 我去掉了此处知乎图标的底座, 这样能够让知乎在 Overview 里看起来更和谐.
第三是没有在上图中体现的一个新特性. 只要我们愿意, 我们可以让知乎在 Overview 中显示不同的 Title —— 比如说, 当你在阅读答案时, 进入 Overview 界面, 知乎显示的标题就是 ｢回答｣, 如果你在某个人的个人主页, 那么在 Overview 里知乎的标题就是这个人的名字. 也就是说, 当 3.0 版 (或者以后其他版本) 里知乎支持多帐号之后, 你就可以在 Overview 里看到你的两个账号分别以两张卡片呈现, 知乎图标变成你的头像, 知乎后面是你的帐号名字~
这些新特性如果好好使用的话, 对于提升一个应用的易用性也好辨识度也好, 都是有极大意义的.
</content>
</item>
<item>
<title>｢质感｣ 的 ｢厚度｣</title>
<link>http://www.phonekr.com/material-thickness/</link>
<description>Material Design 中的 ｢厚度｣ 究竟是什么样的存在?</description>
<content>如果你有看过 Material Design, 那也许会对这个描述有印象:
Material has varying x &amp; y dimensions (measured in dps) and a uniform thickness (1dp). Materialnever has a thickness of 0.
那么, 这个 idp thickness 到底是什么意思呢?
这里的 1dp thick 并不是一个实际的数字, 它有两个含义: Material 有固定的厚度, Material 的厚度是一个网格中允许存在的最小值.
什么意思呢?
在 Holo (或者说 Android Design) 时代, Google 就已经强调了阴影和高光的使用, 但是, Holo 中的阴影和高光并不完全是高度变化的产物, 相当一部分的阴影和高光是由控件本身的厚度产生的 (比如 Action Bar 下方的阴影).

而 Material Design 里, 厚度这个属性被去除了. 也就是说, 同样是 Action Bar 和 App Bar 产生的投影, 在 Android Design 中, 投影是因为 Action Bar 有厚度 (厚度是多少我们不知道), 而在 Material Design 中, App Bar 的投影却是由于 App Bar 的高度高于下面的内容而产生的. 同样的, 其他的 Material 元素也和 App Bar 一样会产生投影, 而这些投影并不是由厚度产生的, 而是由高度差产生的. Google 规定了 Material 固有的厚度, 也就是问题描述中的 1dp thick.
Material 有固定的厚度, 然后呢? 实际上, Material 的厚度应该是一个虚数. 你可以把它想象成一张无限薄却不透明的材料. 但是 Google 显然不可能用这种暧昧的描述. 而在 Material Design 中, 基本不存在 &#8220;0.5dp&#8221; 这样的数值, Material Design 的网格也是以 8dp 为单位存在, Google 同样不能采用 &#8220;0.1dp thick&#8221; 这样的表述. 但是 Material 必须有厚度. 这个时候, 拿一个最小整数单位来提示 &#8220;这个东西有厚度&#8221;, 就只能选择 1dp 了.
</content>
</item>
<item>
<title>对于 Google 在 iOS 上采用 Material Design 这种事情, 我还是挺欢迎的</title>
<link>http://www.phonekr.com/material-design-on-ios/</link>
<description>Google 家的 iOS 应用最近陆续更新成了 Material Design, 还有最近更新的 Google (Now) 更是变本加厉...</description>
<content>自从 Material Design 发布之后, Google 就陆陆续续在 iOS 上把几个重要的自家应用的风格改成了 Material Design. 而在此之前, Google 的几个 iOS 应用基本上都是遵循苹果的 Human Interface Guideline 来制作的.



完全 Material Design 的 Inbox

Google 当初在订制 Material Design Guideline 的时候, 就已经把跨 iOS 平台纳入目标了. 对比 Android Design 你会发现 Material Design 在很多地方都靠近了 iOS HIG (当然, ｢违背｣ 的地方也非常多). 如果在 iOS 上运行一个 Android Design 风格的应用, 会让用户觉得非常诡异, 就像在 Android 原生系统上运行一个 iOS 风格的应用一样. 而制作精良 (在我看来 Google News &amp; Weather 就是随便应付的感觉) 的 Material Design 应用运行在 iOS 上, 给人造成的不适感却会小很多.
写到上面这句话的时候我不由得想跑个题, 说说 ｢搬运设计风格｣ 这事儿. 为什么我对于 Google 把 Material Design 搬运到 iOS 上持宽容态度, 而对国内这些把 iOS 风格搬运到 Android 上的公司就恨不得除之而后快? 从文字描述上看起来很接近的两件事其实在本质上截然相反. 对于在 iOS 上 ｢不遵循规范｣ 设计的宽容很大一部分原因是优秀的 iOS 应用即使没有完全遵循 HIG 也不会差得太远, 或者说完全从另一个平台搬运 UI —— 当然也不是完全没有应用搬运其他平台的 UI, 但是即使完全搬运其他平台 UI, 能够被接受的几乎都在 iOS 上做得甚至比被搬运平台的应用更优秀 (之前 @冬虫夏草卡洛斯 说过: 最优秀的 Metro App 都在 iOS 上.说的就是这个事儿, 恐怕不久之后大家会发现, 最优秀的 Material Design 应用都在 iOS 上也说不定呢 XD). 而很多被容忍/接受的 ｢违规行为｣ 都是正向的 ｢超越规范｣, 而不是 ｢突破下限｣. 反观 Android 上那些被人嫌弃的应用, 它们最大的问题真的只是 ｢把 iOS 风格搬运到 Android 上｣ 么?
话虽如此, 现在这几个 Google 应用大多都没有用上 iOS 系统级滑动返回, 而是用的左上角返回或者上下拉返回这些非标准的操作, 对于 iOS 用户来说其实挺不友好的. 而 News &amp; Weather 给人以很强的粗制滥造感, 以及充满 Google 风格的各式各样的小问题, 那又是另外一说了.
做得好, 自然大家喜欢, 做得不好, 大家自然就骂了.
</content>
</item>
<item>
<title>NovaDNG 2014 年度应用</title>
<link>http://www.phonekr.com/best-of-2014/</link>
<description>NovaDNG 的 2014 年 Android App 精选集</description>
<content>又到了一年一度写年终总结的时候了&#8230; 这一年因为参加了工作的缘故, 锋客这边文章的更新频率大幅下降了, 所以这几天我会搬运一些知乎上的回答过来.
然后就是这篇文章的正题, Best of 2014!按照时间排序~

发布于一月份的 Vivino 是一款酒友应用, 能够识别酒标, 在线评酒和为你发现身边的酒庄/酒吧

发布于二月份的 Muzei 是一款动态壁纸, 在每天推送一张世界名画做壁纸之余又添加了模糊效果不至影响主屏使用, 藉由开放 API 的便利又有着数百款插件可供选择

同样发布于二月份的 Type Machine 是一款系统应用, 能够像时光机一般拯救因为意外丢失的文字

发布于三月份的 Link Bubble 是一款浏览器, 能够最大限度地利用等待载入的时间
(没有图)
同样发布于三月份的 Pixl Preview 是一款设计工具, 它能让设计师直接在 Android 手机上预览 Photoshop 上的设计稿

发布于四月份的 Google Camera 是一款相机, 能够拍摄球形全景与后期模糊照片, 界面极端简洁
 
同样发布于四月份的 Scene 和 CloudMagic 分别是一款操作新颖的图片浏览器与一款集成了非常多有趣功能的邮件客户端

发布于七月份的 Journey 是一款设计精良的日记应用, 在遵循了 Material Design 的同时提供了 Markdown 支持, 并且有 Web 端与 Chrome App

同样发布于七月份的 Unclouded 是一款设计精美的云盘管理器, 可以方便地查看与管理复数账号的 Google Drive, Dropbox, Box 与 OneDrive.

发布于八月份的 Weather Timeline 是一款天气应用, 精致的动画与有趣的 ｢天气时光机｣ 功能带来了很多惊喜

发布于十二月的 Action Launcher 3 是一款桌面应用, 接近原生 Google Now Launcher 的外观与趁手的 Cover, Shutter 快捷操作让桌面的效率倍增
以上就是 NovaDNG 的 2014 年 Android App 精选集~
</content>
</item>
<item>
<title>Android UI 设计工具 (Photoshop, Android 5.0, Nexus 4)</title>
<link>http://www.phonekr.com/android-ui-design-kit-5-0-nexus-4/</link>
<description>Nexus 4 作为我最喜欢的 Android 设备, 我的所有设计图都是以他为模板完成的. Taylor Ling 曾经为他出过一套 Android 4.3 设计模板, 但是在 Android 4.4 时就停止更新了. 于是我自己做了一个 Nexus 4 上用的 Android 5.0 设计模板.</description>
<content>Material Design UI Toolkit for Nexus 4 版本 0.1 发布.
大概在十个月前, 我踏着 +Taylor Ling 走过的道路, 将他制作的 Android UI Design Kit 4.4 移植给 Nexus 4 使用. 一晃将近一年过去, Android 5.0 发布, Nexus 6 开始流行. 显然有很多人认为 Nexus 4 已经是落后的, 被遗忘的设备了.
但是 Nexus 4 作为我最喜欢的 Nexus 设备, 我显然希望 Nexus 4 在手中能够继续焕发活力, 更何况 Google 也依然在给 Nexus 4 推送最新的 Android. 于是早些时候我许下了诺言, 答应不论如何一定会把这套工具更新到 Android 5.0.
等到 Material Design 终于发布正式版的时候, 就到了我兑现这个诺言的时候了. 十个月前我还可以直接从 Taylor 的 Nexus 5 Toolkit 里搬运控件到 Nexus 4 上, 但是 Taylor 还没有做 5.0 的 Toolkit. 所以这个版本里所有的控件都是我自己画的.
于是就有了这么一套设计工具, 给和我一样怀旧的人.
 

 
 
作为 0.1 版本自然是完成度很低, 目前只做了白色主题, 还缺失了很多在 Material Design 文档中尚未明确的控件. 有兴趣的同学就下载来用用吧. 欢迎补全.
下载地址: 度盘, Google Drive
</content>
</item>
<item>
<title>Google 大概是真的打算放弃 Android 平板了</title>
<link>http://www.phonekr.com/android-tablet-is-doomed/</link>
<description>正当我准备和公园的朋友们说 ｢Nexus 9 貌似没什么东西可写 (hēi) 了｣ 的时候, 更新版的 Play Store 让我不得不重新考虑这个问题.</description>
<content>本来这篇文章的目的是打算好好黑一下 Nexus 9 的, 毕竟手上这台 Nexus 9 的黑点实在是太多了. 但是没想到 HTC 大概已经听到了众 Nexus 9 用户的不满, 塌陷的音量键, 松软的后盖这两个制造工艺问题在新出货的 Nexus 9 上已经得到了解决, 可以取暖的功能随着 Android 5.0.1 也已经取消了, 所以黑点的话恐怕真的没多少了.
但是正当我准备和公园的朋友们说 ｢Nexus 9 貌似没什么东西可写 (hēi) 了｣ 的时候, 更新版的 Play Store 让我不得不重新考虑这个问题.
多分栏布局哪儿去了?
当年 Android 3.0 发布的时候, Google 就已经为 Android 平板设计了一套非常合理便捷的布局 —— Multi-pane Layouts. 可以看到, 多分栏布局在平板上非常便利, 既能合理利用屏幕空间展示更多内容, 也方便进行操作. 可以说, 多分栏布局显著地提升了 Android 平板的使用效率.
但是, 从 Android 4.1 起, Google 开始逐渐移除 Android 上的多分栏布局. 首先是取消了 Tablet UI, 接着是设置里的多分栏布局消失了. 然后, 就发生在不久之前的是, 在 Hangouts 2.3 版本中, Google 去掉了 Hangouts 的多分栏支持. 这也使得 Hangouts 在平板上几乎失去了可用性, 布局排版就是简单的手机版放大, 一塌糊涂.

而早期版本的 Hangouts 上, 多分栏布局既能显示出对话列表, 又能让对话双方的文字不至于离得太远以便阅读.

而就在几天前, Play Store 更新之后, 多分栏布局也被取消了.
再看看不久前更新的 Play Store:

空荡荡的卡片占满了整个页面. 在更新以前, 这个界面下是采用了多分栏布局的. 左侧栏是应用列表 —— 实话说应用列表使用左边部分面积已经完全足够了. 在右边是应用的大图和快速操作, 可以直接启动, 更新或卸载应用, 甚至还可以取消订阅应用内的内容. 更重要的是, 右边栏的内容几乎是无需加载的, 而点击进入应用详情时难免需要加载一段时间. 无论是操作效率也好, 对空间的利用也好, 多分栏布局都是远远高于传统单栏布局的.

(这是很早很早之前的 Play 市场)
Google 似乎根本不在意应用在平板上表现如何
除上面所述那些取消了多分栏的应用之外, Play Games, Inbox 等另一批 Google 应用在诞生的第一天起对平板支持就异常糟糕. 在新推出的 Inbox for Android 上, 压根儿看不出一点点为平板优化过的影子, 糟糕的可读性令 Inbox 在平板上几乎不能用. (所幸, Gmail 还保留着多分栏布局).

你能想象在一块十寸大屏上使用 Play Music 却没法以全屏大小查看一张专辑封面的完整大图么? 是的, Google 就是不让你这么做. 相比之下, 反而是在大改版之前的 Play Music 对平板更友好.

尽管在 Material Design 里承诺得相当美好, 但是至少目前部分 Material 化的 Play Music 让我觉得非常不尽如人意.

Walkman 至少允许你查看完整专辑封面, 以不是太小的图. (实际上 Walkman 这样的布局也可以称之为多分栏布局)
还有奇葩的 Google+:

完全不能体现出平板屏幕大的优势, 白白浪费了屏幕空间, 操作也相当不便.
还有很多我没有截图也懒得截图的画面, 从各种各样的角度暴露出十寸平板上 Google 应用设计的不上心. 除了 Nexus 9 之外, 我还同时在使用一台索尼 Xperia Z2 Tablet. 而索尼自己的平板应用却都有不错的平板优化 (至少不会给人以粗制滥造的感觉). 两边一对比, 更是彰显了 Google 对平板的不重视.
内容消费设备? 生产力设备?
除了上面提到的应用之外, 有个很有趣的现象: Play Movies &amp; TV, Play Books 和 Play Newsstand 这三个以内容为主导的 Play 应用却一直保持着优秀的平板适配. Chrome 也还保持着多分栏布局 (在设置页中). Google Drive 以及旗下的三个 Drive 应用也有为平板优化操作. 再加上 Nexus 9 的官方附件里有 Keyboard Folio, 我想 Google 对 Nexus 9 的定位应该就显得很明确了: 内容消费 + 生产力设备. 和内容消费以及生产力无关的应用都玩儿蛋去, 凑合能用就行了; 和内容消费及生产力密切相关的应用就能得到特别优待, 有还算不错的平板布局.
还有个比较搞笑的事情是, 最近微软在测试的 Office for Android Tablet 尚不支持 Android 5.0, 所以 Nexus 9 也只能望洋兴叹.
Google 内部的碎片化
 
在 Nexus 9 上, 我看到了非常优秀的平板布局范例 —— Google Calendar, Maps 及 Gmail; 还算凑合的平板布局 —— News &amp; Weather, Keep 及 YouTube; 还有遭烂得令人无法忍受的平板布局 —— Hangouts, Inbox 及 Google+ Photos. 真的很难相信这些应用都是由同一家公司, 遵循着同一套规范做出来的.
团队越大, 部门越多, 要统一规划就越困难, 这个道理大家都懂. 但是 Nexus 9 上呈现出来的这一派乱象, 很明显地超出了我们理解和容忍的范围 —— 一个新发布的应用做得很烂, 那索性不用, 但是一个原先很棒的老应用更新之后变得乱七八糟, 这就让人完全无法忍受了.
Google 发布 Material Design 也不是一天两天的事情了, 但是现在很多 Google 还没能完全符合这套规范 —— Hangouts 直到这两天的更新才把界面上的一些元素 Material 化, Device Manager, Translate 等一系列应用现在还是 Holo 风格, Google+ Photos, Drive 系列应用的 Material Design 不伦不类&#8230; 一切的一切都让我觉得, Material Design 只是一个看起来很美的幻影.
连 Google 都不知道应该如何正确的使用, 如何用好 Material Design, 我们拿什么去要求第三方开发者/设计师遵循着套规范呢? 同样的, 连 Google 第一方应用的平板适配都如此不伦不类, Google 拿什么去要求第三方开发者为 Android 平板进行适配呢?
也许最后, Android 平板会沦为寨版的天下 (更遑论现在很多 Android 寨版性价比还不如 WinTel 寨版), Android 不得不龟缩到手机 + Phablet 阵地固守, 将平板市场拱手让给 iOS (原本就是这个市场绝对的王者) 与新秀 WinTel 平板进行刀刀见血的厮杀.
乌鸦老师问: Android 平板还有未来吗? 这个问题的答案, 我不知道.
</content>
</item>
<item>
<title>导航抽屉到底归属于哪个层级?</title>
<link>http://www.phonekr.com/navigation-drawer-where-does-it-belong/</link>
<description>我们常说 "先破而后立", 所以现在规范改变了. </description>
<content>这篇文章译自 +Juhani Lehtimäki 的博文 Navigation Drawer &#8211; Where Does it Belong in the View Hierarchy? 英文能力过关的同学可以直接去看原文~
事情本来是没那么复杂的&#8230;

Android Design | Navigation Drawer
但是一切都变了. 我们常说 &#8220;先破而后立&#8221;, 当导航抽屉成为 Google 设计规范的一部分时, Google 明确告诉我们该这么做, 而且提供了可以让开发者直接调用的工具.
难道说 Google 在一开始的时候犯了个错误? 也许第一眼看上去这样做是对的, 但是从规范上看来确实是有些问题的.
所以现在规范改变了. Google 调整了这些东西. 在新的 Material Design 规范中, Navigation Drawer (现在被叫做 Side Nav, 侧边导航栏) 一跃来到了所有东西的顶端.

&nbsp;
Material Design | Layout
我们现在又一次来到了变革的潮流中. Google 正在不断的改变自己与应用的设计, 与此同时很多变数也随着这些改变来到. 虽然我个人是很希望看到 Google 能统一他们使用侧边导航栏的方式并且对开发者们传递一个明确的信息&#8230;

也许你会问, &#8220;但是层级又有什么关系呢? 反正他们都 &#8216;能用&#8217; 不是么?&#8221;
我认为这很重要, 事关重大. 这关系到用户是如何认知他们正在操控的物件. 如果抽屉式主要的导航方式, 那么它就是最不能出错的.
层级关系能让用户明白现在他正在操作的东西归属于应用的哪个部分.

上图展现了早先版本中抽屉所处的层级, 而新的 Photos 应用也遵循了这样的层级. 在我看来这么做有两个地方有很大问题:

首先, 抽屉在这个位置暗示了 Action Bar 在我导航到其他入口的时候不会有变化&#8230; 但是它却变了.
其次, 当抽屉展开时, Action Bar 上的按钮还是有效的, 但是它们的效果对象却是被遮住了一半 (在手机上被遮住更多) 的那些项目.

令人困惑, 不是吗?
&nbsp;

最新版的 Google Hangouts 则采用了与 Tab 平齐的抽屉. 这给了用户 &#8220;当我从抽屉中导航到别处时, Tab 不会受到影响&#8221; 的暗示, 问题是, Tab 还是会受到影响的. 这种结构明显是错误的.
&nbsp;

最新版的 Newsstand 中抽屉的表现是最接近 Material Design 规范中提到的 Google 应用了, 我认为这样的实现是很棒的, 而且是正确的. 当我从抽屉中导航的时候, 所有的内容都会改变, 包括 Action Bar. 这与现实的对应是最紧密的.

把 Drawer 设置为最高层级也可以很有效地避免发生上图这种视觉错误 (当 Action Bar 在滑动时隐藏了的时候).
好吧, 一切都在不断的变化, 而 Google 看起来也还没拿准主意. 我还是希望 Google 能早日找回一致性, 这样我们开发者和设计师才能跟进. 在那之前, 我们还是谨慎为妙.
当然, 改变熟悉的事物绝不是一件容易的事情. 我在 Google+ 上发起了一个投票希望看看大家的意见. 从结果看来改变是要花些时间的&#8230;

</content>
</item>
<item>
<title>用户体验为王 —— Android 设计师 Taylor Ling 访谈</title>
<link>http://www.phonekr.com/ux-is-king/</link>
<description>我们的老朋友 Opoloo 团队对我的另一个朋友 Taylor Ling 做了一次采访, 谈论了 Taylor 的工作与生活. </description>
<content>
这篇文章译自 Squirrel Park 的文章 User Experience is King, 作者是 +NINO RAPIN, 由于我已经很久没翻译过文章了, 英文能力过关的同学可以直接去看原文~ 对了, Taylor 也是我的朋友~
Taylor Ling 是一位不懈倡导优质 UI 与 UX 设计的设计师. 在 Android 界他以自己那专注于另应用变得清晰与易用的 &#8220;(re)design&#8221; 活动而闻名. 同样的, 他也经常被邀请参加世界各地的大会并作出宣讲.
Taylor 的博客 androiduiux.com 可以说是 Android 界最富饶的设计资源聚集地和灵感发源地. 而在 Google+ 上, 他也经常分享一些关于设计的洞见与实战, 以及各种关于 UI, UX 的资源. 当然, 最近他分享得更多的是关于新的 Material Design.
我们与 Taylor 聊了很多, 比如用户体验设计, Android Design 的未来, 如何在你的领域中做到最好以及数字设计师的责任, 以下文段中粗体代表原文作者, 正文是 Taylor 的回复.
&nbsp;
在几个星期之前您被 Google 正式授予 Google 专业开发者 (GDE) 的称号, 恭喜~ 对于您来说, GDE 的角色和职责是怎样的呢? 
这和我一直以来在做的事情没什么区别: 分享一些小技巧, 与社区里的成员们互动, 帮助大家解决设计上的问题. 我经常与想要接触 Android Design 或想要为 Android 做设计的设计师们交谈, 我努力让大家意识到设计师是如何帮助开发者解决一些超出他们能力范围的设计问题的. 所以称为 GDE 其实没什么差别, 至少是对我来说.
对我来说, 成为 GDE 之后最大的目标便是努力弥合开发者与设计师之间的鸿沟.
填平这道鸿沟是个非常艰巨的任务, 因为大部分时间设计师虽然能做出很漂亮的设计稿, 但是开发者却完全不明白应该如何实现出这些东西. 主要的问题就是开发者们弄不清楚为什么我们设计师要做这样的设计. 故此作为一个 GDE, 我们可以插入到设计师与开发者之间, 对设计师说: &#8220;嘿, 除了做出那些花里胡哨的设计之外, 你需要让开发者弄清楚为什么要把东西做成你想象的这样, 为什么这对用户交互来说是非常重要的, 为什么这个图标是有意义的. 你不能随便用另一个图标去表示这个操作, 因为&#8230; &#8221; 如此这般, 等等.
我经常看到很多从有着不同设计背景的人转到移动设计这一领域来, 他们有的曾是工业设计师, 平面设计师或者出版设计师. 当然, 我的意思是, 移动设计领域正在不断成长. 但是在很多情况下, 他们之前的经历给他们的移动应用设计带来了一系列问题. 他们并不知道移动设计的基础, 也不清楚开发者们是如何把他们的设计转变成一行行代码的. 而且更致命的是, 他们中的很多人对于移动应用的设计规范没有任何概念. 所以我们一直试图在博客文章中, 在大会宣讲中, 以及其他很多地方传播这样的理念: 请做出些开发者能够理解的并使用的设计来. 我经常听到开发者说: &#8220;设计师给我发了一份设计稿, 但是他却从来不会干切图这码子事儿, 所以我不得不亲自动手切不同分辨率下用到的素材.&#8221; 所以我们不断努力分享自己的知识, 经验以及遇到的问题, 希望能够帮开发者们分忧.
三年前我们的目标还是创建一个社区. 现在我们已经有了一个, 虽然没大到那种程度, 但是已经初具规模了. 我们可以从社区里学到很多东西. 于是 GDE 就作为了更加正式的信息获取途径, 通过这些信息来缩小开发者与设计师之间的鸿沟.
设计师与开发者不应该处于敌对立场, 而应该是占有 —— 他们密不可分. 只有他们紧密的合作, 才有可能创造出最好的东西.
您一直倾注心血于 UI 与 UX 设计上. 最近, UX 这个词变得愈加火热, 反而迷失了它真正含义, 所有人都想称为 UX 设计师, 仅仅因为它很酷很潮. 于是, 作为一个在 UX 领域浸淫多年的前辈, 您是如何定义 UX 的呢? 
唔, 这个问题真是一如既往的难应付啊. 大家对于这个问题应该都有不同的答案. 很多人都认同用户体验是个很重要的东西, 但是它又是无形的, 难以捕捉. 这不是我们可以看到的东西, 它存在于完成的产品中.
当一个应用的用户体验很糟糕的时候我们会知道这东西的用户体验很糟糕, 但是通常情况下我们很难意识到好的用户体验.
没错. 当我们谈论用户体验的时候, 通常都是拿差劲的用户体验开涮的. 但很少有人会记住好的那些用户体验, 因为在优秀用户体验这样的前提下, 用户们都满意的达成了他们的目的. 如果用户体验很差劲的话, 你会一辈子记恨并且到处宣扬 &#8220;妈呀这东西太 &lt;beep ——&gt; 难用了!&#8221;
当然, 从定义的角度来说, 用户体验就是用户的体验. 但是如果你要说 UX 设计的精髓到底是什么, 我会说: 它意味着将一种态度贯穿于整个产品甚至公司中. 做到与用户感同身受, 了解用户的体验等于明确了你的产品能达到多高的境界. 虽然这并不意味着你的产品会仅仅因为用户的喜爱而获得成功, 但这至少是成功的第一步.
UX 是一套理念, 一种态度, 而它与产品的每个部分都是相同的: 交互, 界面, 样品. 产品的每一个部分都在优秀的用户体验中扮演着重要的角色.
我有一个朋友是一名 UX 意见领袖, 他走遍了整个国家 (译注: 马来西亚) 来宣传 UX 的重要性. 他甚至去求职网站寻找所有和 UX 设计相关的工作, 然后他接受了各种面试 —— 出于研究的目的. 他想要知道这些公司到底请不清楚他们想要招聘到什么人. 也许在西方国家的情况会好一些, 但是在这个国家 (译注: 马来西亚), 他发现 95% 以上的公司都找错了人. 这些公司在寻找一匹独角兽: 一个既能码代码, 又能做设计, 又能干其他杂七杂八事情的人. 这个有趣的小实验也告诉我们, 推进 UX 这件大业还需要很多的努力. 如果你想让你的产品有良好的用户体验, 可不是随便雇一个人就能自动让你的产品变好并且让用户爱上这么简单的.
您是怎么意识到自己想要从事 UI 与 UX 设计的呢? 您的职业道路是如何诞生的? 
很多人都对我的生物工程学背景感到吃惊. 我很爱生物工程学. 生物工程是个解剖学与工程学交叉的可爱学科, 但是在我们国家却很难找到实验室以外和它相关的工作. 而我又不想一直耗在实验室里. 这太无聊了. 于是我开始寻思自己还能做什么. 我一直以来就对设计很感兴趣, 在上大学之前我就很喜欢画画, 而且还得了一些小奖. 设计和艺术大概是流动于我的血管中的. 我热爱艺术.
我的第一份工作是功能分析师, 这个工作的性质是帮助产品经理将他们的需求翻译成更低级别的需求集合, 以便于开发者们能知道该干什么. 但是, 当然的, 团队里是没有设计师的. 所以我必须自己做设计, 设定布局, 做所有的事情. 当时我还没有意识到有一天我可以靠干这个赚钱.
直到三年前我开始看博客. 我发现了 Juhani Lehtimäki 的博客 (译著: Juhani 的博客已经很久没更新了&#8230;), 他在博客里谈了很多和 Android Design 的东西. 我想, &#8220;哟, 有好多人都在谈论移动界面设计啊, 有意思~&#8221; 那个时候我对于移动界面设计也没什么清晰的概念, 因为 Juhani 也是一个开发者, 而我又没什么技术背景, 所以我也不是很确定这在这方面有没有我可以做的事情.
那个时候我拿到了我的第一台 Android 手机, Sony Ericsson Xperia X8 (NovaDNG: 索尼大法好!) 它的屏幕非常小. 我很认真的研究了它, 并且被这么个小小的东西上能做到那么多我先前想都没想过的事情惊到了. 那时候仍然是 Gingerbread 的时代, 有那么一些应用是经过设计的, 但是应用之间基本没有什么一致性. 在那个时间, 第二代 iPhone 发布了, 我问了自己一个问题: 为什么高质量的应用通常只会在 iPhone 上出现? iPhone 很贵. 我不觉得我必须要花很贵的价格在设备上才能买到高质量的数字体验. 为什么我不能在 Android 上得到优秀的数字体验呢?
于是我花了更多的功夫琢磨 Android, 然后从本地运营商那里买到了一台 Nexus S —— 那个时候已经进入了 Ice Cream Sandwich 的时代了. 为此我万分激动并且做了我人生中的一个 Photoshop Android UI Design Kit. 在那之后, 我便决定开一个关于 Android Design 的博客. 时间是 2012 年六月 —— 我写了一篇关于侧边抽屉和导航的文章. 那就是我写下的第一篇博客. 那是一个新的起点.
一开始的时候, 我只是打算和大家分享一些东西.
您得到了回复么? 
有啊. 大家的回复很积极, 于是我便意识到, &#8220;对呀, 这就是我一直以来想要做的事情!&#8221; 于是我便买了 androiduiux.com 这个域名, 很 Android 吧哈哈~ 这个域名也无时无刻不在提醒我, 专注于纯粹的 Android 上.
于是不断有反馈出现, 人们积极的讨论, 我很高兴. 对我来说其中有两个人尤其重要: Juhani 和 Roman Nurik. 他们给予我灵感, 让我明白了如果有什么观点或者意见, 不要畏于分享它们. 于是我便开始更深地钻研和设计相关的东西. 在开博一年后, 人们开始找上门问我能不能帮他们做重设计. 我从来没有计划过这些东西, 但是一眨眼的功夫我就变成了一个自由设计师.
但是 Juhani Lehtimäki 和 Roman Nurik 两位都离您千里之遥, 对么? 我的意思是, 你们只在网上有联系, 但是在吉隆坡有一位帮助与引导您的导师存在么? 
是啊, 网络的力量是强大的~ 关于导师 —— 不存在这么个人. 我是自学的. 我的 Photoshop 技能基本是自创的, 通过试错, 和一些简单的教程. 没人教我怎么用 Photoshop. 我一向认为我能一个人做到这些事情, 而我确实能够做到, 尽管可能会花上稍多的时间, 但自己学来的技能确实能起到更长的效果. 你会学到如何习得新技能. 当我还没电脑的时候, 我会从杂志中学习我需要的技能. 我的第一台电脑是一台英特尔 CPU 的 Windows 95 电脑, 从那时起我就明白了电脑的强大.
其实我对自己也是有点儿小骄傲的啦, 因为, 你也知道, 这并不容易呢.
当然, 很多地方都有设计课, 或者关于人机交互的课, 但是他们总是要花上四年 —— 而有时候, 当你和那些授课教师谈话的话死后, 你会想, &#8220;开什么玩笑, 我们社区比你厉害多了!&#8221; 因为他们的知识都是理论化而成熟的, 而我, 则更多是在实践中学习, 从真实的反馈中学习. 这样一来我能在使用电子产品的时候产生实感. 而你会一辈子记住从实践中学到的东西.
另外一个对我产生绝大影响的就是阅读 The Design of Everyday Things. 这本书彻底改变了我的思考方式. 它让我意识到一件我们很少理解的事: 当我们不能操作一台机器或者设备的时候, 错的是设计师, 而不是我们.
但是我依然坚信如果你有着足够的热情, 并且想要做好一件事情, 就一定能自己做到. 这也是我从开始之初就明白, 而且一直坚持到现在的信念.
谈完了过去, 让我们谈谈现在和将来. Google 刚刚在今年的 I/O 大会上介绍了新的 Material Design 规约. 你觉得这只是个潮流, 还是它就是 Android 的未来? Android Design 将何去何从? 
有一件事情是 Material Design 很明显地改变了的, 那就是平台一致性. 但我确实对此抱有疑问, 毕竟举个例子, iPad 的体验比起 iPhone 而言是很独特的. 所以我的疑问是, 用户真的希望所有设备上的体验都统一呢, 还是体验一些独特之处呢? 不过我还是决定乘风起航, 赶上 Material Design 的浪潮, 因为 Material Design 实在是太棒了, 是经过深思熟虑的.
对我来说, 毫无疑问它就是未来. 但是它给我一种就像两年前 Holo 刚刚被介绍的时候一样的感觉. 在早期, 每个人都只是机械地模仿规约里提到的东西. 这导致了很多应用缺乏变化与创新. 如果你有关心现在圈子里正在发生的事情, 你会看到很多人在依照 Material Deisgn 重设计 Instagram 或者 Facebook. 但是他们中没有一个是独特的, 或者从中展现了变化. 他们仅仅是把颜色和内容换掉, 然后把便称之为重设计. 虽然这并不是什么坏事, 毕竟这样能让更多人意识到 Material Design 的优美指出, 但是我依然觉得几个月后我们恐怕会看到大量长得和 Google 应用一模一样的应用出现. 人们依然在探索中, 他们还没有掌握明确的思路. 我们会看到一大波圆形头像和 Floating Action Button 到处乱飘. 这很正常, 但是我们必须再一次跳出这个框架.

我认为用户依然需要独特的桌面, 平板和手机体验. 我明白 Google 想要达成一致而且我也赞成这个理念 —— 总体而言. 但是我不能赞成必须为此牺牲独特性.
总的来说 Material Design 的出场是惊艳的. 我觉得很开心, 因为你可以感受到这是专为数字世界而创造的.
Material Design 将一些现实生活中的东西带回了数字世界, 这让用户在与数字产品交互时不需要思考太多, 而这通常是长期体验中特别重要的一环.
这也描绘了拟物与拟真的概念区别: 它并不是简单的把现实中的东西挪到数字世界, 而是一种传递与变化. 
我认为纸墨概念的选择对于很多人来说也许会造成困惑. 因为它们在现实世界中都有一些显著的特性: 纸可以折叠, 墨是液体并且可以流动, 等等. 所以开发者们和设计师们开始问这样的问题: &#8220;如果它是纸, 那为什么我不能折叠它?&#8221; 如果你没有认真读过规范的话确实是会为此感到困惑, 但是他们终将意识到, 数字世界有它独特的约束. Material Design 正是这些将人文带入数字世界中, 故此我喜欢它.
iOS 的界面是冰冷的. Material Design 专注于那些用户真正会察觉到的东西并且以更少的处理让用户们意识到它们.
这些事非常有人情味儿. 我想起了当我在伦敦的时候, 我去了一趟不列颠博物馆, 观赏了一场关于古埃及的展览. 这场展览令我震惊. 4000 年以前, 他们就已经有了详尽的网格系统, 图形设计, 与奇妙的用色, 简直令人疯狂.
作为一个设计师, 您的工作是具有高度创造性的. 您的点子都是从哪儿来的呢? 
哈哈哈, 能召唤点子的仪式是不存在的. 实际上, 我试图从周围的一切获取点子 —— 大自然, 人, 风光. 当然还有人与人之间的交流. 有意思的是, 我喜欢观察窃听 —— 咳咳, 或者说观察人类比较妥当吧. 我不仅经常在人多的地方转悠, 我也喜欢听人们在谈论些什么, 他们被什么打动了, 他们为什么而担忧&#8230; 我喜欢聆听这些对话. 似乎这些行为让我将用户牢牢至于设计中心.
我知道您对字体有着很浓厚的兴趣. 您怎么看这次 Roboto 的改版? 
挺好的呀~ 当我看到它的时候就觉得很熟悉, 也许是因为 Roboto 是由结合了一些广为人知的字体而设计的吧. 而且它的跨平台通用性非常高. 我发现一些细微的改变产生了巨大的影响, 改善了易读性. 它看起来焕然一新, 但又仍然是你熟悉的那个 Roboto. 现在它终于给人以家的感觉了.

&nbsp;
是呀, 我也很喜欢新的 Roboto. 唯一让我感到有些无奈的是他们在 2.0 版本里去掉了 K 和 R 的原本很有特色的弯曲字臂. 不过也罢. 对了, 您有打算重印那套 T-恤么/? 
没有. 过去的就让它过去吧.
您有买什么可穿戴设备吗? 比如智能手表或者 Google Glass? 您为这些可穿戴设备做设计么? 您怎么看这些东西? 
当然我有的~ 在我拥有一副 Google Glass 以前我就开始为 Google Glass 做设计了, 我遵循着设计规范设计了两个 Glass 应用. 当 Google Glass 发布的时候, 就有客户上门问我能不能把他们的应用为 Glass 做适配, 或者或者说在 Glass 上玩出点儿花样来. 最后我得出的结论就是, 字体排版太重要了, 这些可穿戴设备都充满文字.
我自己有一块从今年 I/O 大会上带回来的 LG G Watch, 不过目前为止我都没有为它设计过任何东西. 显而易见的是, 很多人已经开始跑偏了. 他们想要把一台手机放进智能手表里. 他们把键盘这种及其需要繁琐操作的东西放进了智能手表里, 而这显然 Google 不建议的.
有一件事情倒是很确定, 我认为那些可穿戴式设备有着改变我们对设计看法的潜力.
Taylor Ling 的日常是什么样的? 
(笑) 我就是个普通的正常人啦. 起床以后我先看看新闻以免错过什么在我睡觉时发生的大事. 我用 Feedly 和 Google Newsstand, 当然也会去 Twtter 和 Google+ 这样的社交网络了来获取最新信息. 当我到公司之后我会检查我的任务清单, 然后与团队做交流. 接下来就是每日例行的研究, 各种玩应用, 在 Photoshop 里画设计图, 等等. 就像个普通的应用开发者那样.
等我回家之后, 我就开始做一些自由设计师的活计. 当然这些活儿看起来好像和在公司的时候没什么差别就是了&#8230; 我每天都过得相当充实, 我相信有付出就会有收获.
平时您都用什么工具进行工作呢? 
老实说, 只有 Photoshop. Photoshop 对我而言是一个无比强大的工具. 你不仅能轻松的做出小样, 也可以做出完成度更高的设计稿, 甚至还能做简单的动画. 噢对了我也用 Sketch, 不过很少. 目前为止还没什么工具能胜过 Photoshop.
尤其是在 Material Design 时代, 我们更多的关注反馈, 动画以及各种会移动的东西, 藉此增强用户体验, 所以对于设计师来说熟知如何画出能够开发者所期待看到的的图是非常重要的. 有的时候我也会用 PowerPoint 和 Keynote 来做设计.
我喜欢您的 Android Design 挑战. 是什麽促使您举办这样的挑战的? 
这已经是我第二次举办这样的活动了, 不过我的目的是一样的: 传播 Android Design, 给人们带来启发, 向他们展示 &#8220;原来应用可以设计成这样啊&#8221;. 我博客的副标题就是 &#8220;开发者与设计师的灵感源泉&#8221;. 这就是我的目标. 很多时候, 如果你给人们一些激励, 他们就会开始做一些他们从未想过的事情.
作为一个设计师, 你会希望因自己的作品而出名. 所以我早就预料到这次活动会引起大家的注意. 我和社区里的朋友们 —— 比如 Juhani 和 Günther Beyer —— 聊了这种活动的可行性. 他们也为这活动出了很多力.

我对今年的参赛作品很满意. 比起第一年的时候, 这轮活动获得了更多的投稿, 当然质量也更高了. 这个活动正在变得越来越成熟, 更多的人开始做令人惊叹的设计, 这是喜闻乐见的.
我为第一轮比赛出了钱, 当然对我来说是值得的, 毕竟设计师们在自己的设计上花了很多心血. 不过在第二轮比赛里我从一些人那里获得了赞助.
而为什么我要这么做呢? 我觉得我是一个喜欢群居的人, 我相信当你付出更多, 别人就会回报更多. 而我也确实从社区里得到了很多, 所以我也尽量为他们做更多的事情.
您的家人和朋友支持您么? 他们理解您么? 
我双亲还不是很清楚我到底在做些什么, 尽管我试过和他们解释&#8230; 但尽管他们不知道我在做什么, 他们非常支持我. 有意思的是他们无法相信我去了伦敦和突尼斯做设计宣讲. 当然我也并不指望他们相信就是了~ :-)
您幸福么? 您对未来有什么打算? 
幸福? 哈哈当然咯. 简直不能更幸福了~ 我的意思是, 我正在做我喜欢的事儿, 而且因此交了很多我觉得不太可能遇到的朋友, 也得到了多得无法想象的东西. 我当然会继续我现在的努力 —— 成为优秀设计的布道者, 推广正确的东西. 我会走得更远, 做得更多.
您有什么忠告能给那些想要追随您的足迹的人呢? 
锻炼你的眼睛. 适当地吹毛求疵, 对自己做的事情抱有热忱. 如果你热衷于生活与工作, 一切都会顺利的.
</content>
</item>
<item>
<title>MX 4 与联发科</title>
<link>http://www.phonekr.com/mx-4-and-mtk/</link>
<description>我只是简单地期待在更醒目的位置看到魅族将它标注出来，如同三星 Exynos。这样才公平，不管对于联发科，还是对于消费者。</description>
<content>这是一篇来自不愿意透露姓名的网友的投稿
在 MX 4 昨日下午正式亮相之前，关于它配置的猜测已经在魅族论坛、微博和媒体上漫天飞舞。其中最受关注的话题之一就是它使用什么样的 CPU？是不是联发科的 MT 6595？
不知道有多少人和我一样带着这个疑问走进魅族发布会场或者开始观看现场直播。到了第 11 分钟，我以为答案要揭晓了。因为魅族总裁白永祥开始介绍处理器：“我们采用了目前最先进的智能八核处理器，可以给你飞一样的体验。”（插图来自魅族 MX 4 发布会）
如此先进的处理器，哪个厂出品的？可是，除了描述它智能八核的强大之外，魅族总裁并未明确说出这款处理的型号，幻灯片上也没有标注。答案依然闷在葫芦里。我记得：在魅族去年 MX 3 发布会的同样环节里，MX 3 所搭载的 &#8220;Exynos 5&#8243;（三星猎户座 5 CPU）在幻灯片上写得清清楚楚，而且白总还用他并不标准的英语拼读了 “Exynos” 这个有些拗口的单词。
（插图来自魅族 MX 3 发布会视频）
发布会结束之际，听到周围的“魅友”询问身边的朋友：“究竟说没说 CPU 是啥啊？”，被问到的眼镜男生回答：“没听见。智能八核，肯定是 6595 啊！”。我也有同样的疑问，但不能只根据“智能八核”就轻率得出结论，万一还是三星的 CPU 呢？我需要摸到真机。在手机体验区前排队的漫长时间里，一直有身穿蓝色“魅粉服”、脖子上挂着“魅友”参会证的男生和周围的人讨论手机的参数。究竟是不是 MT 6595？内存有没有 3G？拍照效果究竟怎么样？经过 20 分钟的等待，终于轮到我入场，走向一台机器的时候，一位看起来 30 来岁的先生正在翻看着 MX 4 的设置目录，询问旁边的工作人员：“究竟哪儿能看配置信息啊？”那位女工作人员回答他：“手机里看不了，你去官网看吧”。大哥离开后，终于轮到我捧起 MX 4。顾不上欣赏它的航空铝材做工以及 Flyme 4.0 的改进，先点进应用商店下载个 cpu-z 检测工具再说。结果连接的名叫 “demo” 的 Wi-Fi 网络不畅通，下载没速度。不过这点小事情难不住我，谁让咱是媒体呐，果断点选名称包含 “Media” 的 Wi-Fi，输入密码，搞定！于是我得到了下面的的结果：是的，就是联发科出产的 MT 6595 处理器。是的，就是 2G RAM。从发布会回到家，出于职业习惯打开魅族的官网。果然已经上线了 MX 4 的精美描述。然而在这些精美的图片里，描述性能的部分，依然没有标注 CPU 的型号：

而在 MX 3 的类似页面的相同位置上，却清清楚楚写明了 “MX 3 采用 Exynos 5410 芯片”：

最终，在 MX 4 页面最后方的“技术规格”里，总算找到了官方标出的 CPU 型号：“
MediaTek 6595 魅族定制版”。在这里，魅族并没有用更为人所熟悉的 “MT”、“MTK” 或者联发科，而是选择了 MediaTek 这个更陌生的单词。当然魅族这么叫也没有错，因为联发科技有限公司的英文名就叫做 MediaTek Inc.，只是这家公司常被简称为 MTK 或者联发科。所以绕了这么一圈，最终还是确定 MX 4 就是使用了联发科 MT 6595 芯片。我只是有点郁闷，为什么在发布会开始第 11 分钟的时候不直接就说明白了？关于这个问题的答案，睿智如读者诸君，肯定也有自己的一份猜测。既然已经采用了，终究会被知道的。越说得不明确，越容易激发好奇心。聪明的用户，不管怎么样都会去搞明白想买的手机用的究竟是什么 CPU。另外一些用户也许根本不在乎自己手机用的是什么 CPU，只要自己买得起、符合所在网络、做工精致、足够流畅、系统交互精美、功能有惊喜。而魅族在这些方面并无欠缺。
也许 “中低端” 的阴影依然在困扰联发科的品牌，但 MT 6595 是一块着实不错的芯：A17+A7 大小核方案，兼顾性能和功耗。在 Android 旗舰尚未进入 64 位的 2014 秋季，这是一块可堪一战的 CPU，正如魅族白永祥先生在发布上所描述的那样，它比 MX 3 上的三星 Exynos 5410 强出太多。而且，你看他还能跑这么高的分：


（插图来自MX 4发布会）
不知道躲在魅族官网角落里的 MediaTek 会不会觉得委屈？
我只是简单地期待在更醒目的位置看到魅族将它标注出来，如同三星 Exynos。这样才公平，不管对于联发科，还是对于消费者。
魅族，你觉得呢？
</content>
</item>
<item>
<title>思源黑体, 一款好用的开源中文字体</title>
<link>http://www.phonekr.com/source-han-sans/</link>
<description>Android 上终于有一款堪用的中文字体可以和 Roboto 配合了. </description>
<content>昨天 (在中国其实是今天), Adobe 公司联合 Google 共同发布了一款开源字体 —— 思源黑体. 这款字体由 Adobe, Google, Iwata, Sandoll 和常州 Sinotype 五家公司共同合作完成, 可以说是前所未有的由五家公司共同合作完成的字体. 正因如此, 思源黑体提供了非常完备的 Pan-CJK 字符支持, 基本可以说完美支持简繁中文, 日文汉字和韩文汉字, 并且包含 Source Sans 字体家族的拉丁文, 希腊文和西里尔文字形. 与此同时, 思源黑体家族还包含了从 Extra Light 到 Heavy 七种字重. 另外, Source Han Pro 是一款开源字体, 你可以在 GitHub 上查看和 Fork 它,  或者在 Google Noto Font 和 Adobe Typekit 上免费下载使用.
 
之所以要在锋客网特别推荐它的缘故我想大家心里应该有数: 长久以来, Android 对中文字体的支持一直很糟糕, 基本上在应用设计的时候只能采用默认的 Droidsans Fallback 来作为中文字体, 而 Droidsans Fallback 又不包含多个字重, 使得设计中想要采用粗细对比来突出重要性这个常见的手法变得异常困难. 现在出现了思源黑体, 并且 Google 官方的说法是 &#8220;这款字体在设计时便考虑到了和 Roboto 字体家族的协同&#8221;, 不得不令人感到振奋.
 

希望在下一个版本的 Android 中, Google 能把思源黑体作为 Android 中默认的 CJK 字体.
</content>
</item>
<item>
<title>Splash Screen 是魔鬼, 不要在你的应用中加入这东西!</title>
<link>http://www.phonekr.com/dont-use-splash-screen-on-your-app/</link>
<description>我写下这篇文章, 借此来谈谈在安卓应用上最常见的一个问题: Splash Screen. </description>
<content>回国快一年了. 既然人在国内, 就免不了用到各式各样的国产应用. 而偏偏安卓应用的质量还大多不太能看, 问题数不胜数. 我写下这篇文章, 借此来谈谈在安卓应用上最常见的一个问题: Splash Screen.
&nbsp;
实际上, Splash Screen 算是一件很有历史的东西了. 它的起源大概可以追溯到早年 PC 游戏和各类大型桌面软件上 —— 这些应用软件在启动时需要加载大量的资源, 又不能让用户产生软件死掉的感觉, 所以一个游戏或者软件加载的时候, 就会显示一个启动画面, 然后带上一个进度条什么的, 让用户知道这个软件是在加载中而不是死掉了 (当然, 还有一些软件确实是一面显示着启动画面, 一面死掉了&#8230;).
而在移动应用上采用 Splash Screen, 又可以追溯到 iPhone 刚刚发布的时候 —— 当然, 那个时候的“启动画面”还不是 Splash Screen. 最早的启动画面是一张仿画面造应用内容的画面, 或者干脆就是一张应用截图:

(Image credit: Cyril Mottier)
iOS 应用利用这样的一张启动画面, 令用户认为应用已经载入, 与此同时在后台拉取应用数据与资源, 并稍后呈现给用户. 这样的方式取得了不错的效果, iOS 很快给大家留下了“启动速度快”的好印象. 毕竟早期 iPhone 宥于硬件条件限制, 很多应用从点击图标开始加载到可用状态几乎都要花上两三秒. 如果显示一个黑屏, 那确实是太令人不耐烦了. 而到了今天, 随着硬件机能的飞跃, iOS HIG 里已经不再建议开发者把应用截图作为启动画面, 而是建议开发者尽最大努力避免启动画面 (As much as possible, avoid displaying a splash screen or other startup experience).
实际上, 标准的 Android 应用的启动也是这么一个逻辑： 先载入应用的框架 (当然, 在 Android 上不是图片, 而是实打实的应用框架), 同时在后台拉取应用内容, 之后呈现给用户. 详见： Android Design in Action —— 初期体验. 上一个版本的知乎 Android 客户端就是这么做的, 体验也相当之不错.

(Image Credit: +Android Developers)
可以看到, 从最开始 Apple 就没打算让启动画面变成现在的 Splash Screen 的模样. 但是不知从什么时候开始, 越来越多的开发方开始打起了这块屏幕的歪心思. 开始的时候仅仅是在框架图片上加个公司 Logo 强化一下品牌什么的, 然后就不知不觉的变本加厉, 连框架图片都不要了, 直接变成了一张公司 Logo, 甚至是广告什么的…… 启动画面就这么变了味儿, 演化成了 Splash Screen.
目光转回安卓这里. 大家都应该知道, 在国内, 尤其是国内的大公司, 安卓从来都是 iOS 的附属品, iOS 方面怎么搞, 安卓方面也亦步亦趋跟着. 于是当大家在 iOS 应用上把启动画面搞成了各种公司 Logo 和广告之后, 安卓应用当然是逃不了一劫, 只能乖乖跟着改. 而且在国内, 他们甚至可以在 Splash Screen 上加入可以点击的链接……
那么, 为什么 Apple 和 Google 都把 Splash Screen 看作过街老鼠, 恨不得除之而后快呢?
首先最明显的一点就是, 现在的机能与应用配合, 已经不需要那么长的时间来加载应用资源了 (但是即使时至今日, 依然有一些应用由于优化差劲等原因, 依然需要耗费很多时间来启动, 比如, Path……). 在理想的状况下, 用户点开这个应用到应用已经完全准备就绪之间的时间, 应该是短于一秒甚至五百毫秒. 这个时候加入 Splash Screen, 只会拖慢应用的启动.
其次, 启动画面会打断用户的思考. 很多时候, 用户是在心里带着一个特定的任务打开应用的 (比如, 计算器.当然,也许知乎用户并不会经常带着任务打开这个应用吧). 此时如果应用给用户闪了一个带有其他信息的 Splash Screen, 有一定的几率会导致用户一瞬间忘记掉自己原先的任务 —— 在先前的一篇文章里, 我怒斥了 Smartisan ROM 计算器那极为糟糕的设计, 就是因为它的界面设计会让用户在启动它的瞬间看到视觉错觉而导致忘记自己原先的任务. 对于计算器这样一个应用, 让用户忘记自己打开它是为了什么, 简直是不可饶恕的错误. 同理, Splash Screen 的加入也让很多其他的应用犯下了这样的错误.
而在 Android 上, 这个问题会变得更为严重 —— Android 作为一个多任务系统, 非常经常需要在应用之间跳转. 当用户心里带着任务从另一个应用跳转到这个带有 Splash Screen 的应用时, 他有可能会因为被 Splash Screen 吸引而一时忘掉了自己原先进入这个应用的目的, 严重的阻碍了跨应用交互体验.另外, 由于多任务的特性, 应用往往会有很多个不同的入口 —— 有的时候是直接进入主屏幕, 有的时候是进入某个子层级.有的应用更因为加入 Splash Screen 而打断了导航流程, 体验极其糟糕.
若是要在应用中加入 Splash Screen, 就必然需要额外的资源. 很多国内应用的 Splash Screen 是一张图片, 而在 Android 屏幕分辨率如此碎片化的今天, 准备 Splash Screen 使用的图片无疑会占用很多空间. 更令人感到哭笑不得的是, 有些国产应用的启动器没有为不同的屏幕分辨率/比例进行优化, 在 Nexus 4, 魅族 MX 2/3 这样非主流/标准分辨率的机器上显示的就是一张拉伸过的图片, 丑陋之极.
不管你的 Logo 有多好看, 都没必要专门用一个 Splash Screen 来展示 —— Android 标准 Action Bar 上已经留了一个位置给应用的 Logo (Oops, 如果这个应用采用的是 iOS UI 的话, 那 Top Bar 上确实是没有放 Logo 的地方呢). 更何况, 想要呈示应用品牌的话还有很多更好的办法, 为什么非要选择 Splash Screen 这种最不讨喜的办法呢?
更重要的是, 不管你的 Splash Screen 做得多精美好看, 它都是在浪费用户的时间.而当 Apple 最早提出启动画面得概念时, 是为了让用户觉得应用启动迅速, 响应灵敏. 而这个出于好意的决定今天却被各个开发商用来无端浪费用户的时间. 作为一个移动应用, 内容和功能才是第一要义, 而应用多显示一毫秒 Splash Screen, 就是多浪费了无数用户一毫秒时间. Android 的设计原则中, 特别强调了 Simplified My Life 以及 Make important things fast, 不就是为了避免用户的时间被无端浪费? 开发方没有任何的理由给用户增加无谓的等待. 人们已经在生活中等待了足够多的了： 等地铁, 等红灯, 排队, 等待网页内容加载, 等待下载, 化妆/等待伴侣化妆…… 为什么还要再让他们在应用里浪费时间呢? 更何况, 智能手机本就是为了减少我们的等待而生的.
这篇文章的部分观点整理自 +Cyril Mottier 的博客 Splash Screens Are Evil, Don’t Use Them! 与 +Roman Nurik 的博客 A mobile design anecdote on perceived latency and touch feedback &#8212; Fast can sometimes feel slow.
</content>
</item>
<item>
<title>快图浏览开始 Beta 测试啦~</title>
<link>http://www.phonekr.com/quickpic-beta-testing/</link>
<description>欢迎加入~ </description>
<content>Google+ Community: QuickPic Beta
或者 QQ 群: 293875492
欢迎加入~
又: 有问题不要在这里反馈, 我会直接无视的~

</content>
</item>
<item>
<title>团队成员的 Android 实用美观小工具推荐(不定期更新)</title>
<link>http://www.phonekr.com/android-niceties/</link>
<description>这是一个由太小了以至于我觉得单独为它们分别开篇文章是略有点浪费了, 但是不推荐又觉得心里过意不去的应用组成的小集合.</description>
<content>
作为一个 Android 用户, 手机上自然是少不了一些能够快速实用的小应用和小工具. 由于他们太小了以至于我们觉得单独为它们分别开篇文章是略有点浪费了, 但是不推荐又觉得忽略了这么个优秀的应用心里过意不去. 于是就有了这个小集合. (其实是为了防止有人说我最好的东西都不推荐, 藏私货什么的我会乱说?) 觉得图太小的中键点图开大图.

Weather Timeline
也许你还记得 Sam Ruston 和他的 Hue, 我之前还写过一篇文章就 Hue 的设计讨论过动画在应用中的作用. 但是天不遂人员, 某一次硬盘事故中, Sam 丢失了 Hue 的源码, 悲痛之下 Sam 打算把 Hue 推倒重来, 做一个新的天气应用. 半年过后, Weather Timeline 便诞生了.

Weather Timeline 的主界面是很普通的地区视图, 以卡片的形式呈现了你所关注的地点的天气, 附带还显示了当地的时间. 点击右下角的 + 就可以添加新城市, 左右滑动某个城市即可删除, 当然也不必担心误删, 因为删除之后都会有撤销操作可供反悔.

随便点击哪个城市卡片便会进入详情视图, 在这里可以查看当下和未来 48 小时至一周的天气情况与概述. 当你卷动到底部的时候, 便会看到一个 &#8220;Open Time Maschin&#8221; 的蓝色卡片. 点击它就会弹出日期选择器. 当你选好一个日期之后, 就等着看魔法发生&#8230;
document.createElement('video');
http://www.phonekr.com/wp-content/uploads/2014/06/SCR_20140915_115753.mp4

在非常有青花的载入动画之后, 那天的天气就这么出现了~ 而查看天气的页面也是采用了 Material Design 的配色风格与设计, 给人一种新鲜感.
这个查看过去天气的功能其实是很多天气应用都缺失的, 绝大多数天气应用只能查看现在和未来短期的天气, 但是却不能查看过去的天气, 有些小遗憾. 有了 Weather Timeline, 你就可以借助神奇的时光机查看过去的天气了, 可以说是弥补了一个缺陷.
下载地址: Weather Timeline
&nbsp;
&nbsp;
AcDisplay
回想当初 Moto X 刚刚发布的时候, Active Notification 功能和通过体感控制快速启动相机让多少人大呼&#8221;这才是 Android 应该有的样子&#8221;. 如今, 感谢 AcDisplay, 我们不需要 Moto X 也可以在手机上体验到类似 Active Notification 的感受.

当你启动 AcDisplay 后, 新通知到来时, 手机屏幕便会自动点亮, 显示出当前的时间, 日期与通知栏图标. 时间区域和通知图标区域中间的点化线就是通知将要消失的时间 —— 在一小段时间没有操作之后, 屏幕会再度熄灭. 点击时间区域或者通知区域的话会让计时器重置.
按住通知图标, 便可以在原先显示时间的位置预览通知内容, 如果通知包含图片, AcDisplay 还会把图片做模糊变暗处理之后作为背景.
手指往通知内容区滑动后放开, 便可以直接打开通知相关应用. 如果通知包含相关操作, 那么便会在通知顶端显示出操作内容, 手指滑动到操作上便可以直接执行操作. 手指向通知右边滑动, 便可以把通知消去.

如果你在非通知区域滑动, 便可以解除 AcDisplay, 进入主屏幕或者锁屏密码输入界面. 非常便捷.
AcDisplay 和还有两个独特的功能: 你可以用 AcDisplay 替换掉 Android 自带的锁屏, 还可以启动类似 Moto X 上的手势 (传感器) 唤醒功能 —— 当你把手机从口袋里拿出来的时候, 不需要再次按下电源键唤醒, 手机屏幕已经自动点亮, 并显示着 AcDisplay 的时间界面, 你只需要滑动空白区解锁就行了, 非常便利. 在使用了几个月之后, 我认为可以确定 Active Mode 并不会显著增加电量消耗.
下载地址: AcDisplay
&nbsp;
Pocket Casts
不知道大家经常听 Podcast 吗? 我是经常听 Podcast 的, 通勤, 三餐时听 Podcast 非常好打发时间, 睡前一边听 Podcast 一边看 RSS 简直是一天最好的结尾. 这当然离不开一个优秀的 Podcast 应用. Android 上堪称优秀的 Podcast 应用我觉得恐怕都没必要用屈指可数来形容了, 因为能称得上优秀的就只有 Pocket Casts 一款.

Pocket Casts 的主界面是 Podcast 封面墙. 在 Podcast 封面右上角会有未听 Podcast 数标识. Pocket Casts 提供了挺强大的过滤器功能, 已经创建和默认的过滤器都放在 Drawer 中. 另外, 添加/发现新 Podcast 功能可以通过 Action Bar 上的 + 进入, 也可以在 Drawer 中通过 Discover 进入. 如果有正在播放的 Podcast, 会在通知栏和应用的底部显示一条简单的控制栏.

在某个 Podcast 的详情页面下, 你可以进行一些快速操作: 快速将 Podcast 批量下载到本地, 全部标为已听, 分享给朋友, 设置自动下载和跳过广告 —— 有些 Podcast 开头是有赞助商广告的, Pocket Casts 提供了设置从某时间开始的功能以便跳过他们.
点击某一个特定的 Podcast 节目便会跳出详情界面, 你可以直接查看本期 Podcast 的概要, 下载到本地/通过流媒体播放, 收藏 Podcast, 标为已听或者加入播放列表, 非常便利.

Pocket Casts 的正在播放界面也很便利: 主界面是个非常传统的正在播放界面样式, 有封面大图和播放操作控件, 不过这个控件有意思的地方就在于你可以在设置中自定义快进和快退的时间. 另外, 进度条和分割线 (以及其他界面下迷你播放器的进度条和播放/暂停按钮) 的颜色会随着 Podcast 封面的颜色改变. 左右滑动专辑封面可以进入 Podcast 详情或者播放列表. 另外, Pocket Casts 还提供了变速功能, 当你觉得 Podcast 中一段食之无味又弃之可惜的时候, 开个 (红色有角) 三倍速比直接快进跳过要保险的多.
Pocket Casts 提供了非常丰富的设置. 你可以让它在手机处于充电状态的时候自动下载未听 Podcast 以便离线收听, 还能指定自动下载的 Podcast 节目, 甚至还能让它仅仅是下载节目, 而用其他音乐播放应用来播放.
另外, 不仅是应用本身, 它的开发者 —— Russell Ivanovic (Rusty Shelf) 也是个非常有趣的人, 每一次 Pocket Casts 更新时他都会写出搞笑的 Changelog 让你在更新时不觉得无聊. Pocket Casts 的跨平台也做得非常棒 —— 它的 iOS 版本也堪称优秀应用 (虽然我觉得在 iOS 上不缺优秀的 Podcast 应用): 跨平台 UI/UX 设计示例 —— Android &amp; iOS 篇.
对了, 既然说到了 Podcast, 这里不妨稍微透露一下: TingTalk Podcast 制作决定! 现在正在绝赞准备中, 敬请期待~
下载地址: Pocket Casts
&nbsp;
SlideShare
SlideShare 是一个基于 Web 2.0 的幻灯片分享网站, 于 2012 年被 LinkedIn 收购. 不久之前他们推出了 Android 客户端.

客户端的独特之处在于, SlideShare 客户端维持了其网页版的特性, 让你你可以直接在主界面浏览各种幻灯片. 这和绝大多数 Android 应用都不同.

你可以选择直接联网查看, 也可以把幻灯片下载到本地, 方便离线查看. 如果你关注了感兴趣的主题, SlideShare 一天里可以占用掉你非常多的时间. 上面的精品幻灯片着实不少.
下载地址: SlideShare Presentation App
Libra
Libra 是一个记录体重变化走势的应用&#8230;

一图流. Libra 还有个很贴心的功能就是, 他会在每天早上提醒你记录体重. 你也可以以纯数值的形式查看体重的走势.
下载地址: Libra &#8211; Weight Manager
FlightTrack
FlightTrack 是一个航班追踪应用, 它有着非常精美的界面与交互动画.

它的主界面是日程卡片列表. 卡片呈现形式非常精美, 有地图概览, 参与者头像, 日期, 状态和活动名称. 横向滑动卡片可以删除这一日程. 点击 + 按钮即可新建行程. FlightTrack 提供了一套非常便利的航班搜寻工具, 你可以通过起降机场 + 日期或者航班号 + 日期来轻松定位航班.

在搜索结果页, 航班时间会以一个线段表示, 线段的起止代表了航班的起降时间. 添加完航班之后你就可以查看航班信息了. 航班信息的呈现形式同样非常有创意, 你可以左右滑动卡片查看起降地区的天气情况与机场的厌恶概况, 也可以上下滑动卡片使其展开以查看天气详情与航班详情, 所有的过程都伴随着流畅得动画效果, 非常赏心悦目.
下载地址: FlightTrack 5
Today
Today 是一个极简风格的日记应用.

你可以用 Twitter, Facebook 和 Google+ 账号登录 Today. 它的主界面非常简洁, Drawer 里也没多少选项. 你可以选择一些热门用户 Follow.
而作为一个日记应用, 最重要的还是写日记吧. Today 比起传统日记, 更像是微博式的日记, 让你用简短的语言 (和一张图片, 可选) 来记录自己的想法. 写完文字, 可以选择颜色或者配上图片, 然后就可以发送了. 发送完了之后可以选择分享到其他应用中.

日记浏览界面有 Translucent Bars, 图片都是全屏呈现, 很精美. 往下拉动就会进入倒计时界面, 告诉你一天只能写一条日记. 你也可以向上拉动浏览其它人的日记和更早的日记, 并且评论或点赞.
下载地址: Today
Convertbee
虽然 Google Now 基本上可以帮我们解决所有单位换算问题, 但是你的设备总有没联网的时候. 这个时候就轮到 Convertbee 登场了.

Convertbee 的界面非常简单, 就是单位选择和键盘. 你可以在左侧抽屉里选择单位的类型, 也可以通过左右滑动 Tabs 来查看历史记录和收藏的单位组合.

之所以推荐 Convertbee 还有一个原因就是这个应用里的单位实在是太全了, 居然有毫, 厘, 亩, 顷这种非常本地化的单位&#8230; 简直吓死我了. 另外, Convertbee 还能在联网的时候自动更新汇率, 非常实用.
下载地址: Convertbee
Versus
Versus 这个应用就像它的名字一样, 是 Versus.com 的客户端.

我觉得一张图就可以说明很多事情了&#8230; Versus 的数据库非常全, 国产手机什么的都能在其中搜索到. 查询结果页面里你还可以登录 Facebook 账号来为比较结果的重要性投票, 或者给出你认为同样很重要的差距.
下载地址: Versus
&nbsp;
3D Live Wallpaper
这个应用在 iOS 7 刚刚发布的时候火过一阵, 因为它能够做出 iOS 7 自带动态壁纸那样的视差效果. 不过在昨天更新之后, 它变得更加厉害了 —— 它能够导入 Google Camera 拍摄的, 纪录有主体信息的照片, 并且做出景深视差效果.
由于录制视频上传太麻烦而且画质不好 (专栏不支持 YouTube), 所以我就不录制视频了. 现在的 3D Live Wallpaper 的照片视差功能还比较不完善, 移动的距离大的话就会看出主体边缘的各种诡异重影或者脱线, 但如果只是小幅摆动设备的话, 观感还是非常有趣的.
下载地址: 3D Image Live Wallpaper
Scene
Scene 是一个很特别的照片管理与分享应用.
它的主界面是一个照片墙, 按照时间顺序从新到旧列出了所有的照片. 当你下拉列表它便会刷新, 这个刷新的动画非常有爱. Scene 提供了很有趣的照片管理功能, 便是分组相册功能. 向右拖动主界面即可进入分组模式, 你可以选择多张照片拖入一个相册中, 会有非常顺滑流畅的动画伴随着你的操作.
Scene 还能让你非常便利的寻找已经拍下或保存的照片. 你既可以在概览界面中拖动右侧的时间滚动条寻找照片缩略图, 也可以点击写着日期的白色方块进入日历视图来寻找照片.
另外, Scene 还具备非常方便的分享功能. 登陆了 Scene 帐号之后, 便可以方便的将一个相册分享给朋友. 另外, 在创建的时候你会看到在 Android 上罕见的漂亮动画.
之所以说 Scene 特别是因为它有着非常丰富而细腻的动画. 虽然在功能上也许并不是那么的丰富, 但是冲着方便的照片管理分享和那细致的动画, 就值得你去下载一个来试用一番了.
下载地址: Scene
CloudMagic
也许你会觉得很奇怪, Gmail 在 Android 上已经有一个如此强大的客户端了, 为什么还需要各类第三方客户端呢? 答案当然是因为这些第三方客户端都由各自的不可替代的特色. 先前发布的 Dropbox Mailbox 因为太丑了我就不推荐了, 这次要推荐的是一个既美观又特别的邮件客户端, 它就是 CloudMagic.

CloudMagic 支持多账户和多种不同的邮件服务. 我在我的手机上登陆了 Gmail 和 Hotmail. 多个账户会以可以展开的 Drawer 项目的形式呈现. CloudMagic 会自动为这个账户分配一个颜色.
CloudMagic 可以同时在一个界面里显示来自不同邮箱的邮件, 在最右侧用颜色条儿表示收件邮箱. CloudMagic 也支持滑动操作, 只不过不像 Gmail 那样滑动直接归档, CloudMagic 采用的是比较保守的滑动 + 点击操作, 既比纯点击要方便, 又比纯手势要安全.
CloudMagic 的一大特色功能 (也是为什么我留下了它而不是 Mailbox 的理由) 就是能够对邮件内容进行一定的快速操作. 比如说我收到了来自 Medium 的一周汇总, 里面有非常多的文章链接. 这时我只要双击邮件正文, 就会出现内容分析 (卡片) 页面. 在第一章卡片中, 我可以直接把邮件里提到的连接中文章直接放进 Pocket 以更好的版式进行阅读, 或者直接将邮件加入 Evernote 笔记/新建 Trello 卡片, 非常方便. 开发者表示更多的快捷功能还在开发中, 以后会陆续加入.
下载地址: Android/iOS
Vivino
不知道有多少读者是会平时喝点酒, 并且愿意了解自己喝的酒的呢? 虽然我不喝酒, 但是出于照顾这些酒友 (其实原因是这个应用真的很精美) 考虑, 这次来推荐一个关于酒的应用, 就是 Vivino.
&nbsp;
Vivino 是一个跨平台应用, 有 iOS 版本, 设计得同样非常精美. Android 版比起 iOS 版有个独特之处就是可以支持用 Google+ 登录, 非常便捷.
Vivino 没有采用最近大为流行的 Drawer 作为导航方式, 而是采用了最经典的 Tabs 设计. Vivino 在 Action Bar 上放置了一个硕大而醒目的拍照按钮, 这个设计非常有意思, 而且我也很喜欢. 拍照的功能是让你拍下酒的酒标以供识别.
默认界面是时间轴, 你可以在这里查看你关注的人最近都喝了哪些酒. 你也可以通过 Action Bar 上的另外两个功能键方便的从 Facebook 或者 Twitter 添加新朋友.
&nbsp;

在第二个 Tab 中, 你可以查看自己曾经记录过的酒, 以及他们的详细信息. Vivino 会自动识别你拍下的酒标并且转化为酒的属性, 你可以查看到这瓶酒的各种信息以及大家的评价. 当然你也可以自己写评价, 这样你的酒友们就会看到你对这瓶酒的评价.
另外两个 Tabs 下的功能是查看为你推荐的酒以及探索附近的酒庄/酒馆. Vivino 会根据你喝过的酒以及你评价朋友们的酒来分析你的爱好, 为你推荐合适的酒. 在查看附近酒庄/酒馆的功能中, 你可以方便的查看附近的这些酒庄/酒店里都有提供哪些独特的酒, 它们的价格, 以及酒友们的评价.
下载地址: Vivino &#8211; Vine Scanner
Reverse Dictionary
当你正在写作的时候, 会不会偶尔发生提笔忘字的情况呢? 最近我是越来越经常遇到这样的情况了, 是不是因为老了啊&#8230; 不管怎么说, Reverse Dictionary 是一款可以帮助你解决这种问题的应用 —— 当然, 仅限英文&#8230;
这款应用非常简单 —— 你输入想要查询的文字, 然后它告诉你这些文字对应的单词. 比如说我想到了一个词, 大概是和食物相关的东西, 但是我又一下想不出它到底是什么词, 我就可以通过查询 &#8220;delicious food&#8221; 关键词来看看. Reverse Dictionary 还在每个词语的解释页面中加入了同义词专页, 可以方便的查看同义词和近义词, 非常实用.
下载地址: Reverse Dictionary
Sunrise Calendar
这个之前在 iOS 上大热的优秀日历应用最近也在 Android 上开始了它的 Beta 测试. 比起原生的 Android 日历和 Google Calendar, 它的操作很新颖, 界面也很美观, 月/周视图比起 Google Calendar 更为科学, 我觉得很值得推荐.
这就是 Sunrise Calendar 的主界面. Action Bar与周指示合为一体, 颜色组合干净素雅, 不像 Google Calendar 那样如果你的日历项目多的话就显得乱七八糟的. 纵向拖动月历区域能展开月历视图便于浏览不同月份, 左下角的箭头可以快速让你回到现在的时间点. 月历下方就是日程表, 可以快速浏览过去和将要到来的事件 (而且会标注出还有多久开始), 比 Google Calendar 那样的要么显示月历, 要么显示日程的方式要灵活.

向左滑动主界面或者点击 Action Bar 上的三条竖线就会来到周历视图. 周历视图其实和 Google Calendar 并没有什么本质上的区别, 无非就是让每一天的宽度变大而已. 但是每天宽度变大的好处就是 Google Calendar 中一旦你的行程安排很多 (或者同时显示多个日历) 的话就完全不能看到日历详情, 而 Sunrise 还能看到一些. 单击事件就可以进入事件详情视图, 这个界面现在应该还在改进中 (毕竟是 beta 版本), 没有什么亮点, 相信以后会变得更完善的.
下载方式: 申请加入 Sunrise Calender for Android 的 Beta 测试社区 (前提你得要有个 Google+ 帐号), 通过之后进入 Google Play 的 Beta Tester 申请页面确认申请之后即可下载.
Event Flow

首先如你所见, 它是一款锁屏小部件, 也是一款主屏小部件. Event Flow 提供两种形式的小部件, 一种是事件流视图, 一种是月历视图. 其实基本上也没什么好多说的, 看图就很明白了. Event Flow 的一个特殊之处就是他会在每天的第一个事件旁边显示当天的天气预报 (能显示四天), 很方便. 另外月历视图下也可以通过颜色条来大致看出一天的行程安排.

Event Flow 提供了很详细的自定义设置, 你可以自己定义小部件里几乎每一项元素的颜色和透明度. 当然你也可以直接采用内置的四种主题, 一般情况下这就很够用了.
下载地址: Event Flow Calendar Widget
&nbsp;
Maps Measure
也许你会怀念旧版 Google Maps 里的一个实验室功能, 那就是地图测量, 可以很方便的测量地图上任意数点之间的距离, 对于规划长跑路线等行动来说非常方便. 可惜在新版地图里, 这个实验室功能被取消了. 不过不用担心, 现在 Play Store 上有了一个更强大的替代品, 那就是 Maps Measure.
铛铛! 如你所见, Maps Measure 不仅可以测量任意数点之间的长度, 而且还可以测量任意闭合多边形的面积! 简直太方便了~

Maps Measure 支持公制和英制单位, 可以方便美国同学直接查看测量结果. 同时它还支持搜索和切换地图为卫星图模式, 可以方便的在地图上找到你想要找的地方~
下载地址: Maps Measure
&nbsp;
Inflikr
可以说是 Android 上最美观的 Flickr 客户端吧, 采用了漂亮的 Translucent Bars 营造出了沉浸式图片浏览体验, 各种功能和分享也很完善, 没什么好挑剔的了.

Inflikr 的主界面就是照片墙, 如果你的自己人上传的图片很好的话这面照片墙的冲击力就非常强烈, 能牢牢吸引住你的目光. 左侧 Drawer 可以切换浏览的分类或者搜索, Inflikr 也提供了附近的人和探索功能. 另外, Inflikr 的保存分享非常便捷, 只要按住图片拖动到相应的位置即可完成, 并且它还支持直接将图片保存到 Dropbox, 非常方便.

Inflikr 还有一个杀手锏就是支持 Muzei 动态壁纸, 你可以在桌面上看到你最喜欢的摄影师的作品集或者你的自己人发的照片, 简直赞~
下载地址: Inflikr for Flickr
&nbsp;
Type Machine
也许你也在 Android 上遇到过这么个问题: 辛辛苦苦在 Gmail 里码了好长一封邮件, 然后不知因为什么原因, 突然间 Gmail 就 FC/ANR 了, 然后你辛苦码的字就全部付诸东流了&#8230; 这个时候是不是非常想摔手机?
大家都知道 Mac OS X 有个非常牛 13 的功能叫做 Time Machine, 可以在关键时刻救数据于水火. 现在, Android 上也有了这么一个能够在关键时刻救你码的字于水火的应用, 就是 Type Machine.
 
Type Machine 可以记录你在任何应用中输入过的文字. 除了能恢复之前输入的文字之外, 你还能在应用中查看输入文字的历史版本, 方便修订. 你还可以给应用设置 PIN 码, 防止你输入过的东西被别人看光光.
应用只要求了自启动权限, 其余功能是通过 Android 的辅助功能实现的.
下载地址: Play Store ($1.99, 看作买保险的话这真的很超值了)
&nbsp;
Switcher
这个应用相当于是 Android 的 Recent 键加强版, 能够让你方便的在各个应用中快速切换.
  
Switchr 提供了三种不同的切换模式 —— 卡片式, Cover Flow 式与弧式. 藉由由屏幕边缘自定的几像素热区向屏幕内滑动的手势, Switchr 便会出现. 它提供了快速切换/关闭运行中应用与关闭全部运行中应用 (关闭功能需要 Root 权限) 的功能, 并且能在切换应用的时候实时预览应用的运行状态, 非常方便实用.
除了预览/关闭运行中应用, 你也可以选择固定一些常用应用到列表底部, 这样就可以方便的从任何地方启动它们.
这个应用的开发者还开发了下面提到的 RoundR.
下载地址: Play Store/Pro 解锁.
&nbsp;
Muzei
还在为找不到合适的动态壁纸而操心? 喜欢换壁纸, 但是总觉得自己动手换好麻烦啊 &amp; 有些壁纸太亮/太花不适合放在桌面? 想要找些高大上的壁纸彰显自己的品味? 现在这些都不是问题了, 因为我们有了 Muzei, 一个高大上动态壁纸应用!
 
在默认状态下, Muzei 会每天推送一张世界名画作为你的壁纸. 应用的设置项非常简单, 只有模糊程度和变暗程度两种, 把这两个数值调整到合适的状态, 就不必担心壁纸过于明亮或花哨而影响主屏可视性了. 而只要在主屏空白处双击, 壁纸的原貌就会显现出来.
除了世界名画, 你也可以选择从自己的图库 (自带功能, 可以自定义切换壁纸时间) 或者 Tumblr, 500px 等网站 (需要插件) 来获取壁纸. 这个应用的 API 是开放的, 感兴趣的开发者可以访问他的 GitHub 来查看.
除了壁纸, 这个应用本体也非常精美, 有着漂亮的过渡动画与细节设计. 这个应用来自 DashClock 的开发者, Android Developer Relation Team 的 Roman Nurik. 目前 Play Store 上已经有一些不错的插件了, 比如前面提到的 500px, Tumblr, 还有 Reddit 插件.
下载地址: Play Store/插件.
&nbsp;
Cloud Emoticon
喜欢在 Android 上卖萌但是每次想要输入颜文字都要切换输入法? 输入法自带的颜文字表情没法满足你变态的卖萌需求? 还是说, 你已经达到了能够手打颜文字的至高境界? 有了 Cloud Emotion, 卖萌从未如此简单~
 
安装完应用之后, 你可以从 drawer 中的分类里选取你常用的颜文字, 添加到喜爱列表里. 之后, 你就可以随时方便的在通知栏里访问它. 打开之后默认进入喜爱列表, 点击某个颜文字就会自动将其复制到剪贴板并返回到上一个界面, 这时你只要粘贴就能完成了, 非常方便.
这是一个开源应用, 开发者提供了 GitHub 页面.
下载地址: Google Play.
&nbsp;
Beam File
Android  自带的 Android Beam 已经为我们的生活提供了非常多的方便, 通过它我们可以方便的交换名片, 照片和应用/音乐/书籍等. 但是 Android Beam 对于天朝用户而言依然不够强大 —— 如果我想要传给别人一些 mp3 文件, 或者一个 Zip/APK 包, 那么 Android Beam 就无能为力了. 这时候, 就轮到 Beam File 登场了.
 
主界面可以在设置中改成这种对话框, 甚至还能隐藏掉广告, 简直节操满满. 应用没有启动器图标, 所以设置必须在准备 Beam 这个界面进行.这个应用的方便之处在于, 只要发送方装有这个应用便能完成 Beam, 接收方甚至无需支持 Android Beam (开发者甚至可以以 Nokia N9 作为接收对象). 可以说任何能在文件管理器查看的文件都能够通过 Beam File 发送到其他手机上, 异常方便.
这个应用的开发者同时也是 Tinted Status Bar (一款 Xposed 插件) 的开发者.
下载地址: Play Store.
&nbsp;
Google Now LiveWallpaper
Google Now 有一个很有趣的特点就是搜索框的背景, 这个背景会在不同的时间/地点改变, 节日和纪念日还会变成相应的 Google Doodle. 于是就有开发者把 Google Now 在不同时间和地点显示的背景图给提取了出来, 做成了一个动态壁纸. 不过为什么是动态壁纸呢? 嘛, 当然是因为动态壁纸才能在每天的不同时间切换成符合那个时间的图片啦~
 
实际效果就是这个样子, 你可以在设置中自定义清晨/日间/黄昏和夜晚开始的时间, 壁纸会在那个时间自动切换成相应的壁纸.
下载地址: Play Store
福利: Google Now 壁纸 (分辨率皆为 2560X1098)
&nbsp;
RoundR (By NovaDNG)
很多老 webOS 用户也许会怀念 webOS UI 的边缘圆角卡片吧.
 
最近在 Play Store 中出现了一个小应用, 它能够把屏幕边缘四角变成圆角. 这就是 RoundR.
 
 
这款应用只有 68K, 权限要求也非常干净(在其他应用上方显示, 自启动). 你可以自定义圆角的弧度, 也可以自定义想要变成圆角的角.
顺便一提, 这个应用的开发者同时是开发了 Slidbar Pro 和 Floating Stickies 的人, 他对 Draw over other Apps 的应用可以算是驾轻就熟了~
下载地址: Play Store
&nbsp;
Wakey (by NovaDNG)
有的时候, 我会想要让屏幕保持常亮. 现在有了 Wireless Charging Orb, 我只要把手机放上 Wireless Charging Orb 就行了, 但是如果没有呢? 还得把开发者选项里的&#8221;充电屏幕常亮&#8221;勾上, 然后插上充电器, 或者去设置里把睡眠时间调成关闭, 多麻烦, 而且以后有可能会忘记改回来. Wakey 就提供了一个快速的让你的屏幕暂时不会自动关闭的手段.
 
左图就是应用的主界面了, 及其的简约, 但是丝毫不显简陋. 右下的 G 其实是一个网站, 相当于广告 + About 吧. 不过这个广告在这里也是相当和谐, 丝毫没有违和感. 右图是它的 Widget.
 
当 Wakey 启动之后, 你就会在通知栏中看到黄色小灯泡. 点击主体可以进入 Wakey 应用(虽然我觉得毫无意义), 点击下面的 Deactive 就可以关闭.
下载地址: Play Store
&nbsp;
Hashnote (by NovaDNG)
作为一个超级简单的记事应用, Hashnote 只有 779k, 但是它却提供了两个很有意思的功能——#Hashtag#话题功能和 @at 提到功能. 简而言之, 它可以识别出你笔记中的 #话题和 @提到, 然后在 Drawer 中呈现.
 
左图便是 Hashnote 的初始界面. 所有笔记会陈列在上面, 其中的 #hashtag 和 @mention 会以不同的颜色高亮显示. 顺便从左图里也可以看出, 邮箱地址是不会被误判为 @mention 的. 右边是我新建的笔记. 由于这个应用的特色就是 #hashtag 和 @mention, 所以在键盘上面会看到应用提供的 # 和 @, 让用户可以快速在笔记中插入这两个符号.
 
在主界面向右滑动就会打开 Drawer. 你所有的 #hashtag 和 @mention 都会呈现在其中. 点击某个 #hashtag 就是简单的过滤, 主页面上将只会显示含有这个 #hashtag 或者 @mention 的笔记. 当然, 你可以在记笔记时套用复数个标签, 这样就可以在过滤时得到唯一含有你选中的标签的笔记. 当然, 我觉得如果能够把选中的 #hashtag 或者 @mention 在 Action Bar 上显示那就更好了.
顺便说一下我没有截图的中文支持. 中文支持是没问题的. 但是一定要在 #hashtag 前后加空格(而不像普通的中文撰写那样不留空格), @mention 也同理.
下载地址: Play Store
&nbsp;
Periodic Table (by NovaDNG)
去年我学化学的时候那是各种苦逼, 本来我就不是很擅长计算之类的东西, 然后元素周期表也没背好, 分子式, 摩尔量计算什么的真实把我折腾的晕头转向. 这学期喔学乖了没选化学课, 但是却在这时候发现了这个应用&#8230;
 
这个应用非常非常小, 只有  187k. 左图便是应用主界面. 其实这是个列表显示的元素周期表. 不同的颜色代表该元素的类型. 一个值得注意的地方是, 所有的配色都是 Android 标准色, 看着很舒服. 你可以在搜索栏里输入你想要查询的元素的符号或者全名(要是支持输入质量或者电荷量查找相应元素那就神作了)查找相应元素. 右图是元素的信息页面, 可以说很精致美观.
 
在元素的详细信息页面, 你可以看到这个元素最主要的一些信息: 全名, 原子量, 符号, 原子序数, 类型, 电性. 在&#8221;更多&#8221;中还有元素块, 族, 周期, 以及尚在开发的其他功能.
 
虽然说这只是个元素周期表应用, 但是它还附赠了摩尔质量计算器和摩尔数计算器. 你可以简单的用数字来表示脚标.
其实这个学期没选化学课之后我就发现关于化学课的内容我已经忘了差不多一干二净了&#8230; 所以没事的时候打开这个应用稍微温习一下也没什么不好的&#8230; 以后反正还是逃不了化学课, 还不如早点准备&#8230;
下载地址: Play Store

&nbsp;
Ultimate Stopwatch &amp; Timer (by NovaDNG)
这个计时器其实非常非常早就有了(貌似从 2008 年 Android 刚出来没多久的时候就有了, 不信可以看下载量), 不过直到这个版本才采用了 Android Design, 变得算是美观实用了.
 
和 Opoloo 团队的计时器不同, Ultimate Stopwatch 走的是略显复古的路线, 计时器表盘非常华丽. 默认 Tab 是秒表, 提供了基础的秒表功能和记圈功能. 有意思的地方是每过一秒都会由一声&#8221;哒&#8221;的音效.
 
最后一个 Tab 提供了倒计时功能. 需要点击 Action Bar 上的闹钟按钮来设定时间. 就倒计时功能而言 Timer 虐翻它&#8230; 通知栏提醒也没有充分利用 Android 4.1+ 的优势, 只能说聊胜于无.
下载地址: Play Store
&nbsp;
Holo Compass (by Davids.Zerro)
Android 上的指南针一向为我所诟病&#8230;“怎么就没有 Holo Theme 的啊！！”于是，Holo Compass 一出，我就不再抱怨了。提供黑白两款主题（重启应用生效），以及流畅的转动效果，以后御用就它了。至于底下的“NSWE”是方向指示，你可以快速判别出你现在面对的方向。
 
下载地址: Play Store
&nbsp;
Air Quality China(中国空气质量) (by NovaDNG)
最近几天我们的帝都似乎又被阴霾笼罩, 对空气质量的关注又达到了一个顶峰. 也许有的 Android 用户羡慕 iOS 设备上有很多精美的 AQI 监控应用, 其实 Android 上也有符合 Android Design 的 AQI 监控应用, 就是我今天推荐的这个 Air Quality China.
  
左右拖动下面的图表区可以切换 24 小时数据和 30 天数据.
 
设置在齿轮图标而不是 Action Overflow 里, 略有点迷糊(不是重点). 可以在设置中选择城市, 我大略看了看, 基本上是覆盖了大部分大城市. 可以在这里选择监控站和数据形式(平均值, 最大值). 同时应用还提供了桌面 widget.
这个应用似乎也是个人作品, 作者是@Only在水一方, 感兴趣的同学可以关注他.
下载地址: Play Store.
&nbsp;
AntennaPod (by NovaDNG)
想在 Android 设备上听 Podcast, 又嫌没有一款既好看又轻便又靠谱的 Podcast 应用? 让 AntennaPod 拯救你的灵魂! Holo Theme, 小巧轻便, 功能齐全, 还附赠海外 Podcast(MiroGuide) 列表, 能设置睡眠定时, 可以使用流媒体收听也能下载到本地收听, 实乃居家旅行听 Podcast 必备之物~ 而且这货是开源的, 你可以去 GitHub 提交遇到的 Bug 或者干错 Fork 一遍自己来定制~
  
 
下载地址: Play Store.
Slider Widget (by Davids.Zerro)
有了这个，再也不用跑设置里调音量了！再也不用蹂躏音量键了（CM User请无视）！Slider Widget 有着全Holo theme 风格和色彩，可以让你在桌面建立多种样式的插件，点击插件就可以单独地线性调节音量，所谓线性调节嘛&#8230;就是将音量分成12级，一级一级地调&#8230;逐个数字准确地调&#8230;（强迫症最爱！）另外插件支持每个图标单独设置，还有Davids.Zerro（这货是谁？）最爱的透明度调节&#8230;伙计，上图！
         
下载地址：Play Store （还有天朝用户防和谐下载地址：酷市场） 另外，请不要吐槽没有中文，那几个英文给点耐心都能看懂&#8230;
Silence (by NovaDNG)
一款定时静音/飞行模式的应用, 功能上说是之前推荐过的 Shush! 的增强. 他还能定时开启 Wi-Fi 和蓝芽. 比较有意思的是他的定时可以分星期, 比如我周一这个时间要开会, 那么我就新增一个只在周一这段时间有效的, 静音, 关闭 Wi-Fi 和蓝芽的情景模式. 善加使用可以省电和避免尴尬.
 
下载地址: Play Store (有广告, 但是可以用 AdAway 去掉. 觉得好的同学可以买 $1.99 的付费版支持作者).
&nbsp;
Fuubo(抚波) (by NovaDNG)
如果很多时候你只是想发微博, 而官方客户端又臃肿又丑陋让人一点都不想看, 这时候你就可以试试抚波了. 抚波是专门用来发微博的工具, 但是做得非常精致漂亮. 可以在桌面上创建快速拍照发微博的工具, 能发定时微博, 离线微博(离线保存, 联网时自动发送), 支持草稿箱, 支持多帐号. 某种意义上和四次元互补.
 
 
下载地址: Play Store.
&nbsp;
Notification Weather (by NovaDNG)
  
 两张图就够了, 你可以看到这个通知栏天气显示了当日天气, 最高/低气温, 风速和四日天气预报. 最重要的是他的风格和 Android 4.X 严丝合缝, 放在通知抽屉里没有任何的不妥之处. 另外这款应用必须要在 Android 4.1 或以上的设备上才能运行.
下载地址: Play Store
&nbsp;
 Awesome On Off (by NovaDNG)
很早之前在微博上似乎推荐过. 这个应用没办法上截图. 你需要知道的是, 开启 Awesome On Off 之后, 你只需要在光线感应器/距离感应器(反正大多数手机上这俩货都是在一起的)钱轻轻挥手两次, 手机便会锁屏. 在锁屏状态下, 你只需要把手机从平放抬起到呈 30 度角面对自己, 手机屏幕就会开启. 这个功能不需要 Root, 也就是说任何 Android 手机都能用.
下载地址: Play Store
&nbsp;
Faster GPS(需 Root) (by NovaDNG)

AdAway 作者的另一个作品. 可以预先确定你所在的区域, 简短搜星时间. 在美国这里试用有奇效, 室外冷启动 GPS 居然能在 10&#8243; 之内搜到星. 不知道在大陆还有没有这么好的效果.
下载地址: Play Store
&nbsp;
Safe In Cloud (by NovaDNG)
 
这个东西是用来给健忘的人(比如我)保存各种网站的登录帐号密码, 银行卡账号什么的. 可以藉由 Google Drive 在各个设备间同步. 至于为什么没有界面的截图呢? 呃, 因为这货在前台运行的时候是不能截图的&#8230;
下载地址: Play Store
Mapsaurus Beta (by NovaDNG)

Mapsaurus 是一款可以帮你找到与一款应用相似的应用的应用(哎呦怎么这么拗口). 只要选中一款应用, Mapsaurus 便会开始分析它的关键词, 然后给出四个相关应用. 你可以不断的在相关应用里进行扩展查询.
下载地址: Play Store
</content>
</item>
<item>
<title>正确的使用 Navigation Drawer</title>
<link>http://www.phonekr.com/navigation-drawer-done-right/</link>
<description>译注: 这篇文章来自博客 Android UI/UX, 作者为 Taylor Ling. 这篇文章在现在看来恐怕很快便会显得不合时宜了, 因为 Google 刚刚更新了他们的 Google+ 应用, 采用了新的导航方式并抛弃了 Navigation Drawer. 当然, 我是丝毫不认为 Drawer 会很快淡出我们视线的. </description>
<content>译注: 这篇文章来自博客 Android UI/UX, 作者为 Taylor Ling.
这篇文章在现在看来恐怕很快便会显得不合时宜了, 因为 Google 刚刚更新了他们的 Google+ 应用, 采用了新的导航方式并抛弃了 navigation drawer. 当然, 我是丝毫不认为 Drawer 会很快淡出我们视线的.
在最近到来的 Gmail 更新里, Google 终于把它的 drawer 形式进行了统一 (比如在低层级界面中也可以通过边缘滑动唤出 drawer, 而且也把设置/帮助/反馈等操作放进了里面), 我个人是相当乐于看到这样的情况的, 因为有了这样的事实基础, 我们就可以更好的谈论谈论这个设计模式的一致性 (我认为 Google+ 和 YouTube 迟早也会改成这样的). (译注: 同感, 现在的 Google+ 看起来更像是个过渡版本) 我假设你已经看过这两篇关于 navigation drawer 是如何降低了用户活跃度和为什么以及如何避免汉堡菜单的文章 (如果你比较关注和 UI/UX 相关的新闻的话), 如果没看过的话, 建议你看一下 —— 这两篇文章都很有意思. 在 Zeebox 的案例 (文章一) 中, 我不太能理解为什么他们会决定采用 navigation drawer —— 显而易见的是这个应用并不需要采用 navigation drawer, 如果让我来设计的话我也许会采用 QuickReturnTabs (就像现在的 Google Play Newsstand 中那样), 来适当的增加屏幕可用空间 —— 尽管如此, 还是感谢他们提供了一个算是有参考价值的 A/B 测试. 这两篇文章 (以及我相信还有很多我没看到的) 都想要传达这样的观点: navigation drawer 是一个糟糕的设计模式, 请务必不惜一切代价回避它. 但是我在这儿显然是要唱个反调: 在 Android Design 的语境中, 你应该放心的使用它 —— 但是仅在真的有必要且经过仔细思量的前提下.
理解 Android 中的 Navigation Drawer
在 iOS, 尤其是在 iOS 7 中, 侧边菜单确实是与导航元素 (尤指返回键) 和侧滑返回操作 (但这个操作并不是真正的全局通用操作, 如果我记错了的话请不吝指正) 冲突, 但是这和 Android 上的情况完全不同. Android 上的 navigation drawer 要复杂得多, 边缘侧滑手势被保留用于从任意一个导航层级接入 navigation drawer (当然我知道在这个地方可见性是一个问题), 这保证了即使你在应用的深处也能令顶层导航有很好的可访问性. 在 Luis Abreu 的文章中那最关键的限制, 即平台导航模式冲突, 在 Android 上便不复存在了 (当然, 我知道他说的是 iOS 7).
信息结构 (Information Architecture, IA) 调整
对于 Luis Abreu 提出的, 关于当你采用 navigation drawer 时应当作出信息结构调整的观点, 我还是非常认同的 —— Navigation drawer 并不是一个能解决所有导航需求的万用解. 无论何时, 站在更高的角度来重新思考应用结构, 以便找到如何通过移除那些无益于展现内容的不必要的层级/信息以达到减少导航深度的方法, 都是件好事: 在 Android Design 中, 有一个写得不错的应用结构推荐.
姿势正确

如果在经过了仔细的考虑之后依然觉得有必要使用 navigation drawer 作为顶级导航方式, 那么请用, 并且以正确的姿势用. 并不是说我限制你的发挥, 而是因为作为一个需要被大量使用的交互方式, 它最好还是保持在设计规范的约束之内以维持一致性, 让用户觉得熟悉与可靠. 我们总是希望用户能&#8221;一次学习, 终身使用&#8221;, 尤其是站在整个操作系统的角度上来看 —— 我是不太想说这样的话, 但是每一个 Android 开发者与设计师都有责任在建立和维持 (注) 一致性这方面贡献自己的力量, 这样用户们就不必面对支离破碎的交互方式愁眉不展了. 用户越快的掌握如何使用一个应用并做到他们想做的事情, 他们就越满意.

注: 我知道时至今日有些 Google 自家应用依然没能与最新的 navigation drawer 设计模式保持一致, 但是我很确定他们正在改进. 别忘了 navigation drawer 花了多长的时间才进化为今天这个模样的. 早在 2012 年我就已经写过一篇关于导航抽屉的文章了!

&#8220;眼不见为净&#8221;
在 Anthony Rose 的关于 navigation drawer 的文章和在下面展示的来自 Luke Weoblewski 的推文中, 他们试图告诉我们, 当导航方式不是那么直观的时候, 用户的参与度便会降低 (尽管我不是很能确定在 Luke 的图表中到底是以什么作为参数的).
 @lukew: 直观总是赢家.
在一些情况下确实是这样的. 这个统计报告看起来非常唬人 —— 但我不认为我们看到了这些案例的全貌. 用户参与度降低意味着什么? 是意味着用户们不再在应用内探索了, 还是意味着第一屏 (也就是主界面) 对用户而言已经足够了? 会不会是意味着用户们在应用内 (因为干扰减少了) 以更快的速度与更少的操作完成了他们想要做的事情呢? 如果我的应用能够帮助用户提高效率, 我会把这样的结果视为一个成就 —— 毕竟这很大程度上意味着我的应用能让用户更快的达成目的. 当然, 我也非常赞成&#8221;眼不见为净&#8221;的设计理念, 但是这并不意味着我们必须要把所有的东西都暴露给用户, 毕竟每个 UI 元素在交互中都扮演着不同的角色, 他们都有着独一无二的重要性. 所以当你又一次需要用到 navigation drawer 的时候, 确定你是真的需要它 —— 你看, 新版的 Google+ 应用就证明了有时候, navigation drawer 也并不是唯一的选项 (译注).
延伸阅读: 由饭本前设计师 +Stephen Day 写的《从 Google+ 更新说说 Navigation Drawer》
</content>
</item>
<item>
<title>小米平板的变数</title>
<link>http://www.phonekr.com/mipad/</link>
<description>怎样看待小米平板对 Android 平板应用的影响? </description>
<content>
昨天, 作为中国 Android 界影响力最大厂商之一的小米推出了自己的平板. 这台小米平板有着亲民的价格, 看起来高得吓人的配置, 以及依然不知道什么时候能买到的悬念. 另外一个亮点是, 小米平板采用了和 iPad mini with Retina display 一样的屏幕分辨率, 而小米甚至直接宣称这是为了“方便移植 iOS 应用与游戏”.
那么, 小米平板能为颓靡的中国 Android 平板应用注入一剂兴奋剂, 带来正向的促进吗?
这里看法比较悲观: 小米平板也许并不会带动大量开发者适配平板应用, 而最终会发展成一个新的&#8221;小米平板生态&#8221;.
小米平板最大的卖点, 从官方宣传来看应该是阅读. 小米平板的官方网站专门用了一整个页面来展示其优秀的阅读器和阅读效果. 甚至连 MIUI 在功能上的优化等都是一笔带过 —— MIUI 页仅仅是提及了平板适配系统应用 (所谓适配无非是拉大了应用并使内容充满屏幕, 也并没有应用到 Android 标准大屏解决方案的多分栏布局等) —— 且依然花了很大篇幅渲染优异的阅读体验, 而办公功能更是只用了一张图片草草说明. 而实际上, 小米平板作为一个消费内容的娱乐平板, 本身已经自带了足够多的内容资源了 —— 阅读方面有前面大肆渲染的多看, 音乐和影视都有自己的资源 (小米平板宣传页), 而这些资源才是小米的盈利重点. 可以说, 小米平板对第三方应用的需求其实很小, 只要开发者能适配游戏就可以满足作为一个娱乐板的所有需求.
而游戏方面, 小米采用了和 iPad 一样的分辨率, 暗示 (简直是明示) 游戏开发者&#8221;之前在 iPad 上用的素材只要原封不动搬过来用就可以了&#8221;, 一段时间内, 应该会有一些游戏开发商愿意针对它进行适配.
实际上, 这其中还有很多变数. 比如普及度. 如果没记错的话, 今天发布会说的是&#8221;六月中旬公测&#8221;, 结合小米一贯的饥饿营销 (或者说卖期货) 手段, 以及 Tegra K1 的铺货时间, 也许等到年底这台平板都不能得到很好的普及. 更何况在中国, 连三星 Galaxy Tab Pro 等大厂产品都没能引起广大应用开发商的重视, 可以认为大部分开发者认为平板用户很难对他们产生价值, 由此可以推断, 一个等到年底都不能经常在街上看到的平板不太可能让他们积极的去适配.
不过还有另一个变数, 那就是米粉. 俗话说会哭的孩子有奶喝, 会闹的粉丝有应用适配. 先前魅族 Smart Bar 就是个活生生的例子, 这家企业用微乎其微的市场占有率 (存疑) 逼迫很多应用不得不为其适配 Smart Bar. 魅族用户齐心协力尚能做到到这样, 小米依靠其更多 (也更会吼) 的用户能做到些什么, 还是有些值得期待的.
&nbsp;
另外还有一个值得担心的地方就是, 如果有大量未经重新设计就&#8221;搬运&#8221;到 Android 平板上的 iOS 应用, 又会对国内的 Android 平板生态带来什么影响? 答案无非就是让一些国产应用在平板上回到三年前手机应用的起点罢了 —— 至少有是有了. 只不过这一次和三年前的手机恐怕会有点不一样. 如果小米平板真的普及了, 而且能一统国内 Android 平板界, 那么恐怕到那时再试图推行 Android Design 的难度就不是一般大了. 更重要的是, 如果这一天真的到来了, 甚至没有说服开发者在平板上不采用 iOS 设计的理由.
另外, 还有一种可能就是, 很多应用不是将应用本身进行平板适配, 而是完全照搬 iOS 的方式出一个平板专用应用 (就像在 Android 2.3 时代一样). 这对任何人都是没有好处的, 但是很难说服开发者不这么做 (在小米平板统一国内 Android 平板界的前提下). 而如果要直接做 Responsive Design, 也不太可能做到手机模式和平板模式两套 UI 风格. 如果开发方倾向于直接把手机应用做 Responsive, 那么对大家来说都是大好事, 如果不是, 那对小米来说是好事, 对其他人迟早会造成问题的.
最后说句题外话, 如果有开发者愿意为 Android 平板 (而不是只为小米平板) 适配自己的应用, 请参看: Building a Dynamic UI with Fragments, Multi-pane Layouts, Android Design in Action —— 编与集.
</content>
</item>
<item>
<title>Android Design in Action —— 以落网为例</title>
<link>http://www.phonekr.com/adia-luoo-redesign/</link>
<description>跟随我们的脚步, 从”还不错”到”棒极了”~</description>
<content>
&nbsp;
落网是一个搜集介绍国内独立音乐的网站. 它的每一首歌都由人工推荐, 每一个主题都由落和他的伙伴们随心境打造 (一句话简介 by 刘文慧). 更多关于落网的资料, 请参看爱范儿对落网的报导 《不小心，落网》. 落网在一周前上线了 Android 客户端, 可以看出他们有意想要朝 Android Design 考虑, 但是不知出于什么原因 (推测是为了支持 Android 2.3), 整个应用非常的别扭, 控件的使用也很诡异. 这个应用的设计有着诸多可改进之处. 这次我就以落网 Android 版本作为例子, 讲解一下应该如何改进一款”原本就有意向遵循 Android Design”的应用, 同时希望这个范例能给大家带来一些参考.
这一次的主题是&#8221;保守&#8221;, 也就是说, 我不会在这次重设计中用上太多花哨新奇的效果, 都是中规中矩的改进.
1. 最新期刊 (首屏)
 
落网的首屏采用了大号卡片流的呈现形式, 美观大方, 冲击力很强大, 我很喜欢这个设计. 就呈现形式而言, 我觉得并无不妥, 便没做更改.
将 Action Bar 颜色稍微加深, 改为落网网页版的背景色 #dddddd
采用标准的 Drawer Hamburger
将原 Logo 的圆形底座去除, 拿出天鹅作为 Logo
放大正在播放信息的专辑图片, 加入曲名, 艺人名以及播放状态指示
采用标准 Android 卡片
分离期刊号与期刊名, 期刊名改为落网品牌色 #990000
将评论与收藏数纵向放置, 颜色改为落网品牌色
加入 Contextual Overflow, 内含直接播放选项
采用 Translucent Navigation Bar
2. 导航 (Drawer)
 
落网原先采用了撤去式 Drawer, 但是偌大的空间里只放了个人, 音乐, 收藏和设置四个项目, 显得空荡. 我保留了原先 Drawer 中项目的顺序, 留出了以后将会加入的播放器的入口.
采用 Google 官方 Drawer, 并让 Action Bar 上标题位置显示落网的名字
把帮助和反馈拉到 Drawer 中
将 Slogan 改为了落网品牌色
微调个人资料显示风格 (Play Store 风格)
给 Drawer 背景加入三段分隔颜色
3. 期刊分类
 
原先的期刊分类给我一种索然无味的感觉, 如果仅仅是现实分类的名称文字的话完全没必要用 Grid List 啊&#8230; 于是我就做了一点大胆的尝试.
采用标准 Android 卡片
将每个分类加入对应的描述图片
(分类的图上有好多彩蛋&#8230;)
4. 专题详情
 
详情页做得稍微大胆了一些, 主要是因为我觉得这个页面的布局太适合 Translucent 和 Multiplexed Action Bar 了.
将标题和期刊号放进 Action Bar 的标题处, 顶替原先并不重要的曲数信息
采用 Multiplexed Action Bar 和 Translucent Status Bar (卷动之后 Overflow 和播放按钮进入 Tabs 层)
加入标签信息
将播放按钮改成落网品牌色底座 + 白色图形
将评论, 收藏和分享放入 Action Overflow 以节省纵向空间
曲目列表专辑封面放大, 字号放大
5. 播放器
 
其实我挺搞不懂的, 为什么其他界面都是亮色调, 唯独播放浮窗是暗色调呢? 所以我就把它改成了亮色调&#8230;
采用亮色调
曲名改为品牌色, 滚动显示
更多按钮改用 Overflow 样式
播放控制按钮改用 Android 标准样式, 并覆盖专辑封面颜色 (这个似乎很流行的样子)
播放进度控制采用标准 Android 进度条 + 把手
浮窗整体下移
其实我还做了另一个版本的播放器:

试着采用右侧 Drawer 作为播放器, 因为比起右上角播放状态按钮, Drawer 可以从右侧边缘直接唤出, 对大屏操作更为友好, 纵向空间充足而可以直接展开所有操作. 改动太明显了我就不说了 (其实只是偷懒而已). 有个需要强调的地方就是, 在制作 Drawer 里需要拖动的控件时, 请务必屏蔽 Drawer 的滑动关闭手势.
6. 评论
 
标题栏加入期刊标题
写评论按钮移至底部, 以 Quick Return 样式呈现
加大字号, 加大行距, 规范边距
加强对比度
将用户名改为品牌色
将时间与赞统一放置于用户名右侧
7. 设置

我不太明白为什么在设置里会突然出现一个 iOS 6 风格的开关&#8230;
移除重复的个人信息入口
将开关改为选框
采用标准 Android 列表分类
评分已经在 Drawer 里了, 所以这里就不需要了
总结
重设计到这里就差不多结束了. 播放器界面由于原应用里未完成, 我就没做. 自从完成了 Nexus 4 Mock Up 工具之后, 做这样的重设计就变得轻松愉悦&#8230; 果然是工欲善其事必先利其器嘛. 落网方面的人态度也很友好, 不知道什么时候能看到他们改进的成果~
另外, 这次我没做图标重设计.
例行的对比图:

主界面

Drawer

分类

专辑详情

播放器浮窗

播放器 Drawer

评论页


设置页
&nbsp;
最后感谢刘文慧将落网推荐给我~
</content>
</item>
<item>
<title>Google Camera 初体验</title>
<link>http://www.phonekr.com/google-camera/</link>
<description>就在不久之前, Android 4.4 上的自带相机更新为了 Google Camera. 这个更新是个从图标到体验的从内而外的大更新.</description>
<content>就在不久之前, Android 4.4 上的自带相机更新为了 Google Camera. 这个更新是个从图标到体验的从内而外的大更新.
首先新的 Google Camera 肯定不能叫做原生相机了, 我打赌它不会被包含在 AOSP 里, 应该变成了像 Google Keyboard, Google Calendar 这样的东西.
新的相机图标和之前 Android Police 泄漏的图标相距甚远, 而 Google 没有理由在短时间内多次替换一个应用的图标. 不过新图标比起旧图标确实略显扁平.
拍照体验这部分比较个人. 我觉得新 Google Camera 比老相机 体验要差. 我非常喜欢老相机的扇形菜单, 结果 Google Camera 里去除了, 直接打回最普通的点按式菜单, 我很不高兴. 左侧隐藏的模式切换菜单对于某些智商不够的用户而言恐怕是一辈子都不会发现该怎么调出的.

不过实话说来我很喜欢这个模式切换菜单, 这比老相机的模式切换要好看一些, 不过老相机更直观. 我也很喜欢选定一个模式之后的切换动画 (圆形扩散, 背景模糊). 一些原本只要滑动两次就能进入的设置被挪到了专门的设置菜单里. 而且设置菜单居然是 Holo Light 的&#8230; 有点诡异啊.
曝光补偿居然变成了默认隐藏, 需要到设置里开启手动调整之后才会出现. 拍照界面下屏幕底部一整块灰色区域都是快门按钮 (不过我也很好奇为什么 Google 不在拍照界面进入 Immersive Mode). 至于 Photo Sphere, 和 Panorama, 和老版本基本上可以说是大同小异.
和 4.4 原生相机一样, Google Camera 自带图库功能, 从拍照界面左划进入. 图库的操作和之前几乎没有区别, 上下滑动依然可以删除照片.

在 (且仅在) 这里可以调整之前拍的后期模糊照片. Google Camera 提供了焦点选择和模糊力度调整. 效果还不错.
这是我刚刚拍的后期模糊照片:
这是最大模糊力度的. 效果很梦幻, 我很喜欢 (但其实很不准确).
这是默认模糊力度的. 可以发现花瓶边缘有一点后期处理的痕迹. 不过我觉得已经比 HTC M8 的后期处理效果好多了.
另外, 后期模糊的照片可以进行再调整, 应该是保存了类似 RAW 的原始数据文件 (在 DCIM 文件夹中只有处理完成的图片).
耗电十分感人. 我仅仅用它拍了三张照片 + 两次后期模糊调整, 就变成这副模样了. 而且手机的温度和玩了半小时极品飞车有得一拼, 不知道是不是我的个别情况 (但是我这可是 Android 4.4 原生 Nexus 4 啊&#8230;).
看看好像也没什么好多说的了. 总之我挺喜欢 Google Camera 的新功能, 但是对去掉了原先的扇形菜单表示不满.
下载地址: Google Camera
</content>
</item>
<item>
<title>Android 弹出窗口与对话框 UI 设计</title>
<link>http://www.phonekr.com/android-popup-and-dialog-ui/</link>
<description>随着时代的进步, 各式各样的新式对话框开始出现在 Android 上. </description>
<content>本文译自 Tim Green 在 Medium 上的博客里发的文章 Android Popup &amp; Dialog UI. 英文能力过关的同学可以跳过我的渣翻译直接看原文了.
当 Dropbox 发布了他们的 Mailbox for Android 的时候我看到了一些截图, 由此我想起了一些我从一月起就在收集的一些截图. 在 KitKat 和其他第三方应用中, UI 设计已经有了长足的进步, 其中的一点就是弹出窗口对话框 UI 的改进.
 
左图: Android 自带的日期选择弹窗; 右图: Android 自带的时间选择弹窗.

左图: Android 日历中的重复选择; 右图: Chrome 中的打印.
干净简洁的布局与有趣儿又引人注目的交互让操作变得轻松而愉快, 尤其是那在时间选择器中出现的双环.
同样的, 也有很多人试图在自己的应用中给他们的弹窗添加朴素而符合自己品牌形象的特征.

从左至右: Mailbox 的延迟对话框; Dropbox 的路径选择窗; Runtastic 的删除记录的绘画框; Sol Calendar 的定时框.

从左至右: Southern Rail 购买确认窗口, Airbnb 日期选择窗口, CloudMagic 欢迎对话框, Noom 总结窗.
就算是在这些临时窗口中, 也有一些很简单但是优美的设计能够让用户不因为看到了一个 Holo Theme 的对话框而觉得&#8221;我怎么一下子来到了另一个应用中?&#8221; 在我看来, Sol Calendar 和 Noom 是所有应用里做得很好的两个应用.
我还注意到一种趋势就是让弹窗从屏幕底部浮现, 并且占满整个屏幕的宽度. 虽然这比起前面那些标准的对话框来说并不是什么很大的改变但是却让这些对话框看起来显得时髦而利落.

我相信随着 Android 版本的迭代, 我们会看到越来越多的应用采用这种从屏幕底部滑入的对话框.
</content>
</item>
<item>
<title>小米移动的三驾马车</title>
<link>http://www.phonekr.com/mi-troika/</link>
<description>[三驾马车]  所谓三驾马车是一种用三匹马并列牵引的运载工具, 通常是带有滑撬的雪车. 但也指装有车轮的马车. 在匈牙利和俄国, 由服装华丽的车夫驾驭的三驾马车, 一度被认为是崇高地位的象征. </description>
<content>
在两年以前, 我也曾经是一个&#8221;发烧友&#8221; —— 一个最疯狂时一天刷四五次机, 两天不刷机心里就不会舒服的人. 我也曾经是 MIUI 的老用户, 只是在 Android 进入了 4.0 时代之后我就不再刷 MIUI 了. 至于原因, 后文会提到. 
但即使疯狂如我, 在 Android 已经发展到 4.4, 各厂旗舰纷纷踏上四核大道的今天, 也已经突破了连续三个月使用原生系统 (Nexus 4, Android 4.4, Rooted + ART) 不刷机的记录. 就在我已经&#8221;原生大法好, 退刷保平安&#8221;的这个时候, 小米推出了他们号称&#8221;不用刷机的 MIUI&#8221;的小米系统. 既然可以不刷机 (言下之意: 可以不用中断我的不刷机记录了, 耶!), 而且我又已经很久不用 MIUI 了, 对他们现在是什么样有点儿好奇心, 于是我便下了一个&#8230; 
当然, 今天我并不打算在这里讨论小米系统本身 (关于我对小米系统的看法可以移步我的微博, 到时候估计会专门写一篇来黑), 而是来浅谈一下小米系统的企图. 尽管我很想说说它的战略地位, 但怎奈我不是小米的人我也说不清楚. 文章里的事件大多凭印象, 如有错漏及不妥请不吝指出. 想看我黑小米的同学们可以 Ctrl + W 了&#8230;

MIUI 的困局
MIUI, 是小米公司的生存和立足之本. 在前 4.0 时代, 小米靠着 MIUI 拿下了第一批&#8221;发烧友 (或许我该说, &#8220;刷友&#8221;?)&#8221;, 建立了自己的用户基础. MIUI 能够在大部分主流机型上提供相对完整的米系体验. 由于 Rigo Design 出色的设计 (MIUI V5) 以及小米团队对本地化正确的理解, MIUI 取得了极好的口碑.
尽管 MIUI 为小米公司掘出了第一桶金, MIUI 的适配成本却居高不下. MIUI 一直走热门手机官方适配, 其他手机社区大神移植维护路线, 在 Android 4.0 之前, 由于那时的 MIUI 仍然是基于 CyanogenMod, 开发和移植难度并不会很高, 稳定程度与 bug 都可以接受. 进入 Android 4.0 时代之后, MIUI 转向原生开发路线, 导致官方适配机型维护成本激增且没有原厂 Android 4.0 的机型都不能升级至官方 MIUI V4, 而层出不穷的 Bug 也开始使很多非官方支持机型 (与很多官方支持机型) 的 MIUI 用户感到困扰. 而且在这时可以很明显的发现, 官方支持机型的增加显著放慢了, 有很多&#8221;准热门机型&#8221;都没有官方支持. 很快, 小米意识到这个问题并把 MIUI 的架构改成 PatchROM, 然后由自己或合作开发组做基于原厂固件的适配. 但是即使如此, MIUI 开发成本和实际效果之间仍然没能取得很好的平衡. 这个时候, 一些原 MIUI 用户选择了离去.
彼时 MIUI 的刷机动力 —— 优化, &#8220;发烧&#8221;与美化, 在 Android 4.X 时代逐渐显得疲乏. 在 Android 4.X 时代以前, Android 手机体验较差, UI 也嫌丑陋. 在这样的条件下, 用户选择刷如 MIUI 一方面是看中了 MIUI 具有很强的本土化优势, 另一方面基于 CyanogenMod 往往能带来比原厂 ROM 更加流畅的体验, 而 MIUI 的特色主题功能又能一改 Android 2.X 的丑陋面貌. 但是从 4.0 开始, Android Design 规范出现, Android 有了一套自己的成体系的整体设计风格, 并且系统 UI 与 Android Design 配合完美, 因此部分用户抛弃了 MIUI 投入了 AOSP 和 CM 等风格接近原生的 ROM 的怀抱中. 在 Android 4.1 之后, Project Butter 的加入又极大改善了 Android 长久以来被人诟病的卡顿迟缓, 当其中一些为了性能而刷上 MIUI 的用户发现原生 Android 4.1 比 MIUI V4 (Android 4.0) 流畅时, 这批用户也选择了离开 MIUI.
很显然, 曾经风光一时的 MIUI 在今天已经显出了疲态.
小米手机的陪衬
当越来越多的用户选择离开 MIUI 的时候, 小米公司自然不能坐视不理. 在用户､ 口碑基础尚存, 而在适配上却呈现疲态的形势下, 为了保障 MIUI 所承载的服务盈利模式, 小米以硬件来扩大利润､ 增强用户粘性并且进一步变革中国 Android 软硬件生态的扩张势在必行. 而他们的杀手锏就是小米手机. 1999 的超低价格, 顶级配置, &#8220;为发烧而生&#8221;&#8230; 各种宣传, 一方面吸引 MIUI 老用户购入小米手机, 另一方面也开拓了新市场 —— 很多大学生觊觎小米手机的超高性价比, 成为了小米的用户.
但是, 尽管小米手机提供了最完整的小米系体验, 对于普通用户而言, 获取小米手机的成本反而是三者中最高的. 即使在今天, 购买红米手机依然很难一次成功, 身边很多同学朋友都因为无法直接在官网上抢到而选择在淘宝等渠道加价购买. 在这里不讨论小米手机是否玩期货和饥饿营销, 但这显然是砸了小米手机&#8221;高性价比&#8221;的招牌. 而在这个时间点上, 小米也转移了宣传重点, 开始不断宣传小米手机的配置高, 跑分高, 性价比高, 减少了提到 MIUI 中人性化本地化改进的次数 —— 实际上在我印象中, 自从小米手机出现之后, 我就再没看到小米官方那么高调地做 MIUI 人性化功能的宣传了.
而实际上, 在 MIUI V5 时代, 小米手机的配置与使用体验并不比刷了官方支持的 MIUI 的其他厂商高端机型要好. 这点可以体现在相机/屏幕/其他各种硬件素质等很多地方 —— 毕竟 1999 就是 1999, 没办法和那些动辄 3000､ 4000 的高端机比. 而实际上, 小米手机似乎也从来没打算做高端, 从小米手机 1 开始就是打性价比牌, 走&#8221;屌丝&#8221;路线.
在这台三驾马车中, 小米手机从来都只是从马 (Side Horses), 没有成为主力过.
小米系统的渗透
雷军曾经说过, 小米的铁人三项是软件, 硬件与互联网服务, 而这三项里最有价值 (增长潜力, 用户黏性) 的其实还是互联网服务 —— 说白了, 就是内容. 不管是 MIUI 还是小米手机, 最高目的都是将用户导向小米的互联网服务 (硬件 + 软件 + 服务比软件 + 服务赚钱). 
而小米系统就是那个能够以最低的成本普及小米的互联网服务的选择. 
还有一个不能忽视的地方: 在互联网服务能够直接带来收益的付费项目 —— 主题, 应用, 音乐, 书: 这些服务都有着由其它传统同类网站已经培养多时, 有消费习惯的用户, 尤其是电子书和主题. 而这些用户有消费在线内容的需求､ 习惯和经历 —— 中, 他们的用户往往都是高端用户 —— 只有高端用户才能更好的意识到内容的价值, 并愿意为内容付费. 通常情况下, 我们很难在低端用户的低端手机上看到付费内容. 而如前文铺垫, 可以发现, MIUI 的中高端用户其实是在不断流失的. 现今三星等国际大厂及其他国产厂商的 ROM/UI 逐渐进步, 有的厂商甚至搞出了不输于 MIUI 的体验和优化, 而手机硬件的不断发展和 Android 4.1+ 的普及也使得新款中高端手机能够轻松推动这些 ROM/UI, 因为优化带来的刷机动力逐渐消失, 即 MIUI 的最有力传播途径 (刷机动力) 已经消失; 而小米手机又主打中低端, 对高端用户构不成吸引力. 那么小米应该依靠什么来重新打入中高端用户这么一片市场? 
重点依然是 MIUI. 如果能让 MIUI 更方便的渗透到中高端用户中, 小米互联网服务的用户就会随之增多. 在此之前, 小米曾经有一次不甚成功的尝试, 那就是小米桌面 + 百变锁屏 (卖主题). 这次尝试的中心思想其实就是分离核心应用以便推广, 实质为简化版的 MIUI. 而这个思路, 是正确的思路. 
观察小米系统的安装包, 你会发现他的文件名是 &#8220;MiuiLite&#8220;, 而安装之后显示的英文名则是&#8221;MIUI Express&#8220;. 这两个名字很好的概括了小米系统的性质, 那就是精简版的 MIUI, 一个即装即用的 MIUI. 这个 MIUI 比 ROM 本体小很多, 在一个应用里直接集成了大部分系统核心应用. 而小米系统作为一个 Android 应用, 适配不同机型的成本要远远低于 MIUI ROM. 以应用的形式出现的另一个好处就是那些刷机困难/无法刷机的行货手机也瞬间从 NPC 变成了可攻略对象, 瞬间又扩展了一批可能用户. 而官网上得知, 首批推荐机型为 HTC One, Samsung Galaxy Note III, Sony Xperia Z Ultra, 都是高端大屏手机, 而小米系统虽然相对固件而言体积较小, 但是这毕竟是在系统之上运行的一整套软件, 对内存和处理器的要求都很高, 而且有大量服务常驻后台. 能符合流畅运行小米系统条件的设备以及上文提到的国行/中国运营商定制手机的用户, 消费能力不会低. 可以看出小米从&#8221;发烧友&#8221;向真正准高端用户进攻的尝试. 由此, 小米系统的高端路线可见一斑.
这一次, 小米重新祭出了改善体验的大招. 在早先的造势宣传中, 不断强调系统应用体验的重要性, 主打宣传对桌面 (主题), 拨号/联系人, 短信和云服务这些一部手机基础功能的改善. 这一瞬间, 小米似乎又回到了 MIUI 刚刚起步时的原点 —— 重视本土化､ 人性化的操作, 优秀的设计 (是不是优秀这个可以再议), 重新把目标瞄向了对内容有消费能力与意愿的中高端用户, 和 (也许和前面重合度很高的) 不愿意/懒得/不会刷机的普通用户, 更好的传播 MIUI 与小米服务. 而 MIUI 和小米系统的用户都是小米生态系统 (商店应用/主题, 音乐, 视频内容, 书等小米系内容) 内的一员.
&nbsp;
接过了来自由于受竞争者和用户需求减弱冲击而动力疲软的 MIUI 的接力棒, 小米系统正式成为小米移动三驾马车的主马. 尽管小米手机被国内传统厂商借鉴模式并在渠道和宣传上打压而且一时无法摆脱低端印象, 但是小米系统在准高端用户领域做出了积极的尝试. 由此, 小米通过小米系统, MIUI 和小米手机这台三驾马车, 进一步扩展了自身互联网服务的受众群体, 高低搭配远近结合, 完成了小米移动的中盘布局, 堪称完美的妙着. 
</content>
</item>
<item>
<title>A New Journey</title>
<link>http://www.phonekr.com/a-new-journey/</link>
<description>大家好</description>
<content>
大家好。
真对不起用了这么俗套的开场，但是想必我们手中正敲击的键盘也不会是您走在前头的时候落下的，就这么着吧。
但是我们想做真正被你们需要的事。
有几位前辈都这么说过：“大家都能做新闻，要你们干嘛？”。有道理，大家获取新闻的途径太多了，永远没有一个地方可以保证自己的消息最及时。
但是做新闻并不是件容易的事。正因为不容易，我们希望替屏幕那头的您，找来每个领域我们认为最专业、认知最透彻的人。我们希望，大家可以不再需要每天带着焦虑症刷新各类科技微博、网站去追踪每一分每一秒可能发生的事，更不希望在充斥小道和捏造的环境里每个人都满腹猜疑，从而自己劳神去挖掘信息的源头、去关注更多的消息来源、去面对更多的未知和烦躁。
所以啊，我们会以自己为担保，挑选每天最有价值、最可信的新闻，在您上班路上以及睡前整理出来。就像喝牛奶或者刷牙一样，轻松而平常。
这么一群有热情的人每天只干两次活儿是闲不下来的。我们会在剩余的时间里，尝试用最客观的态度、最冷静的文法、最精炼的文字，去解读近期的热门话题或者传言，去剖析每一个争论背后我们认为的答案。
顺带一提，我们叫 TingTalk。
这是我曾经想要开的咖啡厅的名字。Ting 可以是“听”的拼音，也是拟声。清脆、干净，不拖沓。就像我曾经很喜欢一段咖啡厅环境音里的那声服务铃，让人觉得一切都井井有条，一切都在运转当中，一切都如往常那样让人心安。优雅、宁静。
台北有个地方叫“温罗汀”，它“有着华人世界少见密度最高的书店群，以及重要文人故居，加上附近台湾大学青年学子所带进的小众风潮——这一区域不只有书香、咖啡香，还有独立自有的人文精神。”。
这是“汀”的取材，而“说”，则是单纯的，对每一个人而言最友好的传递方式。
很感谢你看到这里，也很高兴认识你。
文: TingTalk
</content>
</item>
<item>
<title>异闻录 21：高难度暴力杀人事件</title>
<link>http://www.phonekr.com/tensei-21/</link>
<description>2.7% 自周二发布盈利指引以来，三星的股价已经累计下跌超过了2.7% 74% 调查显示，实体店购物依然是全美74%的少女和53%的少年所首选的购物方式，一年前，该比重分别为82%和80% 400 比特币比价跌至400美元以下，自去年达到最高峰之后已经持续下跌超过3个月 100000 Foobar 在 Kickstarter 推出移动计划，筹款额达到10万、20万及30万美元时即推出 iOS、Android 和 Windows Phone版 437000 联合国公布的数据显示，2012年全球共有近44万人被杀 Mac OS 唯美向信息提示 「进击的巨人」入侵现实 very confident 正在中国进行访问的澳大利亚总理阿博特表示「非常确信」最近捕获的信号来自于 MH... 速来围观 &#187;</description>
<content>
2.7%
自周二发布盈利指引以来，三星的股价已经累计下跌超过了2.7%

74%
调查显示，实体店购物依然是全美74%的少女和53%的少年所首选的购物方式，一年前，该比重分别为82%和80%

400
比特币比价跌至400美元以下，自去年达到最高峰之后已经持续下跌超过3个月
100000
Foobar 在 Kickstarter 推出移动计划，筹款额达到10万、20万及30万美元时即推出 iOS、Android 和 Windows Phone版
437000
联合国公布的数据显示，2012年全球共有近44万人被杀

Mac OS 唯美向信息提示

「进击的巨人」入侵现实

very confident
正在中国进行访问的澳大利亚总理阿博特表示「非常确信」最近捕获的信号来自于 MH 370航班的黑匣子

我们正在解决服务器的迁移问题以保证服务器关闭之后大家还能玩这些游戏。（We&#8217;re working on transitioning those games after the shut down so you&#8217;ll still be able to play them.）
EA 表示，即使 GameSpy 关停多人游戏服务，依然会继续保证对 Battlefield 2等三个游戏的多人在线支持

（微软）需要把公司里的官僚主义机制一扫而光，把注意力集中下一波科技浪潮上。（Need for big clean out of bureaucracy and focus on next big tech wave.）
默多克表示「大数据」（metadata）可能就是未来科技发展的趋势

1，老板，你起开
法国议会今日通过法案允许雇工在下班以后拒收上司邮件
伟大、光荣、正确的法兰西万岁！
城防局职员凡尔纳用尽全身力气在众人的环伺下在白板上写下这句话，然后被警察带走了。
——不回邮件有错吗？
——没错，但是你不应该在德国人都到凯旋门了还无视紧急通知呀。

2，亚洲人民一张脸
西班牙电视节目盗用泰国 COS 场景并将其当作日本介绍
东京作为世界上最繁华的城市……诶，别看人家的路烂楼也破，这恰好证明了日本人民对文化传承的重视。
……
……诶？观众朋友们，大家看到了吗？瞧见日本人民与自然的相处是多么和谐，大象都可以旁若无人地在路上走来走去。
……
下面让我们采访这个漂亮的日本小姑娘吧……诶，小，小哥，这是一位小哥……
主持人的脸色憋得通红，擦了擦手上渗出的汗，继续说下去：
大家瞧，这位小哥说他花了好几十万泰铢做手术……诶，泰铢？！

3，一亿大劫案
黑客盗取韩国20万信用卡信息，并成功盗刷超过1.2亿韩元
1.2亿韩元折合约11.54万美元。
李总，我看你的这块表不一般呐。
诶，也就20万美元，不贵，不过是海南那边的小老弟送的，很有意义呀。
李夫人和来宾谈笑风生，就电力和地产问题进行了深入友好的交流。

4，平民的呐喊
由于邀请美前国务卿赖斯加入董事会，Dropbox 遭遇部分网民抵制

她小時候打过我大叔他小姨的三叔的哥哥的外甥；
她以前和小周谈过恋爱；
她级别比我高，月薪一万八；
上次我没有补请假条她批了我一顿；

小明把小红的缺点列了出来，心满意足地表示果然不能找她当女朋友，然后眼巴巴地看着小红挽着小王的胳膊经过。

5，高难度暴力杀人事件
一项研究显示，游戏的难度而非暴力内容可能才是导致玩家侵略性提升的原因
我练功发自真心都过不了！去死！
9岁的小明拼命地按着手柄，大骂「忍者龙剑传」。
一切都是屁，根本玩不下去，去死！
13岁的小明将「忍者蛙」使劲地摔在地上，脸憋得通红。
你是三岁小孩吗？去死！
15岁的小明将手柄扔到地上，愤懑地指着屏幕上的「黑暗之魂」大骂。
……
虽然这么不好玩，但俺感觉好好。去死吧。
说完这句话，27岁的小明将4寸长的匕首插进了要与他分手的小四身体中，笑了。

6，少年犯
日本三名中学生通过电话诈骗获利4.8亿日元
——哇，这么多钱欸，我们去买 PS4吧。
——笨蛋索青，买 Xbox One 不好，还能看电视！
——软粉死开啦，我要玩的是1080P 画质，你玩得了吗？
——我能玩 HALO，你行吗？
——你们别吵了，每样都买还不行。
——这是信仰！
……
最终，三名中学生因为购买游戏机发生内讧先后向警方举报同伙而被一网打尽。
</content>
</item>
<item>
<title>关于未来, 以及一些才不是怎么样都好呢的事情…</title>
<link>http://www.phonekr.com/about-my-near-future/</link>
<description>初次见面的读者, 初次见面. 好久不见的读者, 好久不见. 就让我在这里尽情的矫情一回吧. </description>
<content>
(Image credit: Gnosis)
初次见面的读者, 初次见面. 好久不见的读者, 好久不见. 不知道锋客网的新老读者对 NovaDNG 有什么样的了解? 也许你有关注他的微博, Google+ 或者 Twitter, 也许在知乎上看过他的回答. 也许在你的眼中他是一个 Android Design 狂信者, 也许是一个 Android Design 布道师, 也许是个自高自大的人, 也许是个偏执狂&#8230;
如果你对他稍微更了解一些的话, 你会知道他是个大学生, 曾经在美国留学, 那一年里他整天泡在图书馆里, 而自从去年六月回到中国之后行踪就飘忽不定, 不知道到底在干些什么. 锋客网的文章也总是有一搭没一搭的写着, 有时候人品爆发连续两三天每天一篇, 有时候文思枯竭一个月没一篇&#8230;
&nbsp;
不过这些都不再重要了.
五月起, NovaDNG 就会正式加入一个新团队, 其名为 Q-Supreme (中文名叫快宜信息技术)(嗯哼, 这个名字还是 NovaDNG 自己起的呢~). 觉得这个名字很陌生? 当然啦, 因为这是一个新生的团队. 所以你看, 这个名字连链接都没有. 但是不要小看了这个团队. 这个团队目前由五名成员组成, 而随便拉出两个人来, 你会发现他们都是大神. 比如 —— 心之所在和作者南岭. 而这个公司就是在快图浏览的基础之上建立起来的.
稍等一下&#8230; NovaDNG 不应该是个大学生吗? 怎么突然就去工作了? 
其实在三月中旬的时候, 南岭大叔找上了 NovaDNG, 把他的想法告诉了 NovaDNG, 并请他去上海和他们促膝详谈. NovaDNG 便欣然去了上海. 在上海, NovaDNG 和南岭大叔一番畅谈. 他发现, 南岭大叔除了非常低调之外, 三观正, 技术硬, 人品也非常好, 总之趣味相投, 惺惺相惜. 之后, 他便决定加入这个新生的公司. 
加入了公司之后呢? 嗯, 也许你们会有更多的机会在公众场合看到 NovaDNG 本人 —— 他正在计划着去厦门, 上海, 南京, 广州的 GDG 做 Android Design 宣讲. 同时, 这个计划得到了南岭大叔的支持. 另外读者们也可以放心, NovaDNG 依然会继续耕耘锋客网, 将自己在工作中的心得体会整理成文章发布在这里.
NovaDNG 自然不会中断他的学习. 工作的单位离复旦大学新闻学院/艺术学院非常近, 离同济大学不过四五站地铁, 而地铁十号线能直达上海市图书馆. Q-Supreme 是弹性工作时间, 而 NovaDNG 在复旦和同济都有朋友和同学&#8230; 所以, NovaDNG 选择在工作之余和周末在复旦蹭课, 或者就像还在美国的时候一样窝在图书馆里看书&#8230; (啊, 总感觉似乎是在给新团队做广告的样子呢&#8230;) 当然, 他也会和以前一样不断的从互联网的海洋中汲取知识. 所以你应该放心, 虽然人不在学校, 但是下班之后的 NovaDNG 依然把自己看作一个学生, 希望能够学到更多的东西. 
&nbsp;
其实说了这么多, NovaDNG 的心里话是: 就要第一次正式参加工作了, 好紧张&#8230;
在 NovaDNG 的身边, 大家都规规矩矩的上着大学, 在大学里或者读着书, 或者开着小差, 或者玩着游戏, 或者谈着恋爱&#8230; 在此之前, NovaDNG 都在专注的做着他认为正确的事情, 丝毫不在意旁人的目光. 但是这次, 在这个时间, 他突然停了下来, 环顾四周. NovaDNG 发现自己是孤独的. 身边的同龄人里只有他一个人选择了在这个时间离开学校进入工作, 只有他一个人. 而去上海工作意味着再一次离开他熟悉的城市与亲人, 来到一个新环境. 而和美国不同, 尽管上海的人们依然讲着普通话, 他却不能像在大学时那样, 把自己窝在图书馆离和网络上试图避免在现实中和人接触; 他必须面对除了同事以外的各种各样的人, 站上 GDG 和其他活动的演讲台, 拼尽全力实现自己的理想, 而不是像在大学里一样只是把理想当作天边的星星.
他其实非常害怕寂寞. 锋客这个团队就是因为他对寂寞的恐惧而组建的. 他天真地认为, 聚集起一些志同道合的同龄人, 寂寞就会离他而去. 而事实上, 尽管他曾试图尽力维护这个团队, 但这个团队到现在却免不了七零八落. 锋客对于 NovaDNG 来说是一个心灵的藏身处, 这个藏身处曾经热闹过, 但是现在, 这里依然是寂寞的. 他假装自己经习惯了这样的寂寞, 但是现在当他停下来环顾四周时, 却又依然被这种感觉击倒.
NovaDNG 只在大学里待了一年. 这带来的后果就是, 他可是相当的 &#8220;Too young, too simple, sometimes naïve.&#8221; 也许有时候, 保持着天真未尝是件坏事, 但是对于刚刚进入这个世界的他而言, 这是一个致命的缺点. 也许他心里已经意识到了这个问题, 怎奈&#8221;天真&#8221;这样的属性也不是想要摆脱便能摆脱得了的. 想到这些, 他只觉得冷汗涔涔, 倍感压力. 
而在紧张的同时, 他的内心又充满了对未来的向往.
上海是一个大舞台. 汇聚了各种各样的角色, NovaDNG 在网上认识的很多高人都在上海. 上海还有百度 ISUX, 阿里, 新蛋.. 和其他的令人向往的地方. 就像站在大观园里的刘姥姥一样, NovaDNG 的心情非常复杂. 新的环境, 新的公司, 新的朋友, 新的同事&#8230; 就像刚刚去美国的时候一样, 一切都会是新的. 而且和大学不一样, 这一次, 他只能靠自己了. 一想到终于, 他能够用自己的力量完成自己的目标, 如何让他不觉得激动兴奋?
早些时候 NovaDNG 对媒体行业充满了憧憬, 成为记者是他一直以来的梦想. 因此你也许会注意到, 锋客网上时常会发一些带着采访报道性质的文章. 但是在去年的时候, 他在求职成为媒体记者的道路上遭遇了挫败. 之后他也发现, 几个进了媒体行业的才华横溢的朋友们, 待遇都不尽如人意. 于是他便将更多的时间花在对 UI 与 UX 的研究学习上. 直到今天. 但即使在今天, 他依然对新闻抱有热忱. (也就是说, 你以后也会在锋客网看到采访报道性质的文章) 而对媒体的兴趣也造就了他的产品观. 尽管还没做过产品经理, 他的好朋友龚叔曾经评价他&#8221;会是个不错的产品经理&#8221;. 这次来到新团队, 他也会第一次尝试扮演产品经理这个角色.  希望他能在这条路上顺利的走下去吧. 毕竟, 他可同时是产品经理和 UI/UXD 呢.
&nbsp;
NovaDNG 依然将工作之余的自己看作一个学生. 进了新公司之后, 他依然怀有自己的小梦想, 但是会全力为了实现目标而奋斗. 也许他会变, 但是请相信他会朝着好的方向变化. 他依然会在锋客网写文章, 频率也许没那么高, 但是想想, 他已经在锋客网写作三年 (算上极智的话) 了, 不会那么轻易的放弃的. 而且, 南岭大叔保证, 下班之后的时间是自由的 —— 这也意味着, 他依然会做一些 Redesign 尝试, 或者帮一些小团队/个人开发者设计/修改 UI. 感谢南岭大叔.
对了, NovaDNG 葫芦里依然有点儿药没有卖完, 敬请期待~
&nbsp;
就让我在这里尽情的矫情一回吧.
</content>
</item>
<item>
<title>异闻录 20：我们中出了个叛徒</title>
<link>http://www.phonekr.com/tensei-20/</link>
<description>12岁的巴萨球迷小明不听众人的解释，当场嚎啕大哭起来，透过指缝看到周围的人全都无奈而无动于衷，于是哭得更厉害了。</description>
<content>

三星的律师翻来覆去说的全都是些无关紧要、有意误导甚至不实的指控，这些无疑已经让法官苹果公司造成了先入为主的影响。（Samsung’s counsel repeatedly made irrelevant, misleading, and even untrue statements that have undoubtedly caused the jury to form impressions that are highly prejudicial to Apple.）
苹果律师专利诉讼庭上直斥三星

「权力游戏」让死亡更加精彩

继「神海」系列总监跳槽腾讯旗下工作室之后，该游戏编剧和创意总监 Amy Hennig 现在加入了 EA 的 Start Wars游戏

游戏「龙腾世纪：审判」释出超逼真级别游戏截屏图

instagram 已经成为全美最流行的移动社交工具



22
Google 宣布其互联网热气球项目中的一只已经在22天内完成了500000公里的环球航行


 
12000000
微软 Office for iPad 上架一周以来下载量超过了1200万



2046
联邦交易委员会自2008年至今累计接到消费者两千多件针对 Yelp 的投诉，受此消息影响，Yelp 股价大跌超过6%



1400000
Google 付出140万美元的代价以了结与意大利人权组织在街景隐私问题上的纠纷


 
1，吃豆人，吃人
华盛顿大学开展了一项通过「吃豆人」游戏来实现电脑之间相互学习的项目
你会「吃豆人」吗？
Mike 用生硬的声音问抓获的反抗军战士，对方僵硬地摇了摇头。
可惜，只有做活体电池的用处了。
Mike 将尖锥刺入俘虏的颈上，拼命地吸取着他身体中的化合物质。
远处，满目疮痍战火轰隆，人类无论如何也不会想到一个小小的游戏竟然让电脑的智能进化达到无视三大定律的地步，2056年，「天网」崛起了。
一切，都只是因为一个叫「吃豆人」的游戏而已。


 
2，Glass 牌 Google Glass
Google 为 Glass 申请商标遭到美国专利局驳回
——好大好壮观诶。
——能容纳十万人呢。
——噢，那我们什么时候去诺坎普？
——你不是正在参观吗？
——诶？你不是说这是「新球场」吗？你在逗我？
12岁的巴萨球迷小明不听众人的解释，当场嚎啕大哭起来，透过指缝看到周围的人全都无奈而无动于衷，于是哭得更厉害了。


 
3，对您造成的不便我们深感歉意
中国比特币交易平台 FXBTC 发出紧急通知宣布不再接受充值和提现
总而言之，必须这样，才能促进比特币的高潮。犯着急性病的同志们不切当地看大了比特币的主观力量，而看小了反比特币力量。这种估量，多半是从主观主义出发。其结果，无疑地是要走上盲动主义的道路。
说完之后，老李请群情激愤的众人到东大街吃了一顿火锅，告诫大家继续用发展的眼光看问题，要坚信道路是曲折前途是光明的。
吃完饭后，老李将公司账户上的钱全部转走，连夜举家迁移。


 
4，漫游费战争
欧洲议会通过决议将在2016年前取消欧盟国家之间的通信漫游费以保护「互联网中立」
2016年，在乌克兰宣布加入欧盟之后，入侵乌克兰的俄罗斯军队一位下士在接受 CNN 采访时表示：
解决俄乌两国人民高昂的通信漫游费用问题，是我们此次军事行动的重要目的之一。
与此同时，随菲律宾海军的各国记者终于因为无法承担中国移动高昂的漫游费而最终宣布退出仁爱礁抢滩报道活动。


 
5，爱情正确论
之前发表反同言论的 Mozilla CEO 最终不得不辞职应付外界的争议
我反对同性恋！
Jack 说完这句话后，第二天被当地人权组织纠集同性恋群体堵在家门口进行示威，于是辞职。
我支持同性恋！
Jack 说完这句话，台下的阿拉伯群众顿时激动起来，纷纷摩拳擦掌表示要揍得他满地伤。
我不支持恋爱结婚！
Jack 说完这句话，底下饱受少子化问题困扰的日本听众纷纷露出疑惑和难堪的表情。
当夜，Jack 愤慨自杀，留下遗言：
爱情是狗娘！


 
6，总统，药不能停 II
白宫方面针对三星堆奥巴马合影的商业利用做出回应
白宫反对任何将总统形象用作商业目的的行为（As a rule the White House objects to attempts to use the president&#8217;s likeness for commercial purposes.）
——白宫发言人
哎，可惜了这么多年来我一直与群众吃汉堡、打篮球、洗牙的努力，如果大家都看不到的话，这个总统当着也太无趣了！
奥巴马一腔委屈地在电话上和对方抱怨。
看开开点，安啦……你们再去告诉林飞帆他们注意别演得太过火……当初我也是被大家叫做小马哥的，可是现在人老珠黄了，就叫人家马騜，哎。
马英九通过热线安慰着奥巴马，望着凯特格兰大道上的人潮，不禁露出得意的笑来。


 
7，我们中出了个叛徒
一位苹果产品知名博主出现微软 Build 2014上的 Azure 宣传推广视频中
Windows 7对 Windows 8说：
你这个叛徒，竟然背弃 Start 按钮！
iPhone 4S 对 iPhone 5说：
你这个叛徒，竟然背弃最完美的3.5寸屏幕尺寸！
iPhone 5s 对 iPhone 5c 说：
你这个叛徒，竟然用了塑料！
……
前诺基亚 CEO 现微软副总裁埃洛普看着台上意气风发的印度 CEO，不由暗地冷笑，掏出电话拨通：
诺基亚已死，微软亦不久矣，老库，一切尽入吾等彀中，天下英雄唯你我耳。

</content>
</item>
<item>
<title>异闻录 19：总统，药不能停</title>
<link>http://www.phonekr.com/tensei-19/</link>
<description>夜深人静时分，奥巴马悄悄给马英九打去电话： 我已经把我国的爱国情绪都煽动起来了，你那面怎么样？ 马英九轻快回道： 一切都在我计划中。</description>
<content>

Mayor DeBlasio
白宫新闻发言人将纽约市长 Bill de Blasio 拼错，引起外界讽刺

如果这个国家还有相信法律和人权的人在，那么运营商就必须执行法院的命令，取消对 Twitter 的封杀。（If there is anyone who believes there is rule of law and human rights in this country, TIB must execute the court verdict and lift the ban on Twitter.）
土耳其宪法法院宣布总理之前下达的 Twitter 封杀违宪


Twitter 将推出表情输入


微软将在 Windows Phone 8.1 中推出语音助手 Cortana



Yahoo 公共汽车被愤怒的群众堵在了汽车站



20
「最终幻想 VI」(Final Fantasy VI) 诞生至今已经整整 20 周年


1.12 亿
Kickstarter 在今年第一季度从约880000资助者手中筹得 1.12 亿美元，使得近 4500 个项目成功投产


 
1，爱国病
作为对俄罗斯在乌克兰问题山上的回应，NASA 从今天起开始停止与俄罗斯方面的联系
一个瘦长的农民问一个中尉：“你们连里有多少个日本鬼被打死了？”中尉回答：“在我排里一起作战的日裔士兵除了两个，全部牺牲了。”这个农民回答：“真他妈的可惜，没把那两个也打死。”
——「光荣与梦想」
夜深人静时分，奥巴马悄悄给马英九打去电话：
我已经把我国的爱国情绪都煽动起来了，你那面怎么样？
马英九轻快回道：
一切都在我计划中。


 
2，Let’s Start, AGAIN
「开始」按钮将在 Windows 8.1 的新版本中回归
——客官，你要啥你说，只要是你想要的我们都给！
——滚！
……
——客官，我给你说，你这个姿势不对哟，我给你介绍一种更赞的体位吧。
——滚！
库克和鲍尔默相遇，望着前任的足迹，相互苦笑一声，匆匆离去。


 
3，绿色爱情故事
「绿色和平」对 Amazon 数据中心在资源的使用进行了严厉的批评
宁要青山绿水，不要金山银山，Amazon 滚出去！
环保主义情侣小明和小红在反 Amazon 集会上相识并建立起深厚的革命友谊，三个月在 Amazon 迁走的当天举行了小小的婚礼。
……
物价天天涨，你一天不落家光搞去静坐，这日子还有法过？！
小红在民政局和小明办离婚手续的当天终于爆发，同日，在广大群众的强烈请求下，Amazon 最终重新迁回。


 
4，十年
Yahoo 宣称将加密服务信息以保障用户隐私安全
怀抱既然不能逗留
何不在离开的时候
一边享受，一边泪流
看到这条新闻，师涛和王小宁不由泫然欲泣。
他们花了整整一分钟进入装着 Windows XP 的电脑，打开360浏览器，用百度搜出 QQ 邮箱，给对方写了一份鼓励信，表示绝对不能在信息安全方面再出现隐患。


 
5，Windows 也是有自尊的
微软宣布9寸以下设备上的 Windows 8 及 Windows Phone 8.1 将实现免费授权
——我有 Office，办公利器一出，谁与争锋，啊哈哈哈！！！
iPad 不说话，自顾自地继续玩游戏，Android 友好地拿出漫画砸到 Windows 身上。
……
我可以玩「炉石传说」，你们行吗？
iPad 不说话，自顾自地玩 Threes，Android 友好地拿出 PSP 模拟器扔在 Windows 脸上。
……
我，我现在是免费的！
iPad 愣了一下，笑着走开了。
Android 继续友好地把 Windows 按在地上揍了一顿：
让你丫收我专利费，让你丫收我专利费。


 
6，总统，药不能停
奥巴马在不知情的情况下被三星利用成为其市场营销活动的一部分
嗯，这张还不错，下次应该注意笑的的时候嘴角弯曲最好保持在30°。
总统看到三星的 Twitter， 得意地抚摸着自己的下巴。
三分钟后，他接到了幕僚长的电话。
啥？我这算是被人利用了……三星也不会给我赞助……一点都没有？
奥巴马恍然大悟，不禁怒上心头，抓起电话拨通了号：
老马，还记得你以前说的那个药吗？吃了，腰不酸腿不疼脑筋也变清楚的那个，还有没有？


 
7，细仔互联网，愿做大哥否
日本最大的黑社会组织六代目山口组推出网站招募会员，以扭转成员不断减少的趋势
——芹泽，要毕业了呢。
——嗯。
——可我们之间还是没有分出胜负呢。
——噢。
——我还想和你再比一次，用最公平的方式。
——你们这些人真是麻烦，那就开始吧，
于是，芹泽和源治拿出 Windows 平板，开始比谁改装的舰娘更炸裂。


 
8，古巴危机
美国政府秘密策划一项类 Twitter 服务以发展反卡斯特罗力量试图颠覆古巴
在 ZunZuneo 计划曝光曝光后 13 天，古巴政府在联合国大会上表达了对美国的强烈谴责，美国当局表示不予置评。
2014 年 5 月，古巴在加勒比海地区海域试射中程导弹，引起美国政府强烈反弹，宣布将对古巴进行封锁和制裁。
6 月，奥巴马表示希望和卡斯特罗坐上谈判桌，用和平的方式解决两国之间的纠纷和争执，但古巴方面拒绝表态，同时与俄罗斯方面进行了秘密接触。
6 月 22 日，奥巴马在达拉斯举行和平演讲活动时遇刺身亡，凶手奥斯瓦尔德被当场逮捕，克里当日就任新总统，并宣布全国进入战争状态。
8 月，FBI 发布证据显示，奥斯瓦尔德与古巴政权私下有过接触。
8 月 14 日，奥斯瓦尔德在庭上被法警击毙，随后法警当场自杀身亡，随后，存放证据的档案室遭遇火灾。当日，普金呼吁美古两国保持克制，号召召开三国会谈。
8 月 15 日，克里发动对古巴报复式空袭，作为回应，俄罗斯驻军进入乌克兰，欧盟召开紧急会以，宣布对俄制裁，中国呼吁各国保持冷静。
8 月 16 日，美古战争正式爆发，美军在猪猡湾遭遇惨败，美军中央司令部情报显示，有不明国籍核潜艇游弋于西海岸。
9 月，美军占领古巴，俄罗斯攻陷乌克兰全境，两国在北京举行了亲切友好的会面，宣布和中国共同构建三国同盟维持世界和平，同年，欧盟彻底解体。

</content>
</item>
<item>
<title>异闻录 18：猴族危机</title>
<link>http://www.phonekr.com/tensei-18/</link>
<description>科技界的囧司徒，互联网圈的每日秀</description>
<content>
NovaDNG: 异闻录是一个全新的栏目, 每天晚上的大概这个时间, 胡桑会为我们带来轻松愉♂悦的当天科技新闻汇总. 至于你问我为什么突然新增加了这么个栏目&#8230; 啊哈哈, 佐佑理不知道呢~



它们会毁了那些孩子的灵魂，把他们引到黑暗面里去。 (They can destroy their souls and lead them to the dark side.) 
——波兰一位神父严厉批评了乐高玩具


它不可能从一家到另一家间传播得那么快，让那么多人在黑死病期间死掉。 (It cannot spread fast enough from one household to the next to cause the huge number of cases that we saw during the Black Death epidemics.)
——英国科学家推翻了原来的鼠疫感染论，提出了空气传播疾病才是黑死病主因的新学说
我们认为，DNA 片段是大自然的产品，并不能仅因为被分离出来就将其视为专利。 (We hold that a naturally occurring DNA segment is a product of nature and not patent eligible merely because it has been isolated.)
——美国最高法院裁决 DNA 不能成为专利，但是人工复制的基因拥有知识产权


我是西斯大帝，我要参加总统选举
&nbsp;

战无不胜的朝鲜航天局 Logo 疑似借鉴了美帝 NASA 的设计
&nbsp;

Windows XP：老当益壮，宁移白首之心；穷且益坚，不坠青云之志
&nbsp;

Chrome： 无路请缨，等终军之弱冠；有怀投笔，慕宗悫之长风
&nbsp;
5.3%
Android KitKat 版本的市场占有率已经超过 5.3%，现在 4.0 及其以上版本的占有率高达 81%
94431224
亚特兰大机场成为 2013 年最繁忙的机场，北京机场以 1000 万多的吞吐差距位列第二
&nbsp;

4 亿
LINE 今日用户正式突破 4 亿，每日信息发送在 100 亿条以上
20 亿
苹果试图从与三星的专利纠纷诉讼中获得 20 亿美元的巨额赔款
&nbsp;

1，中国男人
马云表示国内某男艺人的婚外情无关紧要
他只是犯了男人都会犯的错误，现在笑话他的人也许也会犯同样的错。
马云说了这番话后，台下哄堂大笑，男嘉宾笑得前仰后合，女嘉宾乐得花枝乱颤。
晚宴结束后，马云接到来自成龙的短信：
马总你说得太棒了！今夜小聚，高尔夫球还是春卷，任君选择。
&nbsp;

2，这是谁干的！
微软网站 Windows on Devices 开天窗
前日。
——新产品就要上线了，上面的大老板很看重哟，大家可千万别捅出什么娄子出来。
——嘿嘿。 ……
今日。
Boss：
——谁干的，这是谁干的？！
——老板，愚人节快乐！
次日，临时工小明被辞退，他幽怨地表示：
作为一个文科生，刚来美国把时差记混了有什么办法。
&nbsp;

3，猴族危机
三星、东芝和 HTC 在愚人节使用了相同的彩蛋玩笑
&nbsp;

你看这是一副手套而已，其实它可以打手机！
——HTC

你看这只是一副手套而已，其实它可以用来拍 4K 视频！
——东芝

你看这就只是一副手套而已，其实它是一个 1600 万像素的相机！
——三星
你看这就只是一副手套，它也的确只是一副手套，但这是一副由原研哉老师亲自设计的手套，纯白款只要 3999 元哟！
——某国内未推出智能手机系统

4，要想过此路，留下买路钱
旧金山每年将向 Google 等公司的员工公共汽车征收费用以允许他们继续使用停车站
——你们占用了我们的公共设施！
——那我们交钱行不行？
——好！
……
——你们这样做会加剧普通人出行负担！
——那我们交钱行不行？
——好！
……
——你们……你们这样科技巨头已经破坏了我们城市的人文美！
——那我们交钱行不行？
——好！
&nbsp;

5，毕业生
纽约超过一半的科技公司从业者没有大学文凭
春风得意的大学毕业生 Jack 揣着终面通知踏进梦寐以求的公司。
——我是哈佛、康奈尔的工程学双学位学士，兄弟你呢？
——呃，我就上过一个学院（college）而已，最后还退学了。
——诶？那你还真不简单，学历不高……哎，不好意思。
——嘿嘿，没事。不过我感觉我这一关你应该是过不去了。
——?
——哦，我就是这家公司的 CEO 咯，嘿嘿。
——！
——对了，我之前上的伊顿。
Jack 面如死灰，白色衬衣的领口被汗水全部浸湿了。
&nbsp;

6，不好笑的玩笑
EA COO 因为愚人节开的玩笑而不得不向 Wii U 道歉
——这是银座的一间旺铺，不知大人是否能赏光和我们一起运作？
——嗯，这个还是可以考虑一下的嘛，但是你们卖了那么多楼怎么还留有旺铺？
——你们和他们合作，但不也是留了一手吗？
EA 和索尼相视大笑，把酒言欢。
此时，苦闷的任天堂一个人在东京湾的夜风中苦苦思索如何发掘新的游戏性。
&nbsp;

7，嘴炮无双
苹果和三星的专利诉讼纠纷继续白热化
苹果律师厉声批评：
三星现在已经彻底坠入抄袭的黑暗面了！
三星律师机智反击：
乖儿子，爹等会儿给你买糖吃。
苹果律师稍微一愣，憋红了脸说到：
你，你就只会抄袭！
三星律师轻轻拂过发梢，一阵清扬香气飘荡在法庭内：
乔布斯当年还是这样说 Android 的呢，Google 抄袭了？哼，无-稽-之-谈！
旁听的 Google 代表无辜地望着庭上的律师，无可奈何地苦笑了。
</content>
</item>
<item>
<title>Save My Time, Save My Life —— Link Bubble</title>
<link>http://www.phonekr.com/save-my-time-save-my-life-link-bubble/</link>
<description>一寸光阴一寸金, 寸金难买寸光阴. </description>
<content>如果你也和我一样是一个重度 Twitter 和 Google+ 用户, 而且更经常在手机上使用这两个客户端, 你可能会遇到一个问题: 当你打开一个来自 tweet/post 的链接时, 你不得不从 Twitter/G+ 客户端跳转到 Chrome/你的默认浏览器, 等网页加载完, 看文章, 然后再跳回客户端. 有时候更讨厌的是, 由于经过了短链接处理 (Twitter/bit.ly/goo.gl), 一个原本应该在 YouTube 里打开的链接依然强迫你跳转到 Chrome, 等 Chrome 解析短链接, 然后再跳转到 YouTube&#8230; 这个过程既毫无意义又让人烦躁, 而且最重要的是, 它让你花了很多完全没必要的时间在等待上.
那么, 问题就摆在这里, 有什么解决方案么?
今天, 我可以给出一个合适的答案, 那就是 Link Bubble.
应用截图
 
打开应用就会进入 Link Bubble 的主界面. 在主界面上你会看到一个简明扼要的统计 —— Link Bubble 已经替你节省了总共多少时间/每个链接节省了多少时间. 点击下方历史按钮即可以查看所有用 Link Bubble 打开的链接, 可以重新打开, 在浏览器中打开, 复制/分享链接或者清空历史记录.
 
 而 Link Bubble 真正的强大之处就是在于它能够省却大量的等待时间. 比如我在 Google+ 中点击了来自 Designmodo 的一个链接, 这时, Link Bubble 自动接管了链接 (需要在第一次使用时设置 Link Bubble 为地址的默认打开方式), 在屏幕边缘出现一个小提示环, 开始载入链接. 这是你可以继续浏览你的时间线而不必去在意那个链接的载入进度. 等到链接载入完毕之后, Link Bubble 便会自动以迷你浏览器的形式弹出, 让你查看链接的内容. 当你浏览完链接中的内容之后, 你可以直接从分享按钮中把这个链接分享给其他应用, 或者简单的按下 Back 键回到原先的应用中继续浏览时间线.
 
Link Bubble 还提供了方便的快速处理链接的功能. 你可以为它设置两个快速操作 (我选择的是添加到 Pocket 和通过 PushBullet 推送). 如果你觉得这篇文章适合稍后阅读, 你可以直接按住这个小圆球, 往左上角 Pocket 图标拖动, 然后, 这篇文章就会直接进入 Pocket 的阅读列表. 同理你也可以把 Twidere 设置在右上角, 这样你就可以快速的分享一篇文章到推上. Link Bubble 还支持同时加载多个页面, 你可以不必担心原先预载的页面被后来的页面覆盖掉.

Link Bubble 的另一强大之处就是它可以省去短链接在 Chrome 等其他浏览器中解析这一烦人的步骤. 如果你的手机上已经安装了支持原链接的应用, Link Bubble 便能替你省去解析链接 —— 跳转这一步, 在后台解析链接, 解析完了之后直接打开应用, 十分便利.
 
在设置里你可以调整何时自动弹出载入完的页面, 快速操作的应用和默认打开某些链接的应用, 也可以选择以隐身模式打开链接. 另外, Link Bubble 调用的是 Android WebView.
关于应用
Link Bubble 的构思令人拍案叫绝, 这个应用确实是可以节省大量消耗在等待载入上的时间, 让 Twitter/Google+/RSS 等浏览体验更上一层楼. 但是目前在这个版本里有个很明显的问题就是, WebView 在手机上的性能实在是有些着急, 开两个网页往往就会显得很卡. 不过 Romain Guy 已经给出了改进意见, 相信在下个版本中性能就会有所改善.
实际上在短短的试用中, 我觉得 Link Bubble 简直就是为了优化社交应用体验而生的. 以往我们在社交应用中看到链接的时候, 难免要进入链接 —— 这个时候一般是进入一个新的应用/全新的界面 (应用内置浏览器), 等待载入, 看完之后再返回时间线. 这样可以说很大程度上破坏了社交网络时间轴的线性结构 (进入新应用/新界面时对线性结构, 其中的跳转/等待时间产生了分叉). 而 Link Bubble 可以让这个分叉依附在时间轴上, 不会给用户的浏览加入跳转/等待时间, 保持了线性结构的完整性, 优化了阅读体验, 是社交网络应用非常棒的&#8221;补丁&#8221;.
另外我觉得, 如果能让 Link Bubble 自动用 Instapaper 处理链接, 会是个很不错的主意.
Chris Lacy 是何许人也?
也许你早已听过 Chris Lacy 的鼎鼎大名. 或许你并不熟悉这个名字, 但是你用过 Action Launcher —— 一款对手势的利用有着独到见解的启动器, 或者你正在用 Tweet Lanes —— 一款思路新颖, 便于发推和快速互动的 Twitter 客户端 —— 刷推. 这两个应用都是 Chris Lacy 的手笔, 在用户中好评度极高.
Chris Lacy 确实是个非常有创意的开发者, 他来自澳大利亚的布里斯班, 2010 年之前在一家游戏公司 Krome Stuidios 工作. 他于 2010 年离开 Krome Studios 并创建了一个不怎么为人所知的应用工作室 Digital Ashes, 而这个工作室在 2012 解散了. 之后, 他就靠着 Action Launcher Pro 维持生计. Link Bubble Pro 版本售价高达$4.99, Chris 也在 Google+ 上发了一篇文章说明状况:
我不是那些资产过亿的公司比如 Google Facebook, 我不会用免费的服务来换取你们的数据以便于在广告上回本, 我也不在一家获得了百万风头的公司上班.
就像你一样, 我得养家糊口, 我有家人, 要换贷款, 要吃饭, 要做各种各样现实生活中你们在做的事情. 写应用发布到 Play Store 上赚钱是我的全职工作.
我很早就决定要以这个价格发布 Link Bubble 了. 这和我给应用申请的专利没关系. 我不会把在申请专利上花的钱转嫁到用户身上.
我并不是一个在收容所面前乞讨的流浪汉. 我的目的是要做出那些让已经用着好手机的人们乐于使用甚至乐于购买的应用.
我觉得 Link Bubble 是一个 Google/Facebook 级别的大创新, 我觉得 Link Bubble 会很大程度的提升 Android 设备的使用体验, 而且提升得比我见过的任何应用都要多, 它会每天替你省下几分钟的时间. 难道这些东西连 $5 都不值得吗? (而且别忘了, 我也不会搜集你的使用习惯和数据拿去做广告/卖钱)
Link Bubble 有免费版. 等你觉得你需要高级版的功能的时候再花钱.
说句老实话吧, 我觉得 Link Bubble 的价值远远不止这么可怜的五刀, 很多桌面上的生产力工具都会漫天要价, 二十刀都是信手拈来, 我定个五刀已经是为了照顾很多人的感情了. (NovaDNG: 我想到了某神器 OmniFocus&#8230;)
我依然认为买一个好应用是一件性价比非常高的事儿.
高级版不会降价.
当你买了我的应用时, 你支持了我的工作以便我能够让现有的应用更完善, 或者开发新的应用.
作为自己应用的用户 我无比赞同并且建议你好好看看想想下面那条推里的那句话.

(我觉得是时候从说&#8221;好棒的应用, 而且它是免费的诶!&#8221;转到说&#8221;好棒的应用 —— 但是招子放亮点, 他可是免费的.&#8221;了.)
对于那些支持我并且购买了高级版的用户, 我感谢你们. 对于那些认为五刀太贵的用户, 我也希望你能在使用免费版的时候感到开心, 然后意识到我在这个应用费尽心思的价值.
对于这个应用, 我最后送上一句评价:
一寸光阴一寸金, 寸金难买寸光阴.
下载地址: Play Store (Free)|Play Store (Pro) (需要和免费版一起安装)
</content>
</item>
<item>
<title>Muzei —— 意外之念</title>
<link>http://www.phonekr.com/serendipitous-ideas/</link>
<description>这篇文章译自 Muzei 开发者, 我们的老朋友 Roman Nurik 在 Medium 上发布的一篇博客, 讲述了 Muzei 诞生的经历.</description>
<content>这篇文章译自 Muzei 开发者, 我们的老朋友 Roman Nurik 在 Medium 上发布的一篇博客, 讲述了 Muzei 诞生的经历.
智能手机是非常能展现人们个性的私人物品. 所以我丝毫不为看到一大堆优秀的 Android 应用在 Play Store 的&#8221;个性化&#8221;分类下出没现而感到奇怪. 那些能够让你定制到牙齿的壁纸, 小部件, 第三方启动器和其他应用确实没有理由不流行.
让时间回到 2012 年下半年, 当我第一次在内部邮件 (嗯, 我在 Google 的 Android 部门工作) 中看到关于新的锁屏小部件这个概念时, 我第一时间就开始在自己的锁屏上玩起了时钟小部件. 除了一些基本的字体调整之外, 我还自己画了一个类比时钟. 当我意识到&#8221;这里有足够的空间可以让我放下天气图标和数字&#8221;时, 正是我叫出&#8221;啊哈~&#8221;的瞬间 —— 这个想法对我而言有着重大意义, 毕竟我并不太经常仅仅是为了看看我出门要不要带伞而特地打开 Google Now.
与此同时, 我的同 (ji) 事 (you) Adam 经常在吃饭的时候和我讨论这些玩意儿. 我们最后决定做一个&#8221;可接入&#8221;的锁屏插件, 一个我们能轻松的增删功能来满足自己需求的&#8221;仪表盘&#8221;.
于是, DashClock 就这么诞生了.
DashClock 与白色
在一两个星期的公司内部消化之后, 大家都觉得 DashClock 不仅仅适合锁屏, 放在主屏上也挺好使的. 这很简单, 只需要再添加一行代码就成了. 但是问题就这么来了: 就像其他的锁屏应用一样, DashClock 上所有的信息都是白色的. 在原生 Android 中, 锁屏背景会自动降低亮度以保证这些白色元素的可读性, 但是主屏幕是没有这样的保护的. 很多小伙伴都在用高对比度的风景图/独特的抽象画/他们最爱的家庭照做壁纸, 虽然这些图片很漂亮也很有意义, 但是他们并不能让你放在主屏幕上的东西更具有可读性. 更悲剧的是, 这种可读性不佳在 DashClock 这样的白色小部件上显得尤其严重.
于是我选择了在文字下方添加一个半透明黑色方块这样一个简单粗暴的方式来解决这个问题. 问题解决了不是吗? 呃, 我并不这么觉得&#8230; 实际上, 我并不认为这样能算是解决了, 连接近都不算.
这可是 Android 啊老兄! 人们需要更多的选项, 需要让所有的东西都尽在掌握! 就在加入了黑色方块背景之后, 一个同在 Google 工作的弟兄给我发了一封申请:
功能申请: 把前景色从白色换成 Holo 蓝色, Holo 红色等等, 或者黑色.
我接受了这个申请, 但是当我在 2012 年二月启动 DashClock 并且这个申请收到了 80 个以上的投票时, 我才加入了改变前景色为黑色这么个选项. 在缓和了最要紧的问题同时, 我也一直对这个解决方案感到不满. 这个鲠一直在我的喉咙里卡了非常久 —— 足足九个月啊我的老天 —— 而我每天下班回家的路上都会思考这个问题.
回家的路
灵感来临是一件很有趣的事儿. 它们完全有可能不请自来, 在最出人意料的时间现身. 我个人倾向于认为坐在电脑前面盯着显示器等待好主意送上门来实在是无用功. 通常情况下, 这些东西只会在你出门跑步之类的时候不期而至.
不管怎么说, 我当时正快速行走在初冬的曼哈顿, 林肯中心区那寒风凛冽的路上, 双手绝望地在我的口外套口袋深处寻找温暖的庇护所, 目光飘忽地看着前方的路面, 脑海里充斥着关于如何对付高对比度壁纸和一些相关的破事儿. 是的, 埋头走路会让你错过很多东西 —— 别急, 往下读~
我想要用更优雅的方法来解决 DashClock 前景颜色这个令人讨厌的问题; 我坚持认为问题出在壁纸上, 而不是我这儿. 那么, 我该怎么处理好壁纸呢? —— 我应该如何改善 DashClock, 甚至是其他小部件和所有桌面元素的可读性?
就在那次散步中, 我回忆起了某日我在 Medium 上看到的一幅由精挑细选出来颜色渐变组成的抽象作品 (Design/UX 收藏的背景图). 这幅图对于主屏元素可读性来说是非常理想的, 但是并不是非常私人, 而且这会花上我巨量的时间精力来为每种情绪设计合适的调色组合. 我同样也想起了 Timely, 我最爱的应用之一, 有着一个非常棒的主题设计工具, 这个工具带来了非常好用的背景. 它没有边缘, 你也可以选择比较深的颜色来保证白色元素的可读性.
 我一回到家就立刻打开 Photoshop 画样图. 这些由径向和线性元素渐变组成的壁纸在主屏幕上看起来会怎么样呢? 我很快就意识到他们虽然看起来还不错, 但是有两个问题. 首先, 就像前面说的, 设计调色组合和渐变斜率实在是太花时间了. 其次, 更重要的是, 那些用家庭照和风光照做桌面的人该怎么办? 别忘了, 手机是非常私人的设备. 一堆颜色甩在主屏幕上并不是什么有趣的墙纸. 这很不魔法. 于是我放弃了.
&nbsp;
回家的路, 终极版
第二天, 就在同一条回家的路上, 我打算四周看看, 试图捕捉到周围的环境中任何可能引来灵感的东西. 然后, 灵感便送上门了. 他就在那里 —— 问题的答案, 开心地在我每天回家的路上等着我.

(GIF 版本)
在百老汇和阿姆斯特丹之间的 65 号大街上, 有 20 个左右的这样的巨大的 LED 广告牌. 他们不断地循环播放各种林肯中心演出或事件的图片广告. 图片之间的切换效果非常丰富, 包括滑入滑出, 渐变淡入&#8230; 以及从模糊到清晰的渐变. Bazinga! 照片始于一片神秘的模糊, 而后渐渐伴随着文字信息而进入焦点. &#8220;这就是我的主屏应该有的样子,&#8221; 我想. 模糊的壁纸依然能够在一定程度上传达原图的含义, 同时也消去了锐利而引人注目的边缘.
在你主屏上的模糊照片
我以百米赛跑的速度疾驰回家, 开始探索如何将这么个简单的技法应用到解决主屏壁纸问题上. 我可以直截了当的让你选一张图片, 然后让它模糊, 然后把输出的图片作为你的壁纸 (然后我就发现已经有不错的应用能做到这一点了). 我依然觉得有些不满意, 毕竟有些时候你还是希望能够清晰地看到你的孩子, 或者优美的自然风光.
何不试试动态壁纸? 自 Android 2.1 起, 应用就能够设置动态壁纸, 而这些动态壁纸甚至能响应触摸事件, 这样的话让照片暂时变清晰就不再是个问题了, 用个简单的双击手势就能轻松解决. 从技术层面上看, 这简直是完美的解决方案.
于是在 2013 年十一月的那个晚上, 我开始制作这款动态壁纸的概念原型图, 并且命名为&#8221;模糊测试&#8221;. 我很快就意识到了仅仅是模糊还远远不够, 于是便决定加入变暗的滤镜作为背景保护. 大概在 Android Studio 里码了几百行代码并且运行之后, 我的壁纸脱胎换骨.
博物馆与灵感
在我制作&#8221;模糊测试&#8221;的同时, 我也在想很多其他的东西: 我的灵感来自何方? 纽约市是一个巨大的灵感来源 —— 65 大道的街区和林肯中心堪称现代科技与建筑的集大成者. 纽约市同样以它传奇般的博物馆而闻名, 博物馆如 MoMA, 充满想象力的展品和精美的艺术品汗牛充栋. 不仅仅是这些作品本身充满了感染力, 艺术家和她的环境, 甚至是人类历史, 时间的流逝, 宇宙万物这样的更深层的概念, 带来了强烈的视觉与精神冲击. 
我意识到, 我真正想利用这个动态壁纸项目做到的, 并不仅仅是让用户的主屏幕变得好看一点儿, 而是给他们带去灵感. 就像去 MoMA 走一遭能带给我数不清的问题和想法, 这些在我们口袋中的科技产物是可以努力成就一个更崇高的目标的.
旅途之始
接下来就是长达四个月的制造 Muzei 的旅程, 而这段旅程则在 2014 年二月的紧张而令人满足的发布时达到高潮.

在这段四个月的开发中, 我了解到了牛逼的 WikiPaintings 计划, 泡到了我那完美的美术老师未婚妻 (顺便从海量的艺术品里挑选出了现在用着的这些画), 学到了更多我早就想学的关于 OpenGL ES 2.0 的知识, 加入了外部艺术品接口 (就像我在 DashClock 里做的一样), 在 Google 云平台上建立了一个小型的服务器端艺术品管理界面和图像伺服系统, 从 Google 的同事们那儿受到了巨量的反馈, 当然, 也经历了很多在排除问题和捉虫中度过的不眠之夜.
这段旅程和它的结果都让我受益匪浅. Kenton, 在伦敦的一位友人, 最近在 Google+ 上和我分享了这么一个帖子:

&#8220;Muzei&#8221; 是俄语单词&#8221;музей&#8220;音译, 意味着&#8221;博物馆&#8221;, 而这正是 Muzei 最大的一个目标: 一个为你的 Android 主屏准备的, 活的博物馆. 它的另一个目标是希望能够在你的潜意识里植入一个&#8221;去访问一下离你最近的博物馆&#8221;的想法, 博物馆是一个你能继续受到来自世界和无数奇迹的启发的地方. Roman 桑大胜利~
回首
于是, 耶, 这毫无疑问是件关于想法是如何形成的, 有趣的事儿.  DashClock 是从一个将他引向美观的锁屏应用的新 API 中诞生的. 而 Muzei 则是从一个为了解决 DashClock 那苦逼的可见性产生的问题中成型的, 但是它却达到了一个全新的高度. 它变成了一个通过开源与扩展性刺激开发者的途径. 它酿就了一件我用来纪念我在 Android 中喜爱的事物与我有幸居住的这个旖旎城市的纪念品. 但最重要的是, 它化作了一条通过我们人类在这个星球上留下的优美的艺术品给人们带去灵感的路. 
</content>
</item>
<item>
<title>Android Design in Action —— 十大导航错误</title>
<link>http://www.phonekr.com/navigation-anti-patterns/</link>
<description>作为长期使用 Android 的用户, 我经常遇到各种各样的导航上的问题. 这篇文章的目的就是着重强调当下 Android 应用中常见的, 应该避免的导航方式设计错误. 希望这篇文章能让大家摆脱摸着石头过河的窘境, 直接的避免这些错误.</description>
<content>
大家好, 这里是 2014 年第一期正式的 ADiA 教程. 在上一次的设计错误文章里, 我们已经简略的提过了一下导航设计上的错误, 这一次, 我们就这个话题展开, 指出一些大家在设计应用导航时经常被犯下的错误以便警示大家.
 
十大导航设计”反模式”, Android 开发者联系团队为你用心呈现~ 希望大家看 (乖) 得 (乖) 开 (中) 心 (枪)~
&nbsp;
1. 将导航项放在 Action Overflow 里

我应该已经不止一次在各种 App 上看到有人把导航项放在 Action Overflow 中了. 经常被放进 Action Overflow 的导航有&#8221;主页 (脑子一定是被保险柜夹了)&#8221;, &#8220;商店 (有时其实可以理解)&#8221;, &#8220;我的信息 (微信, twitter 中枪)&#8221;, 甚至一些分类. 但是 Action Overflow 真的不是导航项该去的地方, 别忘了这地方是 Action Overflow, 是用来放操作的. 还有另一个很重要的原因是, 在很多有着 Menu 按钮的手机上, 应用中是不会显示 Action Overflow 的, 他们得被 Menu 键唤出, 可见性太低了, 而且关于 Menu 键还有一大堆问题 (这里就不展开了).
还有一点很重要的就是, 在现在的 Android 上, 界面 UI 已经逐渐形成了一个规律 —— 导航靠左, 操作靠右. 如果你硬是要把导航放进 Action Overflow, 无形中也会违背这个规律.
&nbsp;
2. 错误的导航层级

这个错误也是颇为常见的. 在 Android 中我们有很多常见的导航方式, 比如 Tabs, Spinners 和 Drawer. 这些导航方式当然是可以搭配着使用的, 但是当你搭配使用这些导航方式的时候, 请注意他们之间的层级关系. 当你规划你的导航层级的时候, 一般情况下是要构造一个树状结构, 在一个层级下有其他的子层级, 以此类推. 在 Android 中, 不同层级一般对应着不同的导航方式. 而错误的用法是, 比如上图中那样的, 用 Tab 作为最高导航层, Spinners 作为次层, 而 Drawer 作为最次层. 在 Android 上, 这三个导航方式对应的层级是遵循着比较严格的规定的.

上图呢才是一般情况下的正确做法. 通常情况下, Drawer (如果有的话) 代表着最高的导航层级, 然后则是 Spinners, 再次是 Tabs. 如果你有超过三级的导航层级, 我们强烈建议你把最顶端的几个都放在 Drawer 中 (只有 Drawer 能容纳超过一个导航层级, 因为 Drawer 中的项目能够以合理的方式展开), 然后把剩下两个层级分配各 Spinners 和 Tabs. 当然, 实际上作为一个移动应用, 简化层级也是非常重要的, 我们强烈的不推荐你在应用中采用非常深的导航层级, 这只会让用户感到困惑.
还有一点需要注意的是, 虽然在上面的示意图中 Spinner 和 Drawer 共存而且看起来 Spinner 在 Action Bar 上 (Drawer 实际上在 Action Bar 之下), 但是在实际应用中, 当用户划出 Drawer 的时候, 你应该让 Drawer 渐变成另一副模样 —— 只留下在应用中全局通用的操作, 比如搜索, 隐去其他的东西, 比如 Spinners, 换成 App 的名字. 这样的话就不会产生导航层级上的困惑了.
另外, 关于 Drawer, 我们还有另一期专门介绍它的 ADiA: Android Design 趋势——Navigation Drawer.
&nbsp;
3. 不能滑动切换的 Tabs.

在 Android 中, Tab 几乎是绑定了横向滑动的操作. 用户对 Tabs 的期望就是他们可以被滑动. 如果你在页面上采用了 paginate (ViewPager) 内容, 那么内容上的滑动操作就会和 Tabs 的全局滑动产生混淆. 当然, 如果页面中只有一小部分是可以滑动的内容 —— 比如一个非全屏的图片浏览, 那么这么做是完全没问题的, 只要不与 Tabs 本身的滑动手势冲突即可.

正确的做法很简单, 只要把横向的 ViewPager 改为纵向就行了. 当然, 如果你有其他的解决方案也很好, 只要规避与导航的手势冲突就可以了.  
&nbsp;
4.  深层/顽固的 Tabs

什么叫做&#8221;深层&#8221;的 Tabs? 要解释深层, 一般来讲我们用&#8221;浅层&#8221;来做对比. 在 Android 上, Tabs 应该是浅的. 你用 Tabs 来作为视图更变, 或者分类切换之用, 而不应该在 Tabs 之内再有层级和历史. 通常情况下, Tabs 只应该在导航界面出现. 在上图的例子中, 用户点击一个项目, 理应打开一个全新的页面, 而不是刷新 Tabs 下的内容. 这种持续出现的 Tab 就是我们所说的深层 Tabs, 或者说在 Tabs 之内有历史.
之所以不这么做的原因是, 当你离开了这个 Tab, 比如说滑动到了另一个 Tab 上的时候, 你就把这个 Tab 置于了一种尴尬的境地 —— 现在这个 Tab (对于用户而言不可见) 应该显示什么呢? 当用户从另一个 Tab 回到这个 Tab (无论是点击还是滑动) 时, 他应该保持原来的样子 (显示内容) 呢, 还是显示列表? 在这种情况下, 用户会很容易的感到困惑. 为了避免这种尴尬, 我们建议 Tabs 最好做得浅一些.
另外, 若你的 Tabs 坚持不变的话, 很大程度会影响到 Back 的作用. 当用户切换到不同的 Tab 并且在这个 Tab 中做了一些操作之后, Back 的作用就会变得不甚明确. 如果你非得在同一个视图内显示新内容, 那么我们建议你采用 Drawer, Drawer 才是为全局内容切换而生的.

上图显示的才是正确的做法, 打开一个新的, 没有 Tabs, 有 Up 的界面, 而不是继续显示 Tabs.
&nbsp;
5. 溯回 (反向遍历) Tabs

前面说的 Tabs 不应该深层, 同样也提到了 Tabs 不应该包含历史. 什么叫做不因该包含历史呢? 就是指, 你在 Tabs 上的操作不能被 Back 溯回. 同一个导航层级是不应该被溯回的.
&nbsp;
6. 溯回 (反向遍历) Drawer

和 Tabs 一样, Drawer 中的导航项也不应该被溯回. 理由同上. 当用户在不同的导航项中切换时, 你应该重置任务状态. 在不同的导航项目中切换就像是切换到不同的应用中一样 (比如说, 在 Google+ 中, Photos Tab 根本就是另一个应用&#8230; ). 在用户按下 Back 的时候, 你应该退出应用, 或者回到应用的主界面 —— 这里的主界面是指那个自然状态下的初始界面, 一个你特别希望用户 (同时用户也特别期待能够容易地) 回到的地方.
&nbsp;
7. 深层的 Navigation Drawer

前文说过, 一个移动应用不应该有复杂的结构. 如果你需要特别多的导航层级, 那么说明你真正应该做的其实是简化你的应用结构. Drawer 存在的意义是提供一个稳定的导航枢纽, 让用户不需要记住自己在什么地方, 他只要打开 Drawer 就能自然的明白一切. 但是, 如果在 Drawer 里面弹出了一个次级 Drawer 会把很多人逼疯.
Drawer 虽然有能力承载多个导航层级, 但是正确的做法不是这样的.

当你需要在 Drawer 中放入多个导航层级的时候, 不应该以新弹出一个 Drawer 的方式, 而是应该以展开/折叠的方式呈现这个子层级. 展开和折叠并不会造成整个控件的剧变, 同时能展示给用户少多一些的项目. 关于 Drawer 上的导航项以及触摸区域的设置, 在 Android Design 中另有提及.

如果你的导航层级真的很深, 你可以单独做出一个次级导航页 展示所有的导航项目. 比如说, 在 Play Music 中, 曲库下的 Tabs (艺人, 专辑, 风格, 曲目) 其实完全可以做成 Drawer 中的次级导航项, 但是把它们分散到 Tabs 中能够更好的优化导航. (上图这样则是有点类似腹肌式的导航方式. 当然, 最好不要只是在上面写着文字, 可以往里面添加点图片啊, 内容预览什么的)
&nbsp;
8. 错误的 Drawer 转场
我们在这里说转场的时候, 是意味着过渡动画和一个有着 Drawer 的界面和没有 Drawer 的界面之间的切换. 下面两个错误都和这个转场有关.

当用户打开 Drawer, 按下其中一个项目之后, 他不应该被带去一个有着 Up 箭头的新界面. 所有在 Drawer 中呈现的导航项, 都应该在其界面中显示 Drawer 指示 (比如说, &#8220;汉堡&#8221;). 而且, 当用户通过 Drawer 从其中一个导航项进入另一个导航项,  他不应该看到标准的视图切换动画 (渐变 + 放大, 常见于进入新界面/新活动时), 而应该是一个细致而迅速的渐隐 + 渐显动画, 伴随着 Drawer 的关闭而完成. 同样的动画也应该应用在 Action Bar 的转变上. 还有一个对于开发者而言常见的讨论是, 应该用 Activity 还是 Fragment? 这个问题并没有标准答案, 也很难回答. 一般来说还是视情况而定 —— 它实现起来难度如何? 对于我的应用而言靠谱吗? 如果你有什么建议的话当然欢迎评论.

上图展示的就是正确的做法, 在 Action Bar 上显示 Drawer Indicator.
&nbsp;
9. 不显示 Up 箭头

上文说过, 所有出现在 Drawer 中的导航页面都应该显示 Drawer 指示, 这点反过来也是一样成立的 —— 没有显示在 Drawer 中的东西就不应该显示 Drawer 指示. 比如在上图, 当用户进入某个内容的时候, Drawer 指示依然显示. 实际上, 这个内容页已经不是导航页了, 也没有在 Drawer 中显示, 这里是应用更深的层级, 已经不归 Drawer 管了. 这里应该显示的是 Up.

在显示 Up 同时, 你也可以允许用户以边缘滑动的方式唤出 Drawer. 你不需要总是显示 Drawer 指示来告诉用户可以唤出 Drawer, 因为在次级界面中唤出 Drawer 是某种意义上的&#8221;进阶用户操作&#8221;. 有人发现了, 那很好, 没人发现, 不要紧, 通过 Up 他们依然能够找回他们需要的导航. 另外, 你可以看看 Google Play Newsstand 是如何处理在没有 Drawer 指示的地方处理 Drawer 的 —— 渐变动画真的非常重要.
&nbsp;
10. 右侧导航

前文说过, Android 上有个规律就是&#8221;导航靠左, 操作靠右&#8221;. 对于从左向右阅读的用户而言, 左侧导航项能够更好的强调导航层级. 另外, 由于 Spinners 只能出现在左侧, Tabs 也往往将最左侧的一个设为默认, 右侧的 Drawer 与这些操作距离过远. 而且, Drawer 指示放在左边, 操作的时候向左回缩, 如果在右侧使用 Drawer 的话就会遇到视觉隐喻冲突.

正确的做法就是如上图所示. 当然, 如果在从右向左的语言环境下 (比如说, 希伯来文什么的, 不过我觉得我们国家的开发者应该不怎么会去做希伯来语适配吧&#8230;), 那当然是应该反转这些东西的位置.
&nbsp;
以上就是本期 ADiA 介绍的全部十个导航设计错误. 如果你有更多的常见/不常见错误, 或者对于上面提出的错误有更好的解决方案, 当然欢迎评论.
最后, 一如既往的感谢 +Roman Nurik 和 +Nick Butcher 的 Android Design in Action 活动.
</content>
</item>
<item>
<title>极客公园环聊日常 —— 由 IUNI 引发的杂谈</title>
<link>http://www.phonekr.com/iuni-and-more/</link>
<description>极客公园环聊的日常</description>
<content>今天晚上龚叔 (+Carlos Gong) 在环聊里转发了一条 IUNI 的微博, 引发了一场挺有启发的讨论.
&nbsp;
出场人物:
+Geoffrey.R HSU: 我 (全程打酱油)
+王洪森: @王洪森 (主角 1)
+Carlos Gong: @冬虫夏草卡洛斯 (主角 2)
+John York: @detecti1914 (吐槽役 1)
+Tony Qian: @tonyq0802 (吐槽役 2)
&nbsp;
Part 1: IUNI 与动画
Carlos Gong &#8211; 6:48 PM
http://weibo.com/p/1006063840873722 我得说，作为第一个版本，INUI 似乎没让人太失望。
PPT 整体上比老罗/李楠/雷军都要舒服些。虽然小细节上值得吐槽的地方有。
王 洪森 &#8211; 6:52 PM
我觉得有点动画很多余
浪费性能
Geoffrey.R Hsu &#8211; 6:53 PM
我觉得动画还不错
看着挺愉悦的
也不算繁复
John York (detecti1914) &#8211; 6:53 PM
卖点是设计么
王 洪森 &#8211; 6:54 PM
老罗的锤子我后来在我朋友手机上体验过
我觉得有细节、有灵气，但很多地方都缺乏深思熟虑，想当了前面没想到后面
John York (detecti1914) &#8211; 6:54 PM
特性没看到什么的感觉
王 洪森 &#8211; 6:54 PM
我觉得 INUI 的操作不直观
虽然操作方式很基本，挺适合手机，但给的提示太少
用户不看演示，不可能天然知道。
Geoffrey.R Hsu &#8211; 6:57 PM
闹钟那里简直精仿 iOS 7…
设计也不是很好…
王 洪森 &#8211; 6:59 PM
我觉得是一个性能理想化，设计苹果化的 UI 设计
Geoffrey.R Hsu &#8211; 6:59 PM
+1
精辟的总结
王 洪森 &#8211; 7:01 PM
直观和直接是我现在觉得比较合理的设计，否则为了动画效果影响开发进度，就会跟老罗一个德行，只有跳票。
Tony Qian &#8211; 7:03 PM
动画这东西，看着好看，用着还想好用，那太难了。
王 洪森 &#8211; 7:04 PM
iOS 上的 path 算是能做到这点，但已经比较要求性能配合了。
Geoffrey.R Hsu &#8211; 7:04 PM
Android 现在是打算开始重视动画了
王 洪森 &#8211; 7:05 PM
其实我觉得交互的趣味，可能比动画更有点意义，比如 clear
Geoffrey.R Hsu &#8211; 7:05 PM
4.4 新加入了那个 scenes 就是个信号
好的交互也需要配合上合理的动画才能发挥全力啊
&nbsp;
Part 2: 风格问题
Tony Qian &#8211; 7:05 PM
这个系统是 iOS 7 么
王 洪森 &#8211; 7:05 PM
同意
哈哈，拖泥你真黑
确实，开创性少了点，还不如 Windows Phone
Tony Qian &#8211; 7:09 PM
跟在别人屁股后面肯定是死啊
这也不拍明年苹果 iOS 8 风格大变
丫就傻逼了
Geoffrey.R Hsu &#8211; 7:09 PM
哈哈哈
Tony Qian &#8211; 7:09 PM
老罗当年拍胸脯说跟着苹果 3.5 一生挚爱
结果现在尴尬了
Geoffrey.R Hsu &#8211; 7:09 PM
iOS 8 视觉风格应该不会改了
Tony Qian &#8211; 7:10 PM
Ubuntu Phone 也好，Jolla 也好
都有自己独立的风格
王 洪森 &#8211; 7:10 PM
iOS 7 真的太大胆了，目前从放出的 7.1 测试版来看，苹果还在努力优化及合理化它
Tony Qian &#8211; 7:10 PM
都在力求和 Andorid iOS 保持区别的时候，国内还跟在 (iOS) 屁股后面
王 洪森 &#8211; 7:11 PM
同意拖泥
Geoffrey.R Hsu &#8211; 7:11 PM
是啊
托尼 +2
王 洪森 &#8211; 7:12 PM
国内的总是想把安卓做成 iOS
Geoffrey.R Hsu &#8211; 7:12 PM
没错啊…
王 洪森 &#8211; 7:12 PM
真心不知道为了个什么
Geoffrey.R Hsu &#8211; 7:12 PM
国外的都在创新, 国内的都在学 iOS
价值观问题… 吧…
Tony Qian &#8211; 7:14 PM
我一直觉得 Google 在设计上多用点心，Android 还能上好几个档次
第三方 OME 机会很多的
Geoffrey.R Hsu &#8211; 7:14 PM
是的
问题就是 Google 不打算让 Android 的设计出风头啊…
努力在减少系统的存在感呢
&nbsp;
Part 3: 关于 MIUI 和小米 (还有元宵)
王 洪森 &#8211; 7:15 PM
不过背后使用安卓这层，我觉得小米无论从品牌形象，产品、甚至幻灯片，丫人家起码是风格一致的，虽然品味不敢恭维，但起码丫没有准备要像 iOS （视觉上），而且至少一致。
Tony Qian &#8211; 7:16 PM
没错~
王 洪森 &#8211; 7:16 PM
就怕东一榔头西一榔头，或者丑到要死还不知道改的。
Geoffrey.R Hsu &#8211; 7:16 PM
+3
MIUI 其实还是有仿 iOS…
王 洪森 &#8211; 7:17 PM
6
目前没追7
Geoffrey.R Hsu &#8211; 7:17 PM
嗯
那算是历史遗留问题
王 洪森 &#8211; 7:18 PM
我觉得它更多的是在系统操作的抉择上趋向 iOS。比如安装和卸载等。
Carlos Gong &#8211; 7:19 PM
MIUI V5 的时候明显感觉到整个系统从开始规划的时候就进行了统一的架构设计和风格规范。
Geoffrey.R Hsu &#8211; 7:19 PM
毕竟是 Rigo 操刀
龚星Carlos Gong &#8211; 7:19 PM
我觉得这是 V5 比 V3 V4 最大的进步。
也是 MIUI 甩掉国内其它 ROM 最重要的一点。
Geoffrey.R Hsu &#8211; 7:20 PM
Rigo 在架构规划方面我觉得目前国内无出其右
其实就连乐 OS 都很好
Tony Qian &#8211; 7:21 PM
原来那个元宵是洪森啊
我以为是 Carlos 的新头像呢
王 洪森 &#8211; 7:21 PM
其实但从产品层面出发，我觉得是不完整和全面的。安卓原生确实更符合 Google 的调性。
John York (detecti1914) &#8211; 7:21 PM
Carlos Gong 以前用过类似的吧
Geoffrey.R Hsu &#8211; 7:21 PM
哈哈哈哈哈哈哈哈
王 洪森 &#8211; 7:21 PM
魅族在产品层面的设计其实也不错
Geoffrey.R Hsu &#8211; 7:21 PM
那个元宵哈哈哈哈哈哈哈
Carlos Gong &#8211; 7:22 PM
现在也在用啊，我的 QQ 头像～
王 洪森 &#8211; 7:22 PM
但问题是他们的手机界面那么好看，而幻灯片那么难看就是有问题的
Geoffrey.R Hsu &#8211; 7:22 PM
Flyme 2.0 其实挺好的…
&nbsp;
Part 4: 颜色问题 (以及基佬)
王 洪森 &#8211; 7:23 PM
大家都能知道小米的品牌色是那个比较偏红的橘色
却很难说出魅族的品牌色
Tony Qian &#8211; 7:23 PM
等诺基亚来创新下，三星这种销量第一的怂包没戏，HTC 快死了，LG 就是个跟班，Sony 被之前的成功拖累。
看好诺基亚
Carlos Gong &#8211; 7:23 PM
IUNI 幻灯片还好吧，至少不算丑。细节就不说了，恶心的地方不少。。。。
Geoffrey.R Hsu &#8211; 7:23 PM
蓝色啊
Tony Qian &#8211; 7:23 PM
小米那个品牌色是牺牲了美感堆砌出来的
到处都是橙色
Carlos Gong &#8211; 7:23 PM
至于风格。。。。。 刚刚开始，没法要求他们用北极蓝做出一套自己的幻灯片然后全厂到处用吧。。。。
Tony Qian &#8211; 7:23 PM
橙色，不管好不好看
王 洪森 &#8211; 7:24 PM
而魅族的发布会弄到那么大阵仗却用了个苹果官方模版了事
Carlos Gong &#8211; 7:24 PM
小米开始各个场合用橙色也是在小米一代出了以后的时候。。。。
魅族这个。。。。。 李楠的个人趣味影响太大了。。。。。
苹果的官方模板和高桥流文字排版是李楠个人的爱好。
Geoffrey.R Hsu &#8211; 7:25 PM
小米橙太 2.3 了…
魅族蓝比较 4.0
王 洪森 &#8211; 7:26 PM
魅族的蓝并没有充分被贯彻和突出
Carlos Gong &#8211; 7:26 PM
魅族蓝没有充分贯彻 +1
Geoffrey.R Hsu &#8211; 7:26 PM
至少幻灯片上没有
+2
王 洪森 &#8211; 7:26 PM
我们明显对知乎的蓝更有印象
Geoffrey.R Hsu &#8211; 7:26 PM
哈哈哈哈哈哈哈哈
Carlos Gong &#8211; 7:26 PM
是的。
Tony Qian &#8211; 7:26 PM
flyme 3.0 感觉整体变暗了
和之前的蓝有点不同
Geoffrey.R Hsu &#8211; 7:27 PM
知乎换图标之后蓝色也变暗了
Tony Qian &#8211; 7:27 PM
原来很基佬
现在是老gay 的感觉
王 洪森 &#8211; 7:27 PM
靠
Geoffrey.R Hsu &#8211; 7:27 PM
Flyme 3.0 不如 2.0 好看…
王 洪森 &#8211; 7:27 PM
xingyuan也暗了
Geoffrey.R Hsu &#8211; 7:27 PM
基佬和老 gay 的区别是啥…
王 洪森 &#8211; 7:27 PM
也变老gay了
Carlos Gong &#8211; 7:28 PM
拖泥的一直没暗～
王 洪森 &#8211; 7:28 PM
嗯，年轻的 gay
&nbsp;
Part 5: Flyme 与魅族 (以及小伙伴们的腹黑日常)
Carlos Gong &#8211; 7:28 PM
我刚从西单大悦城回来。那边的 MX2 也已经默认 flyme 3 了～
Geoffrey.R Hsu &#8211; 7:28 PM
我漏掉了什么没看吗…
Carlos Gong &#8211; 7:29 PM
MX2 刚开始的时候是软件硬件眼前都一亮的。。。。 现在握着还是温润舒适大小正好，软件看着已经味道有点不对了。
王 洪森 &#8211; 7:29 PM
魅族自己出的应用，除了底部的 smartbar 几乎没办法看出是他们家的东西
Carlos Gong &#8211; 7:29 PM
不过话说 MX3 的背其实很舒服。。。
王 洪森 &#8211; 7:30 PM
而小米的一看就能知道
Tony Qian &#8211; 7:30 PM
MX 3 握感比 MX 2 下降了很多
Carlos Gong &#8211; 7:30 PM
额。。。。 flyme 2.0 时代有一个突出特征是右上角的 scrollable tabs，3.0 砍了。
王 洪森 &#8211; 7:31 PM
MX 3 背部闪光灯附近手感很次，剌手
Carlos Gong &#8211; 7:31 PM
措辞改一下，2.0 时代有一个很突出的特征是浅蓝色顶部 action bar 带右上角 scrollable tabs，这个设计现在貌似是砍掉了。
王 洪森 &#8211; 7:31 PM
小米的装在什么 rom 上都能看出是小米
而魅族首先不能随便装在别的上面
Tony Qian &#8211; 7:32 PM
MX 2 的闪光灯不是 LED 的，会发热，如果用来当做手电筒，会把后盖融化
Carlos Gong &#8211; 7:32 PM
小米的突出风格，其实也是 V5 之后 RIGO 接管才做出来的。不过现在风格已经明显到把多看装在 iOS 上都知道是小米出品了。。。。
Tony Qian &#8211; 7:32 PM
现在去给 Mac mini 上 SSD，求祝福
Carlos Gong &#8211; 7:32 PM
#祝挂
Tony Qian &#8211; 7:33 PM
Mac 怎么备份啊
王 洪森 &#8211; 7:33 PM
祝你永远幸福
仍掉就可以了，不用备份
&nbsp;
Part 6: 魅族与小米的设计与产品
Carlos Gong &#8211; 7:33 PM
大到 T 字结构，小到分享按钮的样式，多看 for iOS 都是一股浓烈的小米味道。
王 洪森 &#8211; 7:35 PM
魅族设计早期是 eico 做的
Carlos Gong &#8211; 7:35 PM
后来魅族把 eico 当时的项目主管挖过去了。黄章回归演讲的时候坐在左边那个。
王 洪森 &#8211; 7:36 PM
唯一记得的是音乐是个大唱片，很老的拟真设计，结果还很少人用到。
还有一个“设计”就是底部的大M，只能开魅族首页，史上最屎设计。
Geoffrey.R Hsu &#8211; 7:39 PM
eico 我很不喜欢
王 洪森 &#8211; 7:40 PM
不过其壁纸那几个气球，配合解锁时需要的上滑动作是有引导的。而且让人感觉轻，这部分觉得要比小米那个各种炒作的山水城市的高几个段位。
Carlos Gong &#8211; 7:40 PM
小米的壁纸大赛就是个笑话。。。。
魅族一直很会玩界面上的这一套。flyme 1.0 开始就有一个特别舒服的充电界面。
王 洪森 &#8211; 7:42 PM
eico 设计的 weico pro 没比官方客户端好多少，当我在犹豫装weico 还是官方客户端的时候，我突然豁然开朗，因为我已经没在玩微博了。
让它们都去死去吧。
Carlos Gong &#8211; 7:42 PM
有的时候会觉得小米已经把这种诡异的不正常气质固化下来想改都很难改了。
尽管这样，感觉 MX3 的 1999 现货还是没法和小米直接竞争。原因说不好，但就是这样。
王 洪森 &#8211; 7:44 PM
软硬结合这事其实魅族做得比小米好。
Carlos Gong &#8211; 7:44 PM
是的。
王 洪森 &#8211; 7:44 PM
但手机只是一部分，小米有他们可以消费的内容
而魅族只能空享受下没有飞线的手机本人
小米已经有亚文化相关的各种周边，包括虚拟的，包括物理的。
Carlos Gong &#8211; 7:46 PM
「我觉得 MIUI 的强大之处大致是三个地方：1、系统层面上，有成体系的结构隐喻、美学风格和基本界面架构（锤子和 Vibe 这种属于没体系的）。2、launcher 和自带应用的特性和体验。比如彻底无打扰的录音机，和电话短信联系人这些基础功能上的特性体验。3、在界面和需求上对生态圈的号召力和控制力。比如有能力让国内应用优先适配 MIUI 的界面风格，比如自己有全套云服务、内容服务（收购的多看）甚至是未来的智能家居服务（比如小米电视和小米路由器）。」
这是之前我的总结，但感觉这个跟手机竞争关系其实不大。。。。
王 洪森 &#8211; 7:46 PM
比如主题，多少设计师在为他做设计呀
Carlos Gong &#8211; 7:47 PM
毕竟生态在纯手机方面又能有多少影响力呢～尤其是在国内。
王 洪森 &#8211; 7:47 PM
比如图文的内容通过多看，用米币购买
同时路由器、盒子、电视等等
手机用途用法不断涌现
还都在小米帝国里
魅族就只有无飞线，窄边框
和M首页和smart bar，不知道在闹哪样
李楠当年致力于让短信和微博私信打通，好号称包含多少思考我就觉得很 2
相同的精力哪怕做个半死不活的米聊，都不会显得太尴尬
魅族本身毫无互联网产品可以称道
&nbsp;
结尾卖萌
Geoffrey.R Hsu &#8211; 7:53 PM
洪森大哥 +13
龚叔 +5
王 洪森 &#8211; 7:53 PM
请叫我元宵
Carlos Gong &#8211; 7:54 PM
洪森 +14
Geoffrey.R Hsu &#8211; 8:32 PM
元宵大哥 +15
Carlos Gong
</content>
</item>
